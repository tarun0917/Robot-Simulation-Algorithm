
webcam_firmware_design.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009404  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409404  00409404  00019404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009bc  20000000  0040940c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00018b84  200009bc  00409dc8  000209bc  2**2
                  ALLOC
  4 .stack        00003000  20019540  0042294c  000209bc  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000209bc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  7 .debug_info   00017ae9  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002fbe  00000000  00000000  00038528  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006fdc  00000000  00000000  0003b4e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c70  00000000  00000000  000424c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b80  00000000  00000000  00043132  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00014a13  00000000  00000000  00043cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000efd6  00000000  00000000  000586c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004eba3  00000000  00000000  0006769b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000402c  00000000  00000000  000b6240  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	40 c5 01 20 35 2c 40 00 fd 2c 40 00 fd 2c 40 00     @.. 5,@..,@..,@.
  400010:	fd 2c 40 00 fd 2c 40 00 fd 2c 40 00 00 00 00 00     .,@..,@..,@.....
	...
  40002c:	fd 2c 40 00 fd 2c 40 00 00 00 00 00 fd 2c 40 00     .,@..,@......,@.
  40003c:	fd 2c 40 00 fd 2c 40 00 fd 2c 40 00 fd 2c 40 00     .,@..,@..,@..,@.
  40004c:	fd 2c 40 00 fd 2c 40 00 fd 2c 40 00 fd 2c 40 00     .,@..,@..,@..,@.
  40005c:	00 00 00 00 fd 2c 40 00 fd 2c 40 00 00 00 00 00     .....,@..,@.....
  40006c:	ad 02 40 00 c5 02 40 00 00 00 00 00 2d 24 40 00     ..@...@.....-$@.
  40007c:	fd 2c 40 00 00 00 00 00 00 00 00 00 fd 2c 40 00     .,@..........,@.
  40008c:	fd 2c 40 00 fd 2c 40 00 fd 2c 40 00 fd 2c 40 00     .,@..,@..,@..,@.
  40009c:	61 22 40 00 fd 2c 40 00 fd 2c 40 00 00 00 00 00     a"@..,@..,@.....
	...
  4000b4:	fd 2c 40 00 fd 2c 40 00 fd 2c 40 00 fd 2c 40 00     .,@..,@..,@..,@.
  4000c4:	fd 2c 40 00 fd 2c 40 00                             .,@..,@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200009bc 	.word	0x200009bc
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040940c 	.word	0x0040940c

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	0040940c 	.word	0x0040940c
  40012c:	200009c0 	.word	0x200009c0
  400130:	0040940c 	.word	0x0040940c
  400134:	00000000 	.word	0x00000000

00400138 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400138:	b580      	push	{r7, lr}
  40013a:	b084      	sub	sp, #16
  40013c:	af00      	add	r7, sp, #0
  40013e:	6078      	str	r0, [r7, #4]
  400140:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400142:	6878      	ldr	r0, [r7, #4]
  400144:	4b2c      	ldr	r3, [pc, #176]	; (4001f8 <pio_handler_process+0xc0>)
  400146:	4798      	blx	r3
  400148:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40014a:	6878      	ldr	r0, [r7, #4]
  40014c:	4b2b      	ldr	r3, [pc, #172]	; (4001fc <pio_handler_process+0xc4>)
  40014e:	4798      	blx	r3
  400150:	4602      	mov	r2, r0
  400152:	68fb      	ldr	r3, [r7, #12]
  400154:	4013      	ands	r3, r2
  400156:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400158:	68fb      	ldr	r3, [r7, #12]
  40015a:	2b00      	cmp	r3, #0
  40015c:	d03c      	beq.n	4001d8 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40015e:	2300      	movs	r3, #0
  400160:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400162:	e034      	b.n	4001ce <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400164:	4a26      	ldr	r2, [pc, #152]	; (400200 <pio_handler_process+0xc8>)
  400166:	68bb      	ldr	r3, [r7, #8]
  400168:	011b      	lsls	r3, r3, #4
  40016a:	4413      	add	r3, r2
  40016c:	681a      	ldr	r2, [r3, #0]
  40016e:	683b      	ldr	r3, [r7, #0]
  400170:	429a      	cmp	r2, r3
  400172:	d126      	bne.n	4001c2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400174:	4a22      	ldr	r2, [pc, #136]	; (400200 <pio_handler_process+0xc8>)
  400176:	68bb      	ldr	r3, [r7, #8]
  400178:	011b      	lsls	r3, r3, #4
  40017a:	4413      	add	r3, r2
  40017c:	3304      	adds	r3, #4
  40017e:	681a      	ldr	r2, [r3, #0]
  400180:	68fb      	ldr	r3, [r7, #12]
  400182:	4013      	ands	r3, r2
  400184:	2b00      	cmp	r3, #0
  400186:	d01c      	beq.n	4001c2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400188:	4a1d      	ldr	r2, [pc, #116]	; (400200 <pio_handler_process+0xc8>)
  40018a:	68bb      	ldr	r3, [r7, #8]
  40018c:	011b      	lsls	r3, r3, #4
  40018e:	4413      	add	r3, r2
  400190:	330c      	adds	r3, #12
  400192:	681b      	ldr	r3, [r3, #0]
  400194:	491a      	ldr	r1, [pc, #104]	; (400200 <pio_handler_process+0xc8>)
  400196:	68ba      	ldr	r2, [r7, #8]
  400198:	0112      	lsls	r2, r2, #4
  40019a:	440a      	add	r2, r1
  40019c:	6810      	ldr	r0, [r2, #0]
  40019e:	4918      	ldr	r1, [pc, #96]	; (400200 <pio_handler_process+0xc8>)
  4001a0:	68ba      	ldr	r2, [r7, #8]
  4001a2:	0112      	lsls	r2, r2, #4
  4001a4:	440a      	add	r2, r1
  4001a6:	3204      	adds	r2, #4
  4001a8:	6812      	ldr	r2, [r2, #0]
  4001aa:	4611      	mov	r1, r2
  4001ac:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4001ae:	4a14      	ldr	r2, [pc, #80]	; (400200 <pio_handler_process+0xc8>)
  4001b0:	68bb      	ldr	r3, [r7, #8]
  4001b2:	011b      	lsls	r3, r3, #4
  4001b4:	4413      	add	r3, r2
  4001b6:	3304      	adds	r3, #4
  4001b8:	681b      	ldr	r3, [r3, #0]
  4001ba:	43db      	mvns	r3, r3
  4001bc:	68fa      	ldr	r2, [r7, #12]
  4001be:	4013      	ands	r3, r2
  4001c0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4001c2:	68bb      	ldr	r3, [r7, #8]
  4001c4:	3301      	adds	r3, #1
  4001c6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4001c8:	68bb      	ldr	r3, [r7, #8]
  4001ca:	2b06      	cmp	r3, #6
  4001cc:	d803      	bhi.n	4001d6 <pio_handler_process+0x9e>
		while (status != 0) {
  4001ce:	68fb      	ldr	r3, [r7, #12]
  4001d0:	2b00      	cmp	r3, #0
  4001d2:	d1c7      	bne.n	400164 <pio_handler_process+0x2c>
  4001d4:	e000      	b.n	4001d8 <pio_handler_process+0xa0>
				break;
  4001d6:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4001d8:	4b0a      	ldr	r3, [pc, #40]	; (400204 <pio_handler_process+0xcc>)
  4001da:	681b      	ldr	r3, [r3, #0]
  4001dc:	2b00      	cmp	r3, #0
  4001de:	d007      	beq.n	4001f0 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  4001e0:	4b09      	ldr	r3, [pc, #36]	; (400208 <pio_handler_process+0xd0>)
  4001e2:	681b      	ldr	r3, [r3, #0]
  4001e4:	2b00      	cmp	r3, #0
  4001e6:	d003      	beq.n	4001f0 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  4001e8:	4b07      	ldr	r3, [pc, #28]	; (400208 <pio_handler_process+0xd0>)
  4001ea:	681b      	ldr	r3, [r3, #0]
  4001ec:	6878      	ldr	r0, [r7, #4]
  4001ee:	4798      	blx	r3
		}
	}
#endif
}
  4001f0:	bf00      	nop
  4001f2:	3710      	adds	r7, #16
  4001f4:	46bd      	mov	sp, r7
  4001f6:	bd80      	pop	{r7, pc}
  4001f8:	004011df 	.word	0x004011df
  4001fc:	004011f5 	.word	0x004011f5
  400200:	200009d8 	.word	0x200009d8
  400204:	2001914c 	.word	0x2001914c
  400208:	20000a4c 	.word	0x20000a4c

0040020c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40020c:	b580      	push	{r7, lr}
  40020e:	b086      	sub	sp, #24
  400210:	af00      	add	r7, sp, #0
  400212:	60f8      	str	r0, [r7, #12]
  400214:	60b9      	str	r1, [r7, #8]
  400216:	607a      	str	r2, [r7, #4]
  400218:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40021a:	4b21      	ldr	r3, [pc, #132]	; (4002a0 <pio_handler_set+0x94>)
  40021c:	681b      	ldr	r3, [r3, #0]
  40021e:	2b06      	cmp	r3, #6
  400220:	d901      	bls.n	400226 <pio_handler_set+0x1a>
		return 1;
  400222:	2301      	movs	r3, #1
  400224:	e038      	b.n	400298 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400226:	2300      	movs	r3, #0
  400228:	75fb      	strb	r3, [r7, #23]
  40022a:	e011      	b.n	400250 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  40022c:	7dfb      	ldrb	r3, [r7, #23]
  40022e:	011b      	lsls	r3, r3, #4
  400230:	4a1c      	ldr	r2, [pc, #112]	; (4002a4 <pio_handler_set+0x98>)
  400232:	4413      	add	r3, r2
  400234:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400236:	693b      	ldr	r3, [r7, #16]
  400238:	681a      	ldr	r2, [r3, #0]
  40023a:	68bb      	ldr	r3, [r7, #8]
  40023c:	429a      	cmp	r2, r3
  40023e:	d104      	bne.n	40024a <pio_handler_set+0x3e>
  400240:	693b      	ldr	r3, [r7, #16]
  400242:	685a      	ldr	r2, [r3, #4]
  400244:	687b      	ldr	r3, [r7, #4]
  400246:	429a      	cmp	r2, r3
  400248:	d008      	beq.n	40025c <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40024a:	7dfb      	ldrb	r3, [r7, #23]
  40024c:	3301      	adds	r3, #1
  40024e:	75fb      	strb	r3, [r7, #23]
  400250:	7dfa      	ldrb	r2, [r7, #23]
  400252:	4b13      	ldr	r3, [pc, #76]	; (4002a0 <pio_handler_set+0x94>)
  400254:	681b      	ldr	r3, [r3, #0]
  400256:	429a      	cmp	r2, r3
  400258:	d9e8      	bls.n	40022c <pio_handler_set+0x20>
  40025a:	e000      	b.n	40025e <pio_handler_set+0x52>
			break;
  40025c:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40025e:	693b      	ldr	r3, [r7, #16]
  400260:	68ba      	ldr	r2, [r7, #8]
  400262:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400264:	693b      	ldr	r3, [r7, #16]
  400266:	687a      	ldr	r2, [r7, #4]
  400268:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40026a:	693b      	ldr	r3, [r7, #16]
  40026c:	683a      	ldr	r2, [r7, #0]
  40026e:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400270:	693b      	ldr	r3, [r7, #16]
  400272:	6a3a      	ldr	r2, [r7, #32]
  400274:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  400276:	7dfa      	ldrb	r2, [r7, #23]
  400278:	4b09      	ldr	r3, [pc, #36]	; (4002a0 <pio_handler_set+0x94>)
  40027a:	681b      	ldr	r3, [r3, #0]
  40027c:	3301      	adds	r3, #1
  40027e:	429a      	cmp	r2, r3
  400280:	d104      	bne.n	40028c <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400282:	4b07      	ldr	r3, [pc, #28]	; (4002a0 <pio_handler_set+0x94>)
  400284:	681b      	ldr	r3, [r3, #0]
  400286:	3301      	adds	r3, #1
  400288:	4a05      	ldr	r2, [pc, #20]	; (4002a0 <pio_handler_set+0x94>)
  40028a:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40028c:	683a      	ldr	r2, [r7, #0]
  40028e:	6879      	ldr	r1, [r7, #4]
  400290:	68f8      	ldr	r0, [r7, #12]
  400292:	4b05      	ldr	r3, [pc, #20]	; (4002a8 <pio_handler_set+0x9c>)
  400294:	4798      	blx	r3

	return 0;
  400296:	2300      	movs	r3, #0
}
  400298:	4618      	mov	r0, r3
  40029a:	3718      	adds	r7, #24
  40029c:	46bd      	mov	sp, r7
  40029e:	bd80      	pop	{r7, pc}
  4002a0:	20000a48 	.word	0x20000a48
  4002a4:	200009d8 	.word	0x200009d8
  4002a8:	00401141 	.word	0x00401141

004002ac <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4002ac:	b580      	push	{r7, lr}
  4002ae:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4002b0:	210b      	movs	r1, #11
  4002b2:	4802      	ldr	r0, [pc, #8]	; (4002bc <PIOA_Handler+0x10>)
  4002b4:	4b02      	ldr	r3, [pc, #8]	; (4002c0 <PIOA_Handler+0x14>)
  4002b6:	4798      	blx	r3
}
  4002b8:	bf00      	nop
  4002ba:	bd80      	pop	{r7, pc}
  4002bc:	400e0e00 	.word	0x400e0e00
  4002c0:	00400139 	.word	0x00400139

004002c4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4002c4:	b580      	push	{r7, lr}
  4002c6:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4002c8:	210c      	movs	r1, #12
  4002ca:	4802      	ldr	r0, [pc, #8]	; (4002d4 <PIOB_Handler+0x10>)
  4002cc:	4b02      	ldr	r3, [pc, #8]	; (4002d8 <PIOB_Handler+0x14>)
  4002ce:	4798      	blx	r3
}
  4002d0:	bf00      	nop
  4002d2:	bd80      	pop	{r7, pc}
  4002d4:	400e1000 	.word	0x400e1000
  4002d8:	00400139 	.word	0x00400139

004002dc <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4002dc:	b480      	push	{r7}
  4002de:	b087      	sub	sp, #28
  4002e0:	af00      	add	r7, sp, #0
  4002e2:	60f8      	str	r0, [r7, #12]
  4002e4:	60b9      	str	r1, [r7, #8]
  4002e6:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4002e8:	68fa      	ldr	r2, [r7, #12]
  4002ea:	68bb      	ldr	r3, [r7, #8]
  4002ec:	019b      	lsls	r3, r3, #6
  4002ee:	4413      	add	r3, r2
  4002f0:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4002f2:	697b      	ldr	r3, [r7, #20]
  4002f4:	2202      	movs	r2, #2
  4002f6:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4002f8:	697b      	ldr	r3, [r7, #20]
  4002fa:	f04f 32ff 	mov.w	r2, #4294967295
  4002fe:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400300:	697b      	ldr	r3, [r7, #20]
  400302:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400304:	697b      	ldr	r3, [r7, #20]
  400306:	687a      	ldr	r2, [r7, #4]
  400308:	605a      	str	r2, [r3, #4]
}
  40030a:	bf00      	nop
  40030c:	371c      	adds	r7, #28
  40030e:	46bd      	mov	sp, r7
  400310:	bc80      	pop	{r7}
  400312:	4770      	bx	lr

00400314 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400314:	b480      	push	{r7}
  400316:	b083      	sub	sp, #12
  400318:	af00      	add	r7, sp, #0
  40031a:	6078      	str	r0, [r7, #4]
  40031c:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40031e:	687a      	ldr	r2, [r7, #4]
  400320:	683b      	ldr	r3, [r7, #0]
  400322:	019b      	lsls	r3, r3, #6
  400324:	4413      	add	r3, r2
  400326:	2205      	movs	r2, #5
  400328:	601a      	str	r2, [r3, #0]
}
  40032a:	bf00      	nop
  40032c:	370c      	adds	r7, #12
  40032e:	46bd      	mov	sp, r7
  400330:	bc80      	pop	{r7}
  400332:	4770      	bx	lr

00400334 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  400334:	b480      	push	{r7}
  400336:	b085      	sub	sp, #20
  400338:	af00      	add	r7, sp, #0
  40033a:	60f8      	str	r0, [r7, #12]
  40033c:	60b9      	str	r1, [r7, #8]
  40033e:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400340:	68fa      	ldr	r2, [r7, #12]
  400342:	68bb      	ldr	r3, [r7, #8]
  400344:	019b      	lsls	r3, r3, #6
  400346:	4413      	add	r3, r2
  400348:	331c      	adds	r3, #28
  40034a:	687a      	ldr	r2, [r7, #4]
  40034c:	601a      	str	r2, [r3, #0]
}
  40034e:	bf00      	nop
  400350:	3714      	adds	r7, #20
  400352:	46bd      	mov	sp, r7
  400354:	bc80      	pop	{r7}
  400356:	4770      	bx	lr

00400358 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  400358:	b480      	push	{r7}
  40035a:	b087      	sub	sp, #28
  40035c:	af00      	add	r7, sp, #0
  40035e:	60f8      	str	r0, [r7, #12]
  400360:	60b9      	str	r1, [r7, #8]
  400362:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400364:	68fa      	ldr	r2, [r7, #12]
  400366:	68bb      	ldr	r3, [r7, #8]
  400368:	019b      	lsls	r3, r3, #6
  40036a:	4413      	add	r3, r2
  40036c:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  40036e:	697b      	ldr	r3, [r7, #20]
  400370:	687a      	ldr	r2, [r7, #4]
  400372:	625a      	str	r2, [r3, #36]	; 0x24
}
  400374:	bf00      	nop
  400376:	371c      	adds	r7, #28
  400378:	46bd      	mov	sp, r7
  40037a:	bc80      	pop	{r7}
  40037c:	4770      	bx	lr

0040037e <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  40037e:	b480      	push	{r7}
  400380:	b085      	sub	sp, #20
  400382:	af00      	add	r7, sp, #0
  400384:	6078      	str	r0, [r7, #4]
  400386:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400388:	687a      	ldr	r2, [r7, #4]
  40038a:	683b      	ldr	r3, [r7, #0]
  40038c:	019b      	lsls	r3, r3, #6
  40038e:	4413      	add	r3, r2
  400390:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  400392:	68fb      	ldr	r3, [r7, #12]
  400394:	6a1b      	ldr	r3, [r3, #32]
}
  400396:	4618      	mov	r0, r3
  400398:	3714      	adds	r7, #20
  40039a:	46bd      	mov	sp, r7
  40039c:	bc80      	pop	{r7}
  40039e:	4770      	bx	lr

004003a0 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4003a0:	b480      	push	{r7}
  4003a2:	b08d      	sub	sp, #52	; 0x34
  4003a4:	af00      	add	r7, sp, #0
  4003a6:	60f8      	str	r0, [r7, #12]
  4003a8:	60b9      	str	r1, [r7, #8]
  4003aa:	607a      	str	r2, [r7, #4]
  4003ac:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4003ae:	2302      	movs	r3, #2
  4003b0:	613b      	str	r3, [r7, #16]
  4003b2:	2308      	movs	r3, #8
  4003b4:	617b      	str	r3, [r7, #20]
  4003b6:	2320      	movs	r3, #32
  4003b8:	61bb      	str	r3, [r7, #24]
  4003ba:	2380      	movs	r3, #128	; 0x80
  4003bc:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4003be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4003c0:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4003c2:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  4003c4:	2300      	movs	r3, #0
  4003c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  4003c8:	e01a      	b.n	400400 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  4003ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4003cc:	009b      	lsls	r3, r3, #2
  4003ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4003d2:	4413      	add	r3, r2
  4003d4:	f853 3c20 	ldr.w	r3, [r3, #-32]
  4003d8:	68ba      	ldr	r2, [r7, #8]
  4003da:	fbb2 f3f3 	udiv	r3, r2, r3
  4003de:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  4003e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4003e2:	0c1b      	lsrs	r3, r3, #16
  4003e4:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  4003e6:	68fa      	ldr	r2, [r7, #12]
  4003e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4003ea:	429a      	cmp	r2, r3
  4003ec:	d901      	bls.n	4003f2 <tc_find_mck_divisor+0x52>
			return 0;
  4003ee:	2300      	movs	r3, #0
  4003f0:	e023      	b.n	40043a <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  4003f2:	68fa      	ldr	r2, [r7, #12]
  4003f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4003f6:	429a      	cmp	r2, r3
  4003f8:	d206      	bcs.n	400408 <tc_find_mck_divisor+0x68>
			ul_index++) {
  4003fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4003fc:	3301      	adds	r3, #1
  4003fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  400400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400402:	2b04      	cmp	r3, #4
  400404:	d9e1      	bls.n	4003ca <tc_find_mck_divisor+0x2a>
  400406:	e000      	b.n	40040a <tc_find_mck_divisor+0x6a>
			break;
  400408:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  40040a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40040c:	2b04      	cmp	r3, #4
  40040e:	d901      	bls.n	400414 <tc_find_mck_divisor+0x74>
		return 0;
  400410:	2300      	movs	r3, #0
  400412:	e012      	b.n	40043a <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  400414:	687b      	ldr	r3, [r7, #4]
  400416:	2b00      	cmp	r3, #0
  400418:	d008      	beq.n	40042c <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  40041a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40041c:	009b      	lsls	r3, r3, #2
  40041e:	f107 0230 	add.w	r2, r7, #48	; 0x30
  400422:	4413      	add	r3, r2
  400424:	f853 2c20 	ldr.w	r2, [r3, #-32]
  400428:	687b      	ldr	r3, [r7, #4]
  40042a:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  40042c:	683b      	ldr	r3, [r7, #0]
  40042e:	2b00      	cmp	r3, #0
  400430:	d002      	beq.n	400438 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  400432:	683b      	ldr	r3, [r7, #0]
  400434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  400436:	601a      	str	r2, [r3, #0]
	}

	return 1;
  400438:	2301      	movs	r3, #1
}
  40043a:	4618      	mov	r0, r3
  40043c:	3734      	adds	r7, #52	; 0x34
  40043e:	46bd      	mov	sp, r7
  400440:	bc80      	pop	{r7}
  400442:	4770      	bx	lr

00400444 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  400444:	b480      	push	{r7}
  400446:	b083      	sub	sp, #12
  400448:	af00      	add	r7, sp, #0
  40044a:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  40044c:	687b      	ldr	r3, [r7, #4]
  40044e:	2208      	movs	r2, #8
  400450:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  400452:	687b      	ldr	r3, [r7, #4]
  400454:	2220      	movs	r2, #32
  400456:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  400458:	687b      	ldr	r3, [r7, #4]
  40045a:	2204      	movs	r2, #4
  40045c:	601a      	str	r2, [r3, #0]
}
  40045e:	bf00      	nop
  400460:	370c      	adds	r7, #12
  400462:	46bd      	mov	sp, r7
  400464:	bc80      	pop	{r7}
  400466:	4770      	bx	lr

00400468 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  400468:	b580      	push	{r7, lr}
  40046a:	b084      	sub	sp, #16
  40046c:	af00      	add	r7, sp, #0
  40046e:	6078      	str	r0, [r7, #4]
  400470:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  400472:	2300      	movs	r3, #0
  400474:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  400476:	687b      	ldr	r3, [r7, #4]
  400478:	f04f 32ff 	mov.w	r2, #4294967295
  40047c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  40047e:	687b      	ldr	r3, [r7, #4]
  400480:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  400482:	6878      	ldr	r0, [r7, #4]
  400484:	4b0e      	ldr	r3, [pc, #56]	; (4004c0 <twi_master_init+0x58>)
  400486:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  400488:	6878      	ldr	r0, [r7, #4]
  40048a:	4b0e      	ldr	r3, [pc, #56]	; (4004c4 <twi_master_init+0x5c>)
  40048c:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  40048e:	683b      	ldr	r3, [r7, #0]
  400490:	6859      	ldr	r1, [r3, #4]
  400492:	683b      	ldr	r3, [r7, #0]
  400494:	681b      	ldr	r3, [r3, #0]
  400496:	461a      	mov	r2, r3
  400498:	6878      	ldr	r0, [r7, #4]
  40049a:	4b0b      	ldr	r3, [pc, #44]	; (4004c8 <twi_master_init+0x60>)
  40049c:	4798      	blx	r3
  40049e:	4603      	mov	r3, r0
  4004a0:	2b01      	cmp	r3, #1
  4004a2:	d101      	bne.n	4004a8 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  4004a4:	2301      	movs	r3, #1
  4004a6:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  4004a8:	683b      	ldr	r3, [r7, #0]
  4004aa:	7a5b      	ldrb	r3, [r3, #9]
  4004ac:	2b01      	cmp	r3, #1
  4004ae:	d102      	bne.n	4004b6 <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  4004b0:	687b      	ldr	r3, [r7, #4]
  4004b2:	2240      	movs	r2, #64	; 0x40
  4004b4:	601a      	str	r2, [r3, #0]
	}

	return status;
  4004b6:	68fb      	ldr	r3, [r7, #12]
}
  4004b8:	4618      	mov	r0, r3
  4004ba:	3710      	adds	r7, #16
  4004bc:	46bd      	mov	sp, r7
  4004be:	bd80      	pop	{r7, pc}
  4004c0:	00400805 	.word	0x00400805
  4004c4:	00400445 	.word	0x00400445
  4004c8:	004004cd 	.word	0x004004cd

004004cc <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  4004cc:	b480      	push	{r7}
  4004ce:	b089      	sub	sp, #36	; 0x24
  4004d0:	af00      	add	r7, sp, #0
  4004d2:	60f8      	str	r0, [r7, #12]
  4004d4:	60b9      	str	r1, [r7, #8]
  4004d6:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  4004d8:	2300      	movs	r3, #0
  4004da:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4004dc:	68bb      	ldr	r3, [r7, #8]
  4004de:	4a34      	ldr	r2, [pc, #208]	; (4005b0 <twi_set_speed+0xe4>)
  4004e0:	4293      	cmp	r3, r2
  4004e2:	d901      	bls.n	4004e8 <twi_set_speed+0x1c>
		return FAIL;
  4004e4:	2301      	movs	r3, #1
  4004e6:	e05d      	b.n	4005a4 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4004e8:	68bb      	ldr	r3, [r7, #8]
  4004ea:	4a32      	ldr	r2, [pc, #200]	; (4005b4 <twi_set_speed+0xe8>)
  4004ec:	4293      	cmp	r3, r2
  4004ee:	d937      	bls.n	400560 <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4004f0:	687b      	ldr	r3, [r7, #4]
  4004f2:	4a31      	ldr	r2, [pc, #196]	; (4005b8 <twi_set_speed+0xec>)
  4004f4:	fba2 2303 	umull	r2, r3, r2, r3
  4004f8:	0b9b      	lsrs	r3, r3, #14
  4004fa:	3b04      	subs	r3, #4
  4004fc:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4004fe:	68ba      	ldr	r2, [r7, #8]
  400500:	4b2e      	ldr	r3, [pc, #184]	; (4005bc <twi_set_speed+0xf0>)
  400502:	4413      	add	r3, r2
  400504:	009b      	lsls	r3, r3, #2
  400506:	687a      	ldr	r2, [r7, #4]
  400508:	fbb2 f3f3 	udiv	r3, r2, r3
  40050c:	3b04      	subs	r3, #4
  40050e:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400510:	e005      	b.n	40051e <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  400512:	69fb      	ldr	r3, [r7, #28]
  400514:	3301      	adds	r3, #1
  400516:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  400518:	697b      	ldr	r3, [r7, #20]
  40051a:	085b      	lsrs	r3, r3, #1
  40051c:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40051e:	697b      	ldr	r3, [r7, #20]
  400520:	2bff      	cmp	r3, #255	; 0xff
  400522:	d909      	bls.n	400538 <twi_set_speed+0x6c>
  400524:	69fb      	ldr	r3, [r7, #28]
  400526:	2b06      	cmp	r3, #6
  400528:	d9f3      	bls.n	400512 <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40052a:	e005      	b.n	400538 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  40052c:	69fb      	ldr	r3, [r7, #28]
  40052e:	3301      	adds	r3, #1
  400530:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  400532:	693b      	ldr	r3, [r7, #16]
  400534:	085b      	lsrs	r3, r3, #1
  400536:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400538:	693b      	ldr	r3, [r7, #16]
  40053a:	2bff      	cmp	r3, #255	; 0xff
  40053c:	d902      	bls.n	400544 <twi_set_speed+0x78>
  40053e:	69fb      	ldr	r3, [r7, #28]
  400540:	2b06      	cmp	r3, #6
  400542:	d9f3      	bls.n	40052c <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  400544:	697b      	ldr	r3, [r7, #20]
  400546:	b2da      	uxtb	r2, r3
  400548:	693b      	ldr	r3, [r7, #16]
  40054a:	021b      	lsls	r3, r3, #8
  40054c:	b29b      	uxth	r3, r3
  40054e:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  400550:	69fb      	ldr	r3, [r7, #28]
  400552:	041b      	lsls	r3, r3, #16
  400554:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  400558:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  40055a:	68fb      	ldr	r3, [r7, #12]
  40055c:	611a      	str	r2, [r3, #16]
  40055e:	e020      	b.n	4005a2 <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400560:	68bb      	ldr	r3, [r7, #8]
  400562:	005b      	lsls	r3, r3, #1
  400564:	687a      	ldr	r2, [r7, #4]
  400566:	fbb2 f3f3 	udiv	r3, r2, r3
  40056a:	3b04      	subs	r3, #4
  40056c:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40056e:	e005      	b.n	40057c <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  400570:	69fb      	ldr	r3, [r7, #28]
  400572:	3301      	adds	r3, #1
  400574:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  400576:	69bb      	ldr	r3, [r7, #24]
  400578:	085b      	lsrs	r3, r3, #1
  40057a:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40057c:	69bb      	ldr	r3, [r7, #24]
  40057e:	2bff      	cmp	r3, #255	; 0xff
  400580:	d902      	bls.n	400588 <twi_set_speed+0xbc>
  400582:	69fb      	ldr	r3, [r7, #28]
  400584:	2b06      	cmp	r3, #6
  400586:	d9f3      	bls.n	400570 <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400588:	69bb      	ldr	r3, [r7, #24]
  40058a:	b2da      	uxtb	r2, r3
  40058c:	69bb      	ldr	r3, [r7, #24]
  40058e:	021b      	lsls	r3, r3, #8
  400590:	b29b      	uxth	r3, r3
  400592:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  400594:	69fb      	ldr	r3, [r7, #28]
  400596:	041b      	lsls	r3, r3, #16
  400598:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  40059c:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  40059e:	68fb      	ldr	r3, [r7, #12]
  4005a0:	611a      	str	r2, [r3, #16]
	}

	return PASS;
  4005a2:	2300      	movs	r3, #0
}
  4005a4:	4618      	mov	r0, r3
  4005a6:	3724      	adds	r7, #36	; 0x24
  4005a8:	46bd      	mov	sp, r7
  4005aa:	bc80      	pop	{r7}
  4005ac:	4770      	bx	lr
  4005ae:	bf00      	nop
  4005b0:	00061a80 	.word	0x00061a80
  4005b4:	0005dc00 	.word	0x0005dc00
  4005b8:	057619f1 	.word	0x057619f1
  4005bc:	3ffd1200 	.word	0x3ffd1200

004005c0 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  4005c0:	b480      	push	{r7}
  4005c2:	b085      	sub	sp, #20
  4005c4:	af00      	add	r7, sp, #0
  4005c6:	6078      	str	r0, [r7, #4]
  4005c8:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  4005ca:	683b      	ldr	r3, [r7, #0]
  4005cc:	2b00      	cmp	r3, #0
  4005ce:	d101      	bne.n	4005d4 <twi_mk_addr+0x14>
		return 0;
  4005d0:	2300      	movs	r3, #0
  4005d2:	e01d      	b.n	400610 <twi_mk_addr+0x50>

	val = addr[0];
  4005d4:	687b      	ldr	r3, [r7, #4]
  4005d6:	781b      	ldrb	r3, [r3, #0]
  4005d8:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  4005da:	683b      	ldr	r3, [r7, #0]
  4005dc:	2b01      	cmp	r3, #1
  4005de:	dd09      	ble.n	4005f4 <twi_mk_addr+0x34>
		val <<= 8;
  4005e0:	68fb      	ldr	r3, [r7, #12]
  4005e2:	021b      	lsls	r3, r3, #8
  4005e4:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  4005e6:	687b      	ldr	r3, [r7, #4]
  4005e8:	3301      	adds	r3, #1
  4005ea:	781b      	ldrb	r3, [r3, #0]
  4005ec:	461a      	mov	r2, r3
  4005ee:	68fb      	ldr	r3, [r7, #12]
  4005f0:	4313      	orrs	r3, r2
  4005f2:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  4005f4:	683b      	ldr	r3, [r7, #0]
  4005f6:	2b02      	cmp	r3, #2
  4005f8:	dd09      	ble.n	40060e <twi_mk_addr+0x4e>
		val <<= 8;
  4005fa:	68fb      	ldr	r3, [r7, #12]
  4005fc:	021b      	lsls	r3, r3, #8
  4005fe:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  400600:	687b      	ldr	r3, [r7, #4]
  400602:	3302      	adds	r3, #2
  400604:	781b      	ldrb	r3, [r3, #0]
  400606:	461a      	mov	r2, r3
  400608:	68fb      	ldr	r3, [r7, #12]
  40060a:	4313      	orrs	r3, r2
  40060c:	60fb      	str	r3, [r7, #12]
	}
	return val;
  40060e:	68fb      	ldr	r3, [r7, #12]
}
  400610:	4618      	mov	r0, r3
  400612:	3714      	adds	r7, #20
  400614:	46bd      	mov	sp, r7
  400616:	bc80      	pop	{r7}
  400618:	4770      	bx	lr
	...

0040061c <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  40061c:	b580      	push	{r7, lr}
  40061e:	b088      	sub	sp, #32
  400620:	af00      	add	r7, sp, #0
  400622:	6078      	str	r0, [r7, #4]
  400624:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400626:	683b      	ldr	r3, [r7, #0]
  400628:	68db      	ldr	r3, [r3, #12]
  40062a:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = p_packet->buffer;
  40062c:	683b      	ldr	r3, [r7, #0]
  40062e:	689b      	ldr	r3, [r3, #8]
  400630:	61bb      	str	r3, [r7, #24]
	uint8_t stop_sent = 0;
  400632:	2300      	movs	r3, #0
  400634:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = TWI_TIMEOUT;;
  400636:	f247 5330 	movw	r3, #30000	; 0x7530
  40063a:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
  40063c:	69fb      	ldr	r3, [r7, #28]
  40063e:	2b00      	cmp	r3, #0
  400640:	d101      	bne.n	400646 <twi_master_read+0x2a>
		return TWI_INVALID_ARGUMENT;
  400642:	2301      	movs	r3, #1
  400644:	e069      	b.n	40071a <twi_master_read+0xfe>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  400646:	687b      	ldr	r3, [r7, #4]
  400648:	2200      	movs	r2, #0
  40064a:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  40064c:	683b      	ldr	r3, [r7, #0]
  40064e:	7c1b      	ldrb	r3, [r3, #16]
  400650:	041b      	lsls	r3, r3, #16
  400652:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  400656:	683b      	ldr	r3, [r7, #0]
  400658:	685b      	ldr	r3, [r3, #4]
  40065a:	021b      	lsls	r3, r3, #8
  40065c:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  400660:	4313      	orrs	r3, r2
  400662:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  400666:	687b      	ldr	r3, [r7, #4]
  400668:	605a      	str	r2, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  40066a:	687b      	ldr	r3, [r7, #4]
  40066c:	2200      	movs	r2, #0
  40066e:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400670:	683a      	ldr	r2, [r7, #0]
  400672:	683b      	ldr	r3, [r7, #0]
  400674:	685b      	ldr	r3, [r3, #4]
  400676:	4619      	mov	r1, r3
  400678:	4610      	mov	r0, r2
  40067a:	4b2a      	ldr	r3, [pc, #168]	; (400724 <twi_master_read+0x108>)
  40067c:	4798      	blx	r3
  40067e:	4602      	mov	r2, r0
  400680:	687b      	ldr	r3, [r7, #4]
  400682:	60da      	str	r2, [r3, #12]

	/* Send a START condition */
	if (cnt == 1) {
  400684:	69fb      	ldr	r3, [r7, #28]
  400686:	2b01      	cmp	r3, #1
  400688:	d105      	bne.n	400696 <twi_master_read+0x7a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  40068a:	687b      	ldr	r3, [r7, #4]
  40068c:	2203      	movs	r2, #3
  40068e:	601a      	str	r2, [r3, #0]
		stop_sent = 1;
  400690:	2301      	movs	r3, #1
  400692:	75fb      	strb	r3, [r7, #23]
  400694:	e034      	b.n	400700 <twi_master_read+0xe4>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  400696:	687b      	ldr	r3, [r7, #4]
  400698:	2201      	movs	r2, #1
  40069a:	601a      	str	r2, [r3, #0]
		stop_sent = 0;
  40069c:	2300      	movs	r3, #0
  40069e:	75fb      	strb	r3, [r7, #23]
	}

	while (cnt > 0) {
  4006a0:	e02e      	b.n	400700 <twi_master_read+0xe4>
		status = p_twi->TWI_SR;
  4006a2:	687b      	ldr	r3, [r7, #4]
  4006a4:	6a1b      	ldr	r3, [r3, #32]
  4006a6:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  4006a8:	68fb      	ldr	r3, [r7, #12]
  4006aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4006ae:	2b00      	cmp	r3, #0
  4006b0:	d001      	beq.n	4006b6 <twi_master_read+0x9a>
			return TWI_RECEIVE_NACK;
  4006b2:	2305      	movs	r3, #5
  4006b4:	e031      	b.n	40071a <twi_master_read+0xfe>
		}

		if (!timeout--) {
  4006b6:	693b      	ldr	r3, [r7, #16]
  4006b8:	1e5a      	subs	r2, r3, #1
  4006ba:	613a      	str	r2, [r7, #16]
  4006bc:	2b00      	cmp	r3, #0
  4006be:	d101      	bne.n	4006c4 <twi_master_read+0xa8>
			return TWI_ERROR_TIMEOUT;
  4006c0:	2309      	movs	r3, #9
  4006c2:	e02a      	b.n	40071a <twi_master_read+0xfe>
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  4006c4:	69fb      	ldr	r3, [r7, #28]
  4006c6:	2b01      	cmp	r3, #1
  4006c8:	d107      	bne.n	4006da <twi_master_read+0xbe>
  4006ca:	7dfb      	ldrb	r3, [r7, #23]
  4006cc:	2b00      	cmp	r3, #0
  4006ce:	d104      	bne.n	4006da <twi_master_read+0xbe>
			p_twi->TWI_CR = TWI_CR_STOP;
  4006d0:	687b      	ldr	r3, [r7, #4]
  4006d2:	2202      	movs	r2, #2
  4006d4:	601a      	str	r2, [r3, #0]
			stop_sent = 1;
  4006d6:	2301      	movs	r3, #1
  4006d8:	75fb      	strb	r3, [r7, #23]
		}

		if (!(status & TWI_SR_RXRDY)) {
  4006da:	68fb      	ldr	r3, [r7, #12]
  4006dc:	f003 0302 	and.w	r3, r3, #2
  4006e0:	2b00      	cmp	r3, #0
  4006e2:	d100      	bne.n	4006e6 <twi_master_read+0xca>
			continue;
  4006e4:	e00c      	b.n	400700 <twi_master_read+0xe4>
		}
		*buffer++ = p_twi->TWI_RHR;
  4006e6:	69bb      	ldr	r3, [r7, #24]
  4006e8:	1c5a      	adds	r2, r3, #1
  4006ea:	61ba      	str	r2, [r7, #24]
  4006ec:	687a      	ldr	r2, [r7, #4]
  4006ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4006f0:	b2d2      	uxtb	r2, r2
  4006f2:	701a      	strb	r2, [r3, #0]

		cnt--;
  4006f4:	69fb      	ldr	r3, [r7, #28]
  4006f6:	3b01      	subs	r3, #1
  4006f8:	61fb      	str	r3, [r7, #28]
		timeout = TWI_TIMEOUT;
  4006fa:	f247 5330 	movw	r3, #30000	; 0x7530
  4006fe:	613b      	str	r3, [r7, #16]
	while (cnt > 0) {
  400700:	69fb      	ldr	r3, [r7, #28]
  400702:	2b00      	cmp	r3, #0
  400704:	d1cd      	bne.n	4006a2 <twi_master_read+0x86>
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400706:	bf00      	nop
  400708:	687b      	ldr	r3, [r7, #4]
  40070a:	6a1b      	ldr	r3, [r3, #32]
  40070c:	f003 0301 	and.w	r3, r3, #1
  400710:	2b00      	cmp	r3, #0
  400712:	d0f9      	beq.n	400708 <twi_master_read+0xec>
	}

	p_twi->TWI_SR;
  400714:	687b      	ldr	r3, [r7, #4]
  400716:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
  400718:	2300      	movs	r3, #0
}
  40071a:	4618      	mov	r0, r3
  40071c:	3720      	adds	r7, #32
  40071e:	46bd      	mov	sp, r7
  400720:	bd80      	pop	{r7, pc}
  400722:	bf00      	nop
  400724:	004005c1 	.word	0x004005c1

00400728 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  400728:	b580      	push	{r7, lr}
  40072a:	b086      	sub	sp, #24
  40072c:	af00      	add	r7, sp, #0
  40072e:	6078      	str	r0, [r7, #4]
  400730:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400732:	683b      	ldr	r3, [r7, #0]
  400734:	68db      	ldr	r3, [r3, #12]
  400736:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  400738:	683b      	ldr	r3, [r7, #0]
  40073a:	689b      	ldr	r3, [r3, #8]
  40073c:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  40073e:	697b      	ldr	r3, [r7, #20]
  400740:	2b00      	cmp	r3, #0
  400742:	d101      	bne.n	400748 <twi_master_write+0x20>
		return TWI_INVALID_ARGUMENT;
  400744:	2301      	movs	r3, #1
  400746:	e056      	b.n	4007f6 <twi_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  400748:	687b      	ldr	r3, [r7, #4]
  40074a:	2200      	movs	r2, #0
  40074c:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  40074e:	683b      	ldr	r3, [r7, #0]
  400750:	7c1b      	ldrb	r3, [r3, #16]
  400752:	041b      	lsls	r3, r3, #16
  400754:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  400758:	683b      	ldr	r3, [r7, #0]
  40075a:	685b      	ldr	r3, [r3, #4]
  40075c:	021b      	lsls	r3, r3, #8
  40075e:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  400762:	431a      	orrs	r2, r3
  400764:	687b      	ldr	r3, [r7, #4]
  400766:	605a      	str	r2, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400768:	687b      	ldr	r3, [r7, #4]
  40076a:	2200      	movs	r2, #0
  40076c:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  40076e:	683a      	ldr	r2, [r7, #0]
  400770:	683b      	ldr	r3, [r7, #0]
  400772:	685b      	ldr	r3, [r3, #4]
  400774:	4619      	mov	r1, r3
  400776:	4610      	mov	r0, r2
  400778:	4b21      	ldr	r3, [pc, #132]	; (400800 <twi_master_write+0xd8>)
  40077a:	4798      	blx	r3
  40077c:	4602      	mov	r2, r0
  40077e:	687b      	ldr	r3, [r7, #4]
  400780:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  400782:	e019      	b.n	4007b8 <twi_master_write+0x90>
		status = p_twi->TWI_SR;
  400784:	687b      	ldr	r3, [r7, #4]
  400786:	6a1b      	ldr	r3, [r3, #32]
  400788:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  40078a:	68fb      	ldr	r3, [r7, #12]
  40078c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  400790:	2b00      	cmp	r3, #0
  400792:	d001      	beq.n	400798 <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
  400794:	2305      	movs	r3, #5
  400796:	e02e      	b.n	4007f6 <twi_master_write+0xce>
		}

		if (!(status & TWI_SR_TXRDY)) {
  400798:	68fb      	ldr	r3, [r7, #12]
  40079a:	f003 0304 	and.w	r3, r3, #4
  40079e:	2b00      	cmp	r3, #0
  4007a0:	d100      	bne.n	4007a4 <twi_master_write+0x7c>
			continue;
  4007a2:	e009      	b.n	4007b8 <twi_master_write+0x90>
		}
		p_twi->TWI_THR = *buffer++;
  4007a4:	693b      	ldr	r3, [r7, #16]
  4007a6:	1c5a      	adds	r2, r3, #1
  4007a8:	613a      	str	r2, [r7, #16]
  4007aa:	781b      	ldrb	r3, [r3, #0]
  4007ac:	461a      	mov	r2, r3
  4007ae:	687b      	ldr	r3, [r7, #4]
  4007b0:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  4007b2:	697b      	ldr	r3, [r7, #20]
  4007b4:	3b01      	subs	r3, #1
  4007b6:	617b      	str	r3, [r7, #20]
	while (cnt > 0) {
  4007b8:	697b      	ldr	r3, [r7, #20]
  4007ba:	2b00      	cmp	r3, #0
  4007bc:	d1e2      	bne.n	400784 <twi_master_write+0x5c>
	}

	while (1) {
		status = p_twi->TWI_SR;
  4007be:	687b      	ldr	r3, [r7, #4]
  4007c0:	6a1b      	ldr	r3, [r3, #32]
  4007c2:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  4007c4:	68fb      	ldr	r3, [r7, #12]
  4007c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4007ca:	2b00      	cmp	r3, #0
  4007cc:	d001      	beq.n	4007d2 <twi_master_write+0xaa>
			return TWI_RECEIVE_NACK;
  4007ce:	2305      	movs	r3, #5
  4007d0:	e011      	b.n	4007f6 <twi_master_write+0xce>
		}

		if (status & TWI_SR_TXRDY) {
  4007d2:	68fb      	ldr	r3, [r7, #12]
  4007d4:	f003 0304 	and.w	r3, r3, #4
  4007d8:	2b00      	cmp	r3, #0
  4007da:	d100      	bne.n	4007de <twi_master_write+0xb6>
		status = p_twi->TWI_SR;
  4007dc:	e7ef      	b.n	4007be <twi_master_write+0x96>
			break;
  4007de:	bf00      	nop
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  4007e0:	687b      	ldr	r3, [r7, #4]
  4007e2:	2202      	movs	r2, #2
  4007e4:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4007e6:	bf00      	nop
  4007e8:	687b      	ldr	r3, [r7, #4]
  4007ea:	6a1b      	ldr	r3, [r3, #32]
  4007ec:	f003 0301 	and.w	r3, r3, #1
  4007f0:	2b00      	cmp	r3, #0
  4007f2:	d0f9      	beq.n	4007e8 <twi_master_write+0xc0>
	}

	return TWI_SUCCESS;
  4007f4:	2300      	movs	r3, #0
}
  4007f6:	4618      	mov	r0, r3
  4007f8:	3718      	adds	r7, #24
  4007fa:	46bd      	mov	sp, r7
  4007fc:	bd80      	pop	{r7, pc}
  4007fe:	bf00      	nop
  400800:	004005c1 	.word	0x004005c1

00400804 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  400804:	b480      	push	{r7}
  400806:	b083      	sub	sp, #12
  400808:	af00      	add	r7, sp, #0
  40080a:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  40080c:	687b      	ldr	r3, [r7, #4]
  40080e:	2280      	movs	r2, #128	; 0x80
  400810:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  400812:	687b      	ldr	r3, [r7, #4]
  400814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  400816:	bf00      	nop
  400818:	370c      	adds	r7, #12
  40081a:	46bd      	mov	sp, r7
  40081c:	bc80      	pop	{r7}
  40081e:	4770      	bx	lr

00400820 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400820:	b480      	push	{r7}
  400822:	b089      	sub	sp, #36	; 0x24
  400824:	af00      	add	r7, sp, #0
  400826:	60f8      	str	r0, [r7, #12]
  400828:	60b9      	str	r1, [r7, #8]
  40082a:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40082c:	68bb      	ldr	r3, [r7, #8]
  40082e:	011a      	lsls	r2, r3, #4
  400830:	687b      	ldr	r3, [r7, #4]
  400832:	429a      	cmp	r2, r3
  400834:	d802      	bhi.n	40083c <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  400836:	2310      	movs	r3, #16
  400838:	61fb      	str	r3, [r7, #28]
  40083a:	e001      	b.n	400840 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  40083c:	2308      	movs	r3, #8
  40083e:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400840:	687b      	ldr	r3, [r7, #4]
  400842:	00da      	lsls	r2, r3, #3
  400844:	69fb      	ldr	r3, [r7, #28]
  400846:	68b9      	ldr	r1, [r7, #8]
  400848:	fb01 f303 	mul.w	r3, r1, r3
  40084c:	085b      	lsrs	r3, r3, #1
  40084e:	441a      	add	r2, r3
  400850:	69fb      	ldr	r3, [r7, #28]
  400852:	68b9      	ldr	r1, [r7, #8]
  400854:	fb01 f303 	mul.w	r3, r1, r3
  400858:	fbb2 f3f3 	udiv	r3, r2, r3
  40085c:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  40085e:	69bb      	ldr	r3, [r7, #24]
  400860:	08db      	lsrs	r3, r3, #3
  400862:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  400864:	69bb      	ldr	r3, [r7, #24]
  400866:	f003 0307 	and.w	r3, r3, #7
  40086a:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40086c:	697b      	ldr	r3, [r7, #20]
  40086e:	2b00      	cmp	r3, #0
  400870:	d003      	beq.n	40087a <usart_set_async_baudrate+0x5a>
  400872:	697b      	ldr	r3, [r7, #20]
  400874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400878:	d301      	bcc.n	40087e <usart_set_async_baudrate+0x5e>
		return 1;
  40087a:	2301      	movs	r3, #1
  40087c:	e00f      	b.n	40089e <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  40087e:	69fb      	ldr	r3, [r7, #28]
  400880:	2b08      	cmp	r3, #8
  400882:	d105      	bne.n	400890 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  400884:	68fb      	ldr	r3, [r7, #12]
  400886:	685b      	ldr	r3, [r3, #4]
  400888:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  40088c:	68fb      	ldr	r3, [r7, #12]
  40088e:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400890:	693b      	ldr	r3, [r7, #16]
  400892:	041a      	lsls	r2, r3, #16
  400894:	697b      	ldr	r3, [r7, #20]
  400896:	431a      	orrs	r2, r3
  400898:	68fb      	ldr	r3, [r7, #12]
  40089a:	621a      	str	r2, [r3, #32]

	return 0;
  40089c:	2300      	movs	r3, #0
}
  40089e:	4618      	mov	r0, r3
  4008a0:	3724      	adds	r7, #36	; 0x24
  4008a2:	46bd      	mov	sp, r7
  4008a4:	bc80      	pop	{r7}
  4008a6:	4770      	bx	lr

004008a8 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4008a8:	b580      	push	{r7, lr}
  4008aa:	b082      	sub	sp, #8
  4008ac:	af00      	add	r7, sp, #0
  4008ae:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4008b0:	6878      	ldr	r0, [r7, #4]
  4008b2:	4b0f      	ldr	r3, [pc, #60]	; (4008f0 <usart_reset+0x48>)
  4008b4:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4008b6:	687b      	ldr	r3, [r7, #4]
  4008b8:	2200      	movs	r2, #0
  4008ba:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4008bc:	687b      	ldr	r3, [r7, #4]
  4008be:	2200      	movs	r2, #0
  4008c0:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4008c2:	687b      	ldr	r3, [r7, #4]
  4008c4:	2200      	movs	r2, #0
  4008c6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4008c8:	6878      	ldr	r0, [r7, #4]
  4008ca:	4b0a      	ldr	r3, [pc, #40]	; (4008f4 <usart_reset+0x4c>)
  4008cc:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4008ce:	6878      	ldr	r0, [r7, #4]
  4008d0:	4b09      	ldr	r3, [pc, #36]	; (4008f8 <usart_reset+0x50>)
  4008d2:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4008d4:	6878      	ldr	r0, [r7, #4]
  4008d6:	4b09      	ldr	r3, [pc, #36]	; (4008fc <usart_reset+0x54>)
  4008d8:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4008da:	6878      	ldr	r0, [r7, #4]
  4008dc:	4b08      	ldr	r3, [pc, #32]	; (400900 <usart_reset+0x58>)
  4008de:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  4008e0:	6878      	ldr	r0, [r7, #4]
  4008e2:	4b08      	ldr	r3, [pc, #32]	; (400904 <usart_reset+0x5c>)
  4008e4:	4798      	blx	r3
#endif
}
  4008e6:	bf00      	nop
  4008e8:	3708      	adds	r7, #8
  4008ea:	46bd      	mov	sp, r7
  4008ec:	bd80      	pop	{r7, pc}
  4008ee:	bf00      	nop
  4008f0:	00400b59 	.word	0x00400b59
  4008f4:	004009e5 	.word	0x004009e5
  4008f8:	00400a15 	.word	0x00400a15
  4008fc:	00400a77 	.word	0x00400a77
  400900:	00400aab 	.word	0x00400aab
  400904:	00400a91 	.word	0x00400a91

00400908 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400908:	b580      	push	{r7, lr}
  40090a:	b084      	sub	sp, #16
  40090c:	af00      	add	r7, sp, #0
  40090e:	60f8      	str	r0, [r7, #12]
  400910:	60b9      	str	r1, [r7, #8]
  400912:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  400914:	68f8      	ldr	r0, [r7, #12]
  400916:	4b1a      	ldr	r3, [pc, #104]	; (400980 <usart_init_rs232+0x78>)
  400918:	4798      	blx	r3

	ul_reg_val = 0;
  40091a:	4b1a      	ldr	r3, [pc, #104]	; (400984 <usart_init_rs232+0x7c>)
  40091c:	2200      	movs	r2, #0
  40091e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400920:	68bb      	ldr	r3, [r7, #8]
  400922:	2b00      	cmp	r3, #0
  400924:	d009      	beq.n	40093a <usart_init_rs232+0x32>
  400926:	68bb      	ldr	r3, [r7, #8]
  400928:	681b      	ldr	r3, [r3, #0]
  40092a:	687a      	ldr	r2, [r7, #4]
  40092c:	4619      	mov	r1, r3
  40092e:	68f8      	ldr	r0, [r7, #12]
  400930:	4b15      	ldr	r3, [pc, #84]	; (400988 <usart_init_rs232+0x80>)
  400932:	4798      	blx	r3
  400934:	4603      	mov	r3, r0
  400936:	2b00      	cmp	r3, #0
  400938:	d001      	beq.n	40093e <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  40093a:	2301      	movs	r3, #1
  40093c:	e01b      	b.n	400976 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40093e:	68bb      	ldr	r3, [r7, #8]
  400940:	685a      	ldr	r2, [r3, #4]
  400942:	68bb      	ldr	r3, [r7, #8]
  400944:	689b      	ldr	r3, [r3, #8]
  400946:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400948:	68bb      	ldr	r3, [r7, #8]
  40094a:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40094c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40094e:	68bb      	ldr	r3, [r7, #8]
  400950:	68db      	ldr	r3, [r3, #12]
  400952:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400954:	4b0b      	ldr	r3, [pc, #44]	; (400984 <usart_init_rs232+0x7c>)
  400956:	681b      	ldr	r3, [r3, #0]
  400958:	4313      	orrs	r3, r2
  40095a:	4a0a      	ldr	r2, [pc, #40]	; (400984 <usart_init_rs232+0x7c>)
  40095c:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40095e:	4b09      	ldr	r3, [pc, #36]	; (400984 <usart_init_rs232+0x7c>)
  400960:	681b      	ldr	r3, [r3, #0]
  400962:	4a08      	ldr	r2, [pc, #32]	; (400984 <usart_init_rs232+0x7c>)
  400964:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  400966:	68fb      	ldr	r3, [r7, #12]
  400968:	685a      	ldr	r2, [r3, #4]
  40096a:	4b06      	ldr	r3, [pc, #24]	; (400984 <usart_init_rs232+0x7c>)
  40096c:	681b      	ldr	r3, [r3, #0]
  40096e:	431a      	orrs	r2, r3
  400970:	68fb      	ldr	r3, [r7, #12]
  400972:	605a      	str	r2, [r3, #4]

	return 0;
  400974:	2300      	movs	r3, #0
}
  400976:	4618      	mov	r0, r3
  400978:	3710      	adds	r7, #16
  40097a:	46bd      	mov	sp, r7
  40097c:	bd80      	pop	{r7, pc}
  40097e:	bf00      	nop
  400980:	004008a9 	.word	0x004008a9
  400984:	20000a50 	.word	0x20000a50
  400988:	00400821 	.word	0x00400821

0040098c <usart_init_hw_handshaking>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_hw_handshaking(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  40098c:	b580      	push	{r7, lr}
  40098e:	b084      	sub	sp, #16
  400990:	af00      	add	r7, sp, #0
  400992:	60f8      	str	r0, [r7, #12]
  400994:	60b9      	str	r1, [r7, #8]
  400996:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  400998:	687a      	ldr	r2, [r7, #4]
  40099a:	68b9      	ldr	r1, [r7, #8]
  40099c:	68f8      	ldr	r0, [r7, #12]
  40099e:	4b0a      	ldr	r3, [pc, #40]	; (4009c8 <usart_init_hw_handshaking+0x3c>)
  4009a0:	4798      	blx	r3
  4009a2:	4603      	mov	r3, r0
  4009a4:	2b00      	cmp	r3, #0
  4009a6:	d001      	beq.n	4009ac <usart_init_hw_handshaking+0x20>
		return 1;
  4009a8:	2301      	movs	r3, #1
  4009aa:	e008      	b.n	4009be <usart_init_hw_handshaking+0x32>
	}

	/* Set hardware handshaking mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  4009ac:	68fb      	ldr	r3, [r7, #12]
  4009ae:	685b      	ldr	r3, [r3, #4]
  4009b0:	f023 030f 	bic.w	r3, r3, #15
  4009b4:	f043 0202 	orr.w	r2, r3, #2
  4009b8:	68fb      	ldr	r3, [r7, #12]
  4009ba:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_HW_HANDSHAKING;

	return 0;
  4009bc:	2300      	movs	r3, #0
}
  4009be:	4618      	mov	r0, r3
  4009c0:	3710      	adds	r7, #16
  4009c2:	46bd      	mov	sp, r7
  4009c4:	bd80      	pop	{r7, pc}
  4009c6:	bf00      	nop
  4009c8:	00400909 	.word	0x00400909

004009cc <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4009cc:	b480      	push	{r7}
  4009ce:	b083      	sub	sp, #12
  4009d0:	af00      	add	r7, sp, #0
  4009d2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4009d4:	687b      	ldr	r3, [r7, #4]
  4009d6:	2240      	movs	r2, #64	; 0x40
  4009d8:	601a      	str	r2, [r3, #0]
}
  4009da:	bf00      	nop
  4009dc:	370c      	adds	r7, #12
  4009de:	46bd      	mov	sp, r7
  4009e0:	bc80      	pop	{r7}
  4009e2:	4770      	bx	lr

004009e4 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4009e4:	b480      	push	{r7}
  4009e6:	b083      	sub	sp, #12
  4009e8:	af00      	add	r7, sp, #0
  4009ea:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4009ec:	687b      	ldr	r3, [r7, #4]
  4009ee:	2288      	movs	r2, #136	; 0x88
  4009f0:	601a      	str	r2, [r3, #0]
}
  4009f2:	bf00      	nop
  4009f4:	370c      	adds	r7, #12
  4009f6:	46bd      	mov	sp, r7
  4009f8:	bc80      	pop	{r7}
  4009fa:	4770      	bx	lr

004009fc <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4009fc:	b480      	push	{r7}
  4009fe:	b083      	sub	sp, #12
  400a00:	af00      	add	r7, sp, #0
  400a02:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  400a04:	687b      	ldr	r3, [r7, #4]
  400a06:	2210      	movs	r2, #16
  400a08:	601a      	str	r2, [r3, #0]
}
  400a0a:	bf00      	nop
  400a0c:	370c      	adds	r7, #12
  400a0e:	46bd      	mov	sp, r7
  400a10:	bc80      	pop	{r7}
  400a12:	4770      	bx	lr

00400a14 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  400a14:	b480      	push	{r7}
  400a16:	b083      	sub	sp, #12
  400a18:	af00      	add	r7, sp, #0
  400a1a:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400a1c:	687b      	ldr	r3, [r7, #4]
  400a1e:	2224      	movs	r2, #36	; 0x24
  400a20:	601a      	str	r2, [r3, #0]
}
  400a22:	bf00      	nop
  400a24:	370c      	adds	r7, #12
  400a26:	46bd      	mov	sp, r7
  400a28:	bc80      	pop	{r7}
  400a2a:	4770      	bx	lr

00400a2c <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400a2c:	b480      	push	{r7}
  400a2e:	b083      	sub	sp, #12
  400a30:	af00      	add	r7, sp, #0
  400a32:	6078      	str	r0, [r7, #4]
  400a34:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  400a36:	687b      	ldr	r3, [r7, #4]
  400a38:	683a      	ldr	r2, [r7, #0]
  400a3a:	609a      	str	r2, [r3, #8]
}
  400a3c:	bf00      	nop
  400a3e:	370c      	adds	r7, #12
  400a40:	46bd      	mov	sp, r7
  400a42:	bc80      	pop	{r7}
  400a44:	4770      	bx	lr

00400a46 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400a46:	b480      	push	{r7}
  400a48:	b083      	sub	sp, #12
  400a4a:	af00      	add	r7, sp, #0
  400a4c:	6078      	str	r0, [r7, #4]
  400a4e:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  400a50:	687b      	ldr	r3, [r7, #4]
  400a52:	683a      	ldr	r2, [r7, #0]
  400a54:	60da      	str	r2, [r3, #12]
}
  400a56:	bf00      	nop
  400a58:	370c      	adds	r7, #12
  400a5a:	46bd      	mov	sp, r7
  400a5c:	bc80      	pop	{r7}
  400a5e:	4770      	bx	lr

00400a60 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  400a60:	b480      	push	{r7}
  400a62:	b083      	sub	sp, #12
  400a64:	af00      	add	r7, sp, #0
  400a66:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  400a68:	687b      	ldr	r3, [r7, #4]
  400a6a:	695b      	ldr	r3, [r3, #20]
}
  400a6c:	4618      	mov	r0, r3
  400a6e:	370c      	adds	r7, #12
  400a70:	46bd      	mov	sp, r7
  400a72:	bc80      	pop	{r7}
  400a74:	4770      	bx	lr

00400a76 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  400a76:	b480      	push	{r7}
  400a78:	b083      	sub	sp, #12
  400a7a:	af00      	add	r7, sp, #0
  400a7c:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  400a7e:	687b      	ldr	r3, [r7, #4]
  400a80:	f44f 7280 	mov.w	r2, #256	; 0x100
  400a84:	601a      	str	r2, [r3, #0]
}
  400a86:	bf00      	nop
  400a88:	370c      	adds	r7, #12
  400a8a:	46bd      	mov	sp, r7
  400a8c:	bc80      	pop	{r7}
  400a8e:	4770      	bx	lr

00400a90 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  400a90:	b480      	push	{r7}
  400a92:	b083      	sub	sp, #12
  400a94:	af00      	add	r7, sp, #0
  400a96:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  400a98:	687b      	ldr	r3, [r7, #4]
  400a9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  400a9e:	601a      	str	r2, [r3, #0]
}
  400aa0:	bf00      	nop
  400aa2:	370c      	adds	r7, #12
  400aa4:	46bd      	mov	sp, r7
  400aa6:	bc80      	pop	{r7}
  400aa8:	4770      	bx	lr

00400aaa <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  400aaa:	b480      	push	{r7}
  400aac:	b083      	sub	sp, #12
  400aae:	af00      	add	r7, sp, #0
  400ab0:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  400ab2:	687b      	ldr	r3, [r7, #4]
  400ab4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400ab8:	601a      	str	r2, [r3, #0]
}
  400aba:	bf00      	nop
  400abc:	370c      	adds	r7, #12
  400abe:	46bd      	mov	sp, r7
  400ac0:	bc80      	pop	{r7}
  400ac2:	4770      	bx	lr

00400ac4 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  400ac4:	b480      	push	{r7}
  400ac6:	b083      	sub	sp, #12
  400ac8:	af00      	add	r7, sp, #0
  400aca:	6078      	str	r0, [r7, #4]
  400acc:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400ace:	bf00      	nop
  400ad0:	687b      	ldr	r3, [r7, #4]
  400ad2:	695b      	ldr	r3, [r3, #20]
  400ad4:	f003 0302 	and.w	r3, r3, #2
  400ad8:	2b00      	cmp	r3, #0
  400ada:	d0f9      	beq.n	400ad0 <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400adc:	683b      	ldr	r3, [r7, #0]
  400ade:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400ae2:	687b      	ldr	r3, [r7, #4]
  400ae4:	61da      	str	r2, [r3, #28]

	return 0;
  400ae6:	2300      	movs	r3, #0
}
  400ae8:	4618      	mov	r0, r3
  400aea:	370c      	adds	r7, #12
  400aec:	46bd      	mov	sp, r7
  400aee:	bc80      	pop	{r7}
  400af0:	4770      	bx	lr
	...

00400af4 <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  400af4:	b580      	push	{r7, lr}
  400af6:	b082      	sub	sp, #8
  400af8:	af00      	add	r7, sp, #0
  400afa:	6078      	str	r0, [r7, #4]
  400afc:	6039      	str	r1, [r7, #0]
	while (*string != '\0') {
  400afe:	e007      	b.n	400b10 <usart_write_line+0x1c>
		usart_putchar(p_usart, *string++);
  400b00:	683b      	ldr	r3, [r7, #0]
  400b02:	1c5a      	adds	r2, r3, #1
  400b04:	603a      	str	r2, [r7, #0]
  400b06:	781b      	ldrb	r3, [r3, #0]
  400b08:	4619      	mov	r1, r3
  400b0a:	6878      	ldr	r0, [r7, #4]
  400b0c:	4b04      	ldr	r3, [pc, #16]	; (400b20 <usart_write_line+0x2c>)
  400b0e:	4798      	blx	r3
	while (*string != '\0') {
  400b10:	683b      	ldr	r3, [r7, #0]
  400b12:	781b      	ldrb	r3, [r3, #0]
  400b14:	2b00      	cmp	r3, #0
  400b16:	d1f3      	bne.n	400b00 <usart_write_line+0xc>
	}
}
  400b18:	bf00      	nop
  400b1a:	3708      	adds	r7, #8
  400b1c:	46bd      	mov	sp, r7
  400b1e:	bd80      	pop	{r7, pc}
  400b20:	00400ac5 	.word	0x00400ac5

00400b24 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  400b24:	b480      	push	{r7}
  400b26:	b083      	sub	sp, #12
  400b28:	af00      	add	r7, sp, #0
  400b2a:	6078      	str	r0, [r7, #4]
  400b2c:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400b2e:	687b      	ldr	r3, [r7, #4]
  400b30:	695b      	ldr	r3, [r3, #20]
  400b32:	f003 0301 	and.w	r3, r3, #1
  400b36:	2b00      	cmp	r3, #0
  400b38:	d101      	bne.n	400b3e <usart_read+0x1a>
		return 1;
  400b3a:	2301      	movs	r3, #1
  400b3c:	e006      	b.n	400b4c <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400b3e:	687b      	ldr	r3, [r7, #4]
  400b40:	699b      	ldr	r3, [r3, #24]
  400b42:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400b46:	683b      	ldr	r3, [r7, #0]
  400b48:	601a      	str	r2, [r3, #0]

	return 0;
  400b4a:	2300      	movs	r3, #0
}
  400b4c:	4618      	mov	r0, r3
  400b4e:	370c      	adds	r7, #12
  400b50:	46bd      	mov	sp, r7
  400b52:	bc80      	pop	{r7}
  400b54:	4770      	bx	lr
	...

00400b58 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  400b58:	b480      	push	{r7}
  400b5a:	b083      	sub	sp, #12
  400b5c:	af00      	add	r7, sp, #0
  400b5e:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400b60:	687b      	ldr	r3, [r7, #4]
  400b62:	4a04      	ldr	r2, [pc, #16]	; (400b74 <usart_disable_writeprotect+0x1c>)
  400b64:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400b68:	bf00      	nop
  400b6a:	370c      	adds	r7, #12
  400b6c:	46bd      	mov	sp, r7
  400b6e:	bc80      	pop	{r7}
  400b70:	4770      	bx	lr
  400b72:	bf00      	nop
  400b74:	55534100 	.word	0x55534100

00400b78 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  400b78:	b480      	push	{r7}
  400b7a:	b083      	sub	sp, #12
  400b7c:	af00      	add	r7, sp, #0
  400b7e:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400b80:	687b      	ldr	r3, [r7, #4]
  400b82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400b86:	605a      	str	r2, [r3, #4]

}
  400b88:	bf00      	nop
  400b8a:	370c      	adds	r7, #12
  400b8c:	46bd      	mov	sp, r7
  400b8e:	bc80      	pop	{r7}
  400b90:	4770      	bx	lr
	...

00400b94 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  400b94:	b580      	push	{r7, lr}
  400b96:	b082      	sub	sp, #8
  400b98:	af00      	add	r7, sp, #0
  400b9a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400b9c:	687b      	ldr	r3, [r7, #4]
  400b9e:	2b07      	cmp	r3, #7
  400ba0:	d831      	bhi.n	400c06 <osc_enable+0x72>
  400ba2:	a201      	add	r2, pc, #4	; (adr r2, 400ba8 <osc_enable+0x14>)
  400ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400ba8:	00400c05 	.word	0x00400c05
  400bac:	00400bc9 	.word	0x00400bc9
  400bb0:	00400bd1 	.word	0x00400bd1
  400bb4:	00400bd9 	.word	0x00400bd9
  400bb8:	00400be1 	.word	0x00400be1
  400bbc:	00400be9 	.word	0x00400be9
  400bc0:	00400bf1 	.word	0x00400bf1
  400bc4:	00400bfb 	.word	0x00400bfb
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400bc8:	2000      	movs	r0, #0
  400bca:	4b11      	ldr	r3, [pc, #68]	; (400c10 <osc_enable+0x7c>)
  400bcc:	4798      	blx	r3
		break;
  400bce:	e01a      	b.n	400c06 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400bd0:	2001      	movs	r0, #1
  400bd2:	4b0f      	ldr	r3, [pc, #60]	; (400c10 <osc_enable+0x7c>)
  400bd4:	4798      	blx	r3
		break;
  400bd6:	e016      	b.n	400c06 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400bd8:	2000      	movs	r0, #0
  400bda:	4b0e      	ldr	r3, [pc, #56]	; (400c14 <osc_enable+0x80>)
  400bdc:	4798      	blx	r3
		break;
  400bde:	e012      	b.n	400c06 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400be0:	2010      	movs	r0, #16
  400be2:	4b0c      	ldr	r3, [pc, #48]	; (400c14 <osc_enable+0x80>)
  400be4:	4798      	blx	r3
		break;
  400be6:	e00e      	b.n	400c06 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400be8:	2020      	movs	r0, #32
  400bea:	4b0a      	ldr	r3, [pc, #40]	; (400c14 <osc_enable+0x80>)
  400bec:	4798      	blx	r3
		break;
  400bee:	e00a      	b.n	400c06 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400bf0:	213e      	movs	r1, #62	; 0x3e
  400bf2:	2000      	movs	r0, #0
  400bf4:	4b08      	ldr	r3, [pc, #32]	; (400c18 <osc_enable+0x84>)
  400bf6:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400bf8:	e005      	b.n	400c06 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400bfa:	213e      	movs	r1, #62	; 0x3e
  400bfc:	2001      	movs	r0, #1
  400bfe:	4b06      	ldr	r3, [pc, #24]	; (400c18 <osc_enable+0x84>)
  400c00:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400c02:	e000      	b.n	400c06 <osc_enable+0x72>
		break;
  400c04:	bf00      	nop
	}
}
  400c06:	bf00      	nop
  400c08:	3708      	adds	r7, #8
  400c0a:	46bd      	mov	sp, r7
  400c0c:	bd80      	pop	{r7, pc}
  400c0e:	bf00      	nop
  400c10:	004014b9 	.word	0x004014b9
  400c14:	00401525 	.word	0x00401525
  400c18:	00401595 	.word	0x00401595

00400c1c <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400c1c:	b580      	push	{r7, lr}
  400c1e:	b082      	sub	sp, #8
  400c20:	af00      	add	r7, sp, #0
  400c22:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400c24:	687b      	ldr	r3, [r7, #4]
  400c26:	2b07      	cmp	r3, #7
  400c28:	d826      	bhi.n	400c78 <osc_is_ready+0x5c>
  400c2a:	a201      	add	r2, pc, #4	; (adr r2, 400c30 <osc_is_ready+0x14>)
  400c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400c30:	00400c51 	.word	0x00400c51
  400c34:	00400c55 	.word	0x00400c55
  400c38:	00400c55 	.word	0x00400c55
  400c3c:	00400c67 	.word	0x00400c67
  400c40:	00400c67 	.word	0x00400c67
  400c44:	00400c67 	.word	0x00400c67
  400c48:	00400c67 	.word	0x00400c67
  400c4c:	00400c67 	.word	0x00400c67
	case OSC_SLCK_32K_RC:
		return 1;
  400c50:	2301      	movs	r3, #1
  400c52:	e012      	b.n	400c7a <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400c54:	4b0b      	ldr	r3, [pc, #44]	; (400c84 <osc_is_ready+0x68>)
  400c56:	4798      	blx	r3
  400c58:	4603      	mov	r3, r0
  400c5a:	2b00      	cmp	r3, #0
  400c5c:	bf14      	ite	ne
  400c5e:	2301      	movne	r3, #1
  400c60:	2300      	moveq	r3, #0
  400c62:	b2db      	uxtb	r3, r3
  400c64:	e009      	b.n	400c7a <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400c66:	4b08      	ldr	r3, [pc, #32]	; (400c88 <osc_is_ready+0x6c>)
  400c68:	4798      	blx	r3
  400c6a:	4603      	mov	r3, r0
  400c6c:	2b00      	cmp	r3, #0
  400c6e:	bf14      	ite	ne
  400c70:	2301      	movne	r3, #1
  400c72:	2300      	moveq	r3, #0
  400c74:	b2db      	uxtb	r3, r3
  400c76:	e000      	b.n	400c7a <osc_is_ready+0x5e>
	}

	return 0;
  400c78:	2300      	movs	r3, #0
}
  400c7a:	4618      	mov	r0, r3
  400c7c:	3708      	adds	r7, #8
  400c7e:	46bd      	mov	sp, r7
  400c80:	bd80      	pop	{r7, pc}
  400c82:	bf00      	nop
  400c84:	004014f1 	.word	0x004014f1
  400c88:	0040160d 	.word	0x0040160d

00400c8c <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400c8c:	b480      	push	{r7}
  400c8e:	b083      	sub	sp, #12
  400c90:	af00      	add	r7, sp, #0
  400c92:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400c94:	687b      	ldr	r3, [r7, #4]
  400c96:	2b07      	cmp	r3, #7
  400c98:	d825      	bhi.n	400ce6 <osc_get_rate+0x5a>
  400c9a:	a201      	add	r2, pc, #4	; (adr r2, 400ca0 <osc_get_rate+0x14>)
  400c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400ca0:	00400cc1 	.word	0x00400cc1
  400ca4:	00400cc7 	.word	0x00400cc7
  400ca8:	00400ccd 	.word	0x00400ccd
  400cac:	00400cd3 	.word	0x00400cd3
  400cb0:	00400cd7 	.word	0x00400cd7
  400cb4:	00400cdb 	.word	0x00400cdb
  400cb8:	00400cdf 	.word	0x00400cdf
  400cbc:	00400ce3 	.word	0x00400ce3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400cc0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400cc4:	e010      	b.n	400ce8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400cca:	e00d      	b.n	400ce8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400ccc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400cd0:	e00a      	b.n	400ce8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400cd2:	4b08      	ldr	r3, [pc, #32]	; (400cf4 <osc_get_rate+0x68>)
  400cd4:	e008      	b.n	400ce8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400cd6:	4b08      	ldr	r3, [pc, #32]	; (400cf8 <osc_get_rate+0x6c>)
  400cd8:	e006      	b.n	400ce8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400cda:	4b08      	ldr	r3, [pc, #32]	; (400cfc <osc_get_rate+0x70>)
  400cdc:	e004      	b.n	400ce8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400cde:	4b07      	ldr	r3, [pc, #28]	; (400cfc <osc_get_rate+0x70>)
  400ce0:	e002      	b.n	400ce8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400ce2:	4b06      	ldr	r3, [pc, #24]	; (400cfc <osc_get_rate+0x70>)
  400ce4:	e000      	b.n	400ce8 <osc_get_rate+0x5c>
	}

	return 0;
  400ce6:	2300      	movs	r3, #0
}
  400ce8:	4618      	mov	r0, r3
  400cea:	370c      	adds	r7, #12
  400cec:	46bd      	mov	sp, r7
  400cee:	bc80      	pop	{r7}
  400cf0:	4770      	bx	lr
  400cf2:	bf00      	nop
  400cf4:	003d0900 	.word	0x003d0900
  400cf8:	007a1200 	.word	0x007a1200
  400cfc:	00b71b00 	.word	0x00b71b00

00400d00 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400d00:	b580      	push	{r7, lr}
  400d02:	b082      	sub	sp, #8
  400d04:	af00      	add	r7, sp, #0
  400d06:	4603      	mov	r3, r0
  400d08:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400d0a:	bf00      	nop
  400d0c:	79fb      	ldrb	r3, [r7, #7]
  400d0e:	4618      	mov	r0, r3
  400d10:	4b05      	ldr	r3, [pc, #20]	; (400d28 <osc_wait_ready+0x28>)
  400d12:	4798      	blx	r3
  400d14:	4603      	mov	r3, r0
  400d16:	f083 0301 	eor.w	r3, r3, #1
  400d1a:	b2db      	uxtb	r3, r3
  400d1c:	2b00      	cmp	r3, #0
  400d1e:	d1f5      	bne.n	400d0c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400d20:	bf00      	nop
  400d22:	3708      	adds	r7, #8
  400d24:	46bd      	mov	sp, r7
  400d26:	bd80      	pop	{r7, pc}
  400d28:	00400c1d 	.word	0x00400c1d

00400d2c <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400d2c:	b580      	push	{r7, lr}
  400d2e:	b086      	sub	sp, #24
  400d30:	af00      	add	r7, sp, #0
  400d32:	60f8      	str	r0, [r7, #12]
  400d34:	607a      	str	r2, [r7, #4]
  400d36:	603b      	str	r3, [r7, #0]
  400d38:	460b      	mov	r3, r1
  400d3a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400d3c:	7afb      	ldrb	r3, [r7, #11]
  400d3e:	4618      	mov	r0, r3
  400d40:	4b0d      	ldr	r3, [pc, #52]	; (400d78 <pll_config_init+0x4c>)
  400d42:	4798      	blx	r3
  400d44:	4602      	mov	r2, r0
  400d46:	687b      	ldr	r3, [r7, #4]
  400d48:	fbb2 f3f3 	udiv	r3, r2, r3
  400d4c:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  400d4e:	697b      	ldr	r3, [r7, #20]
  400d50:	683a      	ldr	r2, [r7, #0]
  400d52:	fb02 f303 	mul.w	r3, r2, r3
  400d56:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400d58:	683b      	ldr	r3, [r7, #0]
  400d5a:	3b01      	subs	r3, #1
  400d5c:	041a      	lsls	r2, r3, #16
  400d5e:	4b07      	ldr	r3, [pc, #28]	; (400d7c <pll_config_init+0x50>)
  400d60:	4013      	ands	r3, r2
  400d62:	687a      	ldr	r2, [r7, #4]
  400d64:	b2d2      	uxtb	r2, r2
  400d66:	4313      	orrs	r3, r2
  400d68:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400d6c:	68fb      	ldr	r3, [r7, #12]
  400d6e:	601a      	str	r2, [r3, #0]
}
  400d70:	bf00      	nop
  400d72:	3718      	adds	r7, #24
  400d74:	46bd      	mov	sp, r7
  400d76:	bd80      	pop	{r7, pc}
  400d78:	00400c8d 	.word	0x00400c8d
  400d7c:	07ff0000 	.word	0x07ff0000

00400d80 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400d80:	b580      	push	{r7, lr}
  400d82:	b082      	sub	sp, #8
  400d84:	af00      	add	r7, sp, #0
  400d86:	6078      	str	r0, [r7, #4]
  400d88:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400d8a:	683b      	ldr	r3, [r7, #0]
  400d8c:	2b00      	cmp	r3, #0
  400d8e:	d108      	bne.n	400da2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  400d90:	4b09      	ldr	r3, [pc, #36]	; (400db8 <pll_enable+0x38>)
  400d92:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400d94:	4a09      	ldr	r2, [pc, #36]	; (400dbc <pll_enable+0x3c>)
  400d96:	687b      	ldr	r3, [r7, #4]
  400d98:	681b      	ldr	r3, [r3, #0]
  400d9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400d9e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  400da0:	e005      	b.n	400dae <pll_enable+0x2e>
		pmc_disable_pllbck();
  400da2:	4b07      	ldr	r3, [pc, #28]	; (400dc0 <pll_enable+0x40>)
  400da4:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400da6:	4a05      	ldr	r2, [pc, #20]	; (400dbc <pll_enable+0x3c>)
  400da8:	687b      	ldr	r3, [r7, #4]
  400daa:	681b      	ldr	r3, [r3, #0]
  400dac:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  400dae:	bf00      	nop
  400db0:	3708      	adds	r7, #8
  400db2:	46bd      	mov	sp, r7
  400db4:	bd80      	pop	{r7, pc}
  400db6:	bf00      	nop
  400db8:	00401625 	.word	0x00401625
  400dbc:	400e0400 	.word	0x400e0400
  400dc0:	004016a5 	.word	0x004016a5

00400dc4 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400dc4:	b580      	push	{r7, lr}
  400dc6:	b082      	sub	sp, #8
  400dc8:	af00      	add	r7, sp, #0
  400dca:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400dcc:	687b      	ldr	r3, [r7, #4]
  400dce:	2b00      	cmp	r3, #0
  400dd0:	d103      	bne.n	400dda <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  400dd2:	4b05      	ldr	r3, [pc, #20]	; (400de8 <pll_is_locked+0x24>)
  400dd4:	4798      	blx	r3
  400dd6:	4603      	mov	r3, r0
  400dd8:	e002      	b.n	400de0 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  400dda:	4b04      	ldr	r3, [pc, #16]	; (400dec <pll_is_locked+0x28>)
  400ddc:	4798      	blx	r3
  400dde:	4603      	mov	r3, r0
	}
}
  400de0:	4618      	mov	r0, r3
  400de2:	3708      	adds	r7, #8
  400de4:	46bd      	mov	sp, r7
  400de6:	bd80      	pop	{r7, pc}
  400de8:	0040163d 	.word	0x0040163d
  400dec:	004016bd 	.word	0x004016bd

00400df0 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400df0:	b580      	push	{r7, lr}
  400df2:	b082      	sub	sp, #8
  400df4:	af00      	add	r7, sp, #0
  400df6:	4603      	mov	r3, r0
  400df8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400dfa:	79fb      	ldrb	r3, [r7, #7]
  400dfc:	3b03      	subs	r3, #3
  400dfe:	2b04      	cmp	r3, #4
  400e00:	d808      	bhi.n	400e14 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400e02:	79fb      	ldrb	r3, [r7, #7]
  400e04:	4618      	mov	r0, r3
  400e06:	4b06      	ldr	r3, [pc, #24]	; (400e20 <pll_enable_source+0x30>)
  400e08:	4798      	blx	r3
		osc_wait_ready(e_src);
  400e0a:	79fb      	ldrb	r3, [r7, #7]
  400e0c:	4618      	mov	r0, r3
  400e0e:	4b05      	ldr	r3, [pc, #20]	; (400e24 <pll_enable_source+0x34>)
  400e10:	4798      	blx	r3
		break;
  400e12:	e000      	b.n	400e16 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400e14:	bf00      	nop
	}
}
  400e16:	bf00      	nop
  400e18:	3708      	adds	r7, #8
  400e1a:	46bd      	mov	sp, r7
  400e1c:	bd80      	pop	{r7, pc}
  400e1e:	bf00      	nop
  400e20:	00400b95 	.word	0x00400b95
  400e24:	00400d01 	.word	0x00400d01

00400e28 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400e28:	b580      	push	{r7, lr}
  400e2a:	b082      	sub	sp, #8
  400e2c:	af00      	add	r7, sp, #0
  400e2e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400e30:	bf00      	nop
  400e32:	6878      	ldr	r0, [r7, #4]
  400e34:	4b04      	ldr	r3, [pc, #16]	; (400e48 <pll_wait_for_lock+0x20>)
  400e36:	4798      	blx	r3
  400e38:	4603      	mov	r3, r0
  400e3a:	2b00      	cmp	r3, #0
  400e3c:	d0f9      	beq.n	400e32 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400e3e:	2300      	movs	r3, #0
}
  400e40:	4618      	mov	r0, r3
  400e42:	3708      	adds	r7, #8
  400e44:	46bd      	mov	sp, r7
  400e46:	bd80      	pop	{r7, pc}
  400e48:	00400dc5 	.word	0x00400dc5

00400e4c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400e4c:	b580      	push	{r7, lr}
  400e4e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400e50:	2006      	movs	r0, #6
  400e52:	4b04      	ldr	r3, [pc, #16]	; (400e64 <sysclk_get_main_hz+0x18>)
  400e54:	4798      	blx	r3
  400e56:	4602      	mov	r2, r0
  400e58:	4613      	mov	r3, r2
  400e5a:	009b      	lsls	r3, r3, #2
  400e5c:	4413      	add	r3, r2
  400e5e:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400e60:	4618      	mov	r0, r3
  400e62:	bd80      	pop	{r7, pc}
  400e64:	00400c8d 	.word	0x00400c8d

00400e68 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400e68:	b580      	push	{r7, lr}
  400e6a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400e6c:	4b02      	ldr	r3, [pc, #8]	; (400e78 <sysclk_get_cpu_hz+0x10>)
  400e6e:	4798      	blx	r3
  400e70:	4603      	mov	r3, r0
  400e72:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400e74:	4618      	mov	r0, r3
  400e76:	bd80      	pop	{r7, pc}
  400e78:	00400e4d 	.word	0x00400e4d

00400e7c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400e7c:	b590      	push	{r4, r7, lr}
  400e7e:	b083      	sub	sp, #12
  400e80:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400e82:	4811      	ldr	r0, [pc, #68]	; (400ec8 <sysclk_init+0x4c>)
  400e84:	4b11      	ldr	r3, [pc, #68]	; (400ecc <sysclk_init+0x50>)
  400e86:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  400e88:	2006      	movs	r0, #6
  400e8a:	4b11      	ldr	r3, [pc, #68]	; (400ed0 <sysclk_init+0x54>)
  400e8c:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  400e8e:	1d38      	adds	r0, r7, #4
  400e90:	2314      	movs	r3, #20
  400e92:	2201      	movs	r2, #1
  400e94:	2106      	movs	r1, #6
  400e96:	4c0f      	ldr	r4, [pc, #60]	; (400ed4 <sysclk_init+0x58>)
  400e98:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  400e9a:	1d3b      	adds	r3, r7, #4
  400e9c:	2100      	movs	r1, #0
  400e9e:	4618      	mov	r0, r3
  400ea0:	4b0d      	ldr	r3, [pc, #52]	; (400ed8 <sysclk_init+0x5c>)
  400ea2:	4798      	blx	r3
		pll_wait_for_lock(0);
  400ea4:	2000      	movs	r0, #0
  400ea6:	4b0d      	ldr	r3, [pc, #52]	; (400edc <sysclk_init+0x60>)
  400ea8:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400eaa:	2010      	movs	r0, #16
  400eac:	4b0c      	ldr	r3, [pc, #48]	; (400ee0 <sysclk_init+0x64>)
  400eae:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400eb0:	4b0c      	ldr	r3, [pc, #48]	; (400ee4 <sysclk_init+0x68>)
  400eb2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400eb4:	4b0c      	ldr	r3, [pc, #48]	; (400ee8 <sysclk_init+0x6c>)
  400eb6:	4798      	blx	r3
  400eb8:	4603      	mov	r3, r0
  400eba:	4618      	mov	r0, r3
  400ebc:	4b03      	ldr	r3, [pc, #12]	; (400ecc <sysclk_init+0x50>)
  400ebe:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400ec0:	bf00      	nop
  400ec2:	370c      	adds	r7, #12
  400ec4:	46bd      	mov	sp, r7
  400ec6:	bd90      	pop	{r4, r7, pc}
  400ec8:	07270e00 	.word	0x07270e00
  400ecc:	00402e9d 	.word	0x00402e9d
  400ed0:	00400df1 	.word	0x00400df1
  400ed4:	00400d2d 	.word	0x00400d2d
  400ed8:	00400d81 	.word	0x00400d81
  400edc:	00400e29 	.word	0x00400e29
  400ee0:	00401439 	.word	0x00401439
  400ee4:	00402d05 	.word	0x00402d05
  400ee8:	00400e69 	.word	0x00400e69

00400eec <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400eec:	b480      	push	{r7}
  400eee:	b085      	sub	sp, #20
  400ef0:	af00      	add	r7, sp, #0
  400ef2:	60f8      	str	r0, [r7, #12]
  400ef4:	60b9      	str	r1, [r7, #8]
  400ef6:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400ef8:	687b      	ldr	r3, [r7, #4]
  400efa:	2b00      	cmp	r3, #0
  400efc:	d003      	beq.n	400f06 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  400efe:	68fb      	ldr	r3, [r7, #12]
  400f00:	68ba      	ldr	r2, [r7, #8]
  400f02:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400f04:	e002      	b.n	400f0c <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  400f06:	68fb      	ldr	r3, [r7, #12]
  400f08:	68ba      	ldr	r2, [r7, #8]
  400f0a:	661a      	str	r2, [r3, #96]	; 0x60
}
  400f0c:	bf00      	nop
  400f0e:	3714      	adds	r7, #20
  400f10:	46bd      	mov	sp, r7
  400f12:	bc80      	pop	{r7}
  400f14:	4770      	bx	lr

00400f16 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  400f16:	b480      	push	{r7}
  400f18:	b085      	sub	sp, #20
  400f1a:	af00      	add	r7, sp, #0
  400f1c:	60f8      	str	r0, [r7, #12]
  400f1e:	60b9      	str	r1, [r7, #8]
  400f20:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400f22:	68fb      	ldr	r3, [r7, #12]
  400f24:	68ba      	ldr	r2, [r7, #8]
  400f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400f2a:	687b      	ldr	r3, [r7, #4]
  400f2c:	005b      	lsls	r3, r3, #1
  400f2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400f32:	fbb2 f3f3 	udiv	r3, r2, r3
  400f36:	3b01      	subs	r3, #1
  400f38:	f3c3 020d 	ubfx	r2, r3, #0, #14
  400f3c:	68fb      	ldr	r3, [r7, #12]
  400f3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  400f42:	bf00      	nop
  400f44:	3714      	adds	r7, #20
  400f46:	46bd      	mov	sp, r7
  400f48:	bc80      	pop	{r7}
  400f4a:	4770      	bx	lr

00400f4c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400f4c:	b480      	push	{r7}
  400f4e:	b087      	sub	sp, #28
  400f50:	af00      	add	r7, sp, #0
  400f52:	60f8      	str	r0, [r7, #12]
  400f54:	60b9      	str	r1, [r7, #8]
  400f56:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400f58:	68fb      	ldr	r3, [r7, #12]
  400f5a:	687a      	ldr	r2, [r7, #4]
  400f5c:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400f5e:	68bb      	ldr	r3, [r7, #8]
  400f60:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400f64:	d04a      	beq.n	400ffc <pio_set_peripheral+0xb0>
  400f66:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400f6a:	d808      	bhi.n	400f7e <pio_set_peripheral+0x32>
  400f6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400f70:	d016      	beq.n	400fa0 <pio_set_peripheral+0x54>
  400f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400f76:	d02c      	beq.n	400fd2 <pio_set_peripheral+0x86>
  400f78:	2b00      	cmp	r3, #0
  400f7a:	d069      	beq.n	401050 <pio_set_peripheral+0x104>
  400f7c:	e064      	b.n	401048 <pio_set_peripheral+0xfc>
  400f7e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400f82:	d065      	beq.n	401050 <pio_set_peripheral+0x104>
  400f84:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400f88:	d803      	bhi.n	400f92 <pio_set_peripheral+0x46>
  400f8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400f8e:	d04a      	beq.n	401026 <pio_set_peripheral+0xda>
  400f90:	e05a      	b.n	401048 <pio_set_peripheral+0xfc>
  400f92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400f96:	d05b      	beq.n	401050 <pio_set_peripheral+0x104>
  400f98:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400f9c:	d058      	beq.n	401050 <pio_set_peripheral+0x104>
  400f9e:	e053      	b.n	401048 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400fa0:	68fb      	ldr	r3, [r7, #12]
  400fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400fa4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400fa6:	68fb      	ldr	r3, [r7, #12]
  400fa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400faa:	687b      	ldr	r3, [r7, #4]
  400fac:	43d9      	mvns	r1, r3
  400fae:	697b      	ldr	r3, [r7, #20]
  400fb0:	400b      	ands	r3, r1
  400fb2:	401a      	ands	r2, r3
  400fb4:	68fb      	ldr	r3, [r7, #12]
  400fb6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400fb8:	68fb      	ldr	r3, [r7, #12]
  400fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400fbc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400fbe:	68fb      	ldr	r3, [r7, #12]
  400fc0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400fc2:	687b      	ldr	r3, [r7, #4]
  400fc4:	43d9      	mvns	r1, r3
  400fc6:	697b      	ldr	r3, [r7, #20]
  400fc8:	400b      	ands	r3, r1
  400fca:	401a      	ands	r2, r3
  400fcc:	68fb      	ldr	r3, [r7, #12]
  400fce:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400fd0:	e03a      	b.n	401048 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400fd2:	68fb      	ldr	r3, [r7, #12]
  400fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400fd6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400fd8:	687a      	ldr	r2, [r7, #4]
  400fda:	697b      	ldr	r3, [r7, #20]
  400fdc:	431a      	orrs	r2, r3
  400fde:	68fb      	ldr	r3, [r7, #12]
  400fe0:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400fe2:	68fb      	ldr	r3, [r7, #12]
  400fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400fe6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400fe8:	68fb      	ldr	r3, [r7, #12]
  400fea:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400fec:	687b      	ldr	r3, [r7, #4]
  400fee:	43d9      	mvns	r1, r3
  400ff0:	697b      	ldr	r3, [r7, #20]
  400ff2:	400b      	ands	r3, r1
  400ff4:	401a      	ands	r2, r3
  400ff6:	68fb      	ldr	r3, [r7, #12]
  400ff8:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400ffa:	e025      	b.n	401048 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ffc:	68fb      	ldr	r3, [r7, #12]
  400ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401000:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401002:	68fb      	ldr	r3, [r7, #12]
  401004:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401006:	687b      	ldr	r3, [r7, #4]
  401008:	43d9      	mvns	r1, r3
  40100a:	697b      	ldr	r3, [r7, #20]
  40100c:	400b      	ands	r3, r1
  40100e:	401a      	ands	r2, r3
  401010:	68fb      	ldr	r3, [r7, #12]
  401012:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401014:	68fb      	ldr	r3, [r7, #12]
  401016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401018:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40101a:	687a      	ldr	r2, [r7, #4]
  40101c:	697b      	ldr	r3, [r7, #20]
  40101e:	431a      	orrs	r2, r3
  401020:	68fb      	ldr	r3, [r7, #12]
  401022:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401024:	e010      	b.n	401048 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401026:	68fb      	ldr	r3, [r7, #12]
  401028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40102a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40102c:	687a      	ldr	r2, [r7, #4]
  40102e:	697b      	ldr	r3, [r7, #20]
  401030:	431a      	orrs	r2, r3
  401032:	68fb      	ldr	r3, [r7, #12]
  401034:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401036:	68fb      	ldr	r3, [r7, #12]
  401038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40103a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40103c:	687a      	ldr	r2, [r7, #4]
  40103e:	697b      	ldr	r3, [r7, #20]
  401040:	431a      	orrs	r2, r3
  401042:	68fb      	ldr	r3, [r7, #12]
  401044:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401046:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401048:	68fb      	ldr	r3, [r7, #12]
  40104a:	687a      	ldr	r2, [r7, #4]
  40104c:	605a      	str	r2, [r3, #4]
  40104e:	e000      	b.n	401052 <pio_set_peripheral+0x106>
		return;
  401050:	bf00      	nop
}
  401052:	371c      	adds	r7, #28
  401054:	46bd      	mov	sp, r7
  401056:	bc80      	pop	{r7}
  401058:	4770      	bx	lr
	...

0040105c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  40105c:	b580      	push	{r7, lr}
  40105e:	b084      	sub	sp, #16
  401060:	af00      	add	r7, sp, #0
  401062:	60f8      	str	r0, [r7, #12]
  401064:	60b9      	str	r1, [r7, #8]
  401066:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401068:	68b9      	ldr	r1, [r7, #8]
  40106a:	68f8      	ldr	r0, [r7, #12]
  40106c:	4b19      	ldr	r3, [pc, #100]	; (4010d4 <pio_set_input+0x78>)
  40106e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401070:	687b      	ldr	r3, [r7, #4]
  401072:	f003 0301 	and.w	r3, r3, #1
  401076:	461a      	mov	r2, r3
  401078:	68b9      	ldr	r1, [r7, #8]
  40107a:	68f8      	ldr	r0, [r7, #12]
  40107c:	4b16      	ldr	r3, [pc, #88]	; (4010d8 <pio_set_input+0x7c>)
  40107e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401080:	687b      	ldr	r3, [r7, #4]
  401082:	f003 030a 	and.w	r3, r3, #10
  401086:	2b00      	cmp	r3, #0
  401088:	d003      	beq.n	401092 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  40108a:	68fb      	ldr	r3, [r7, #12]
  40108c:	68ba      	ldr	r2, [r7, #8]
  40108e:	621a      	str	r2, [r3, #32]
  401090:	e002      	b.n	401098 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401092:	68fb      	ldr	r3, [r7, #12]
  401094:	68ba      	ldr	r2, [r7, #8]
  401096:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401098:	687b      	ldr	r3, [r7, #4]
  40109a:	f003 0302 	and.w	r3, r3, #2
  40109e:	2b00      	cmp	r3, #0
  4010a0:	d004      	beq.n	4010ac <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  4010a2:	68fb      	ldr	r3, [r7, #12]
  4010a4:	68ba      	ldr	r2, [r7, #8]
  4010a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4010aa:	e008      	b.n	4010be <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4010ac:	687b      	ldr	r3, [r7, #4]
  4010ae:	f003 0308 	and.w	r3, r3, #8
  4010b2:	2b00      	cmp	r3, #0
  4010b4:	d003      	beq.n	4010be <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  4010b6:	68fb      	ldr	r3, [r7, #12]
  4010b8:	68ba      	ldr	r2, [r7, #8]
  4010ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4010be:	68fb      	ldr	r3, [r7, #12]
  4010c0:	68ba      	ldr	r2, [r7, #8]
  4010c2:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  4010c4:	68fb      	ldr	r3, [r7, #12]
  4010c6:	68ba      	ldr	r2, [r7, #8]
  4010c8:	601a      	str	r2, [r3, #0]
}
  4010ca:	bf00      	nop
  4010cc:	3710      	adds	r7, #16
  4010ce:	46bd      	mov	sp, r7
  4010d0:	bd80      	pop	{r7, pc}
  4010d2:	bf00      	nop
  4010d4:	004011c5 	.word	0x004011c5
  4010d8:	00400eed 	.word	0x00400eed

004010dc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4010dc:	b580      	push	{r7, lr}
  4010de:	b084      	sub	sp, #16
  4010e0:	af00      	add	r7, sp, #0
  4010e2:	60f8      	str	r0, [r7, #12]
  4010e4:	60b9      	str	r1, [r7, #8]
  4010e6:	607a      	str	r2, [r7, #4]
  4010e8:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  4010ea:	68b9      	ldr	r1, [r7, #8]
  4010ec:	68f8      	ldr	r0, [r7, #12]
  4010ee:	4b12      	ldr	r3, [pc, #72]	; (401138 <pio_set_output+0x5c>)
  4010f0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4010f2:	69ba      	ldr	r2, [r7, #24]
  4010f4:	68b9      	ldr	r1, [r7, #8]
  4010f6:	68f8      	ldr	r0, [r7, #12]
  4010f8:	4b10      	ldr	r3, [pc, #64]	; (40113c <pio_set_output+0x60>)
  4010fa:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4010fc:	683b      	ldr	r3, [r7, #0]
  4010fe:	2b00      	cmp	r3, #0
  401100:	d003      	beq.n	40110a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401102:	68fb      	ldr	r3, [r7, #12]
  401104:	68ba      	ldr	r2, [r7, #8]
  401106:	651a      	str	r2, [r3, #80]	; 0x50
  401108:	e002      	b.n	401110 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40110a:	68fb      	ldr	r3, [r7, #12]
  40110c:	68ba      	ldr	r2, [r7, #8]
  40110e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401110:	687b      	ldr	r3, [r7, #4]
  401112:	2b00      	cmp	r3, #0
  401114:	d003      	beq.n	40111e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401116:	68fb      	ldr	r3, [r7, #12]
  401118:	68ba      	ldr	r2, [r7, #8]
  40111a:	631a      	str	r2, [r3, #48]	; 0x30
  40111c:	e002      	b.n	401124 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40111e:	68fb      	ldr	r3, [r7, #12]
  401120:	68ba      	ldr	r2, [r7, #8]
  401122:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401124:	68fb      	ldr	r3, [r7, #12]
  401126:	68ba      	ldr	r2, [r7, #8]
  401128:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40112a:	68fb      	ldr	r3, [r7, #12]
  40112c:	68ba      	ldr	r2, [r7, #8]
  40112e:	601a      	str	r2, [r3, #0]
}
  401130:	bf00      	nop
  401132:	3710      	adds	r7, #16
  401134:	46bd      	mov	sp, r7
  401136:	bd80      	pop	{r7, pc}
  401138:	004011c5 	.word	0x004011c5
  40113c:	00400eed 	.word	0x00400eed

00401140 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  401140:	b480      	push	{r7}
  401142:	b085      	sub	sp, #20
  401144:	af00      	add	r7, sp, #0
  401146:	60f8      	str	r0, [r7, #12]
  401148:	60b9      	str	r1, [r7, #8]
  40114a:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  40114c:	687b      	ldr	r3, [r7, #4]
  40114e:	f003 0310 	and.w	r3, r3, #16
  401152:	2b00      	cmp	r3, #0
  401154:	d020      	beq.n	401198 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  401156:	68fb      	ldr	r3, [r7, #12]
  401158:	68ba      	ldr	r2, [r7, #8]
  40115a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40115e:	687b      	ldr	r3, [r7, #4]
  401160:	f003 0320 	and.w	r3, r3, #32
  401164:	2b00      	cmp	r3, #0
  401166:	d004      	beq.n	401172 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  401168:	68fb      	ldr	r3, [r7, #12]
  40116a:	68ba      	ldr	r2, [r7, #8]
  40116c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401170:	e003      	b.n	40117a <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  401172:	68fb      	ldr	r3, [r7, #12]
  401174:	68ba      	ldr	r2, [r7, #8]
  401176:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40117a:	687b      	ldr	r3, [r7, #4]
  40117c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401180:	2b00      	cmp	r3, #0
  401182:	d004      	beq.n	40118e <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  401184:	68fb      	ldr	r3, [r7, #12]
  401186:	68ba      	ldr	r2, [r7, #8]
  401188:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  40118c:	e008      	b.n	4011a0 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  40118e:	68fb      	ldr	r3, [r7, #12]
  401190:	68ba      	ldr	r2, [r7, #8]
  401192:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  401196:	e003      	b.n	4011a0 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  401198:	68fb      	ldr	r3, [r7, #12]
  40119a:	68ba      	ldr	r2, [r7, #8]
  40119c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  4011a0:	bf00      	nop
  4011a2:	3714      	adds	r7, #20
  4011a4:	46bd      	mov	sp, r7
  4011a6:	bc80      	pop	{r7}
  4011a8:	4770      	bx	lr

004011aa <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4011aa:	b480      	push	{r7}
  4011ac:	b083      	sub	sp, #12
  4011ae:	af00      	add	r7, sp, #0
  4011b0:	6078      	str	r0, [r7, #4]
  4011b2:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  4011b4:	687b      	ldr	r3, [r7, #4]
  4011b6:	683a      	ldr	r2, [r7, #0]
  4011b8:	641a      	str	r2, [r3, #64]	; 0x40
}
  4011ba:	bf00      	nop
  4011bc:	370c      	adds	r7, #12
  4011be:	46bd      	mov	sp, r7
  4011c0:	bc80      	pop	{r7}
  4011c2:	4770      	bx	lr

004011c4 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4011c4:	b480      	push	{r7}
  4011c6:	b083      	sub	sp, #12
  4011c8:	af00      	add	r7, sp, #0
  4011ca:	6078      	str	r0, [r7, #4]
  4011cc:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4011ce:	687b      	ldr	r3, [r7, #4]
  4011d0:	683a      	ldr	r2, [r7, #0]
  4011d2:	645a      	str	r2, [r3, #68]	; 0x44
}
  4011d4:	bf00      	nop
  4011d6:	370c      	adds	r7, #12
  4011d8:	46bd      	mov	sp, r7
  4011da:	bc80      	pop	{r7}
  4011dc:	4770      	bx	lr

004011de <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4011de:	b480      	push	{r7}
  4011e0:	b083      	sub	sp, #12
  4011e2:	af00      	add	r7, sp, #0
  4011e4:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4011e6:	687b      	ldr	r3, [r7, #4]
  4011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4011ea:	4618      	mov	r0, r3
  4011ec:	370c      	adds	r7, #12
  4011ee:	46bd      	mov	sp, r7
  4011f0:	bc80      	pop	{r7}
  4011f2:	4770      	bx	lr

004011f4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4011f4:	b480      	push	{r7}
  4011f6:	b083      	sub	sp, #12
  4011f8:	af00      	add	r7, sp, #0
  4011fa:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4011fc:	687b      	ldr	r3, [r7, #4]
  4011fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401200:	4618      	mov	r0, r3
  401202:	370c      	adds	r7, #12
  401204:	46bd      	mov	sp, r7
  401206:	bc80      	pop	{r7}
  401208:	4770      	bx	lr
	...

0040120c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40120c:	b590      	push	{r4, r7, lr}
  40120e:	b087      	sub	sp, #28
  401210:	af02      	add	r7, sp, #8
  401212:	6078      	str	r0, [r7, #4]
  401214:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401216:	6878      	ldr	r0, [r7, #4]
  401218:	4b63      	ldr	r3, [pc, #396]	; (4013a8 <pio_configure_pin+0x19c>)
  40121a:	4798      	blx	r3
  40121c:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40121e:	683b      	ldr	r3, [r7, #0]
  401220:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401228:	d067      	beq.n	4012fa <pio_configure_pin+0xee>
  40122a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40122e:	d809      	bhi.n	401244 <pio_configure_pin+0x38>
  401230:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401234:	d02b      	beq.n	40128e <pio_configure_pin+0x82>
  401236:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40123a:	d043      	beq.n	4012c4 <pio_configure_pin+0xb8>
  40123c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401240:	d00a      	beq.n	401258 <pio_configure_pin+0x4c>
  401242:	e0a9      	b.n	401398 <pio_configure_pin+0x18c>
  401244:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401248:	d07e      	beq.n	401348 <pio_configure_pin+0x13c>
  40124a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40124e:	d07b      	beq.n	401348 <pio_configure_pin+0x13c>
  401250:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401254:	d06c      	beq.n	401330 <pio_configure_pin+0x124>
  401256:	e09f      	b.n	401398 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401258:	687b      	ldr	r3, [r7, #4]
  40125a:	f003 031f 	and.w	r3, r3, #31
  40125e:	2201      	movs	r2, #1
  401260:	fa02 f303 	lsl.w	r3, r2, r3
  401264:	461a      	mov	r2, r3
  401266:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40126a:	68f8      	ldr	r0, [r7, #12]
  40126c:	4b4f      	ldr	r3, [pc, #316]	; (4013ac <pio_configure_pin+0x1a0>)
  40126e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401270:	687b      	ldr	r3, [r7, #4]
  401272:	f003 031f 	and.w	r3, r3, #31
  401276:	2201      	movs	r2, #1
  401278:	fa02 f303 	lsl.w	r3, r2, r3
  40127c:	4619      	mov	r1, r3
  40127e:	683b      	ldr	r3, [r7, #0]
  401280:	f003 0301 	and.w	r3, r3, #1
  401284:	461a      	mov	r2, r3
  401286:	68f8      	ldr	r0, [r7, #12]
  401288:	4b49      	ldr	r3, [pc, #292]	; (4013b0 <pio_configure_pin+0x1a4>)
  40128a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40128c:	e086      	b.n	40139c <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40128e:	687b      	ldr	r3, [r7, #4]
  401290:	f003 031f 	and.w	r3, r3, #31
  401294:	2201      	movs	r2, #1
  401296:	fa02 f303 	lsl.w	r3, r2, r3
  40129a:	461a      	mov	r2, r3
  40129c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4012a0:	68f8      	ldr	r0, [r7, #12]
  4012a2:	4b42      	ldr	r3, [pc, #264]	; (4013ac <pio_configure_pin+0x1a0>)
  4012a4:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4012a6:	687b      	ldr	r3, [r7, #4]
  4012a8:	f003 031f 	and.w	r3, r3, #31
  4012ac:	2201      	movs	r2, #1
  4012ae:	fa02 f303 	lsl.w	r3, r2, r3
  4012b2:	4619      	mov	r1, r3
  4012b4:	683b      	ldr	r3, [r7, #0]
  4012b6:	f003 0301 	and.w	r3, r3, #1
  4012ba:	461a      	mov	r2, r3
  4012bc:	68f8      	ldr	r0, [r7, #12]
  4012be:	4b3c      	ldr	r3, [pc, #240]	; (4013b0 <pio_configure_pin+0x1a4>)
  4012c0:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4012c2:	e06b      	b.n	40139c <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4012c4:	687b      	ldr	r3, [r7, #4]
  4012c6:	f003 031f 	and.w	r3, r3, #31
  4012ca:	2201      	movs	r2, #1
  4012cc:	fa02 f303 	lsl.w	r3, r2, r3
  4012d0:	461a      	mov	r2, r3
  4012d2:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4012d6:	68f8      	ldr	r0, [r7, #12]
  4012d8:	4b34      	ldr	r3, [pc, #208]	; (4013ac <pio_configure_pin+0x1a0>)
  4012da:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4012dc:	687b      	ldr	r3, [r7, #4]
  4012de:	f003 031f 	and.w	r3, r3, #31
  4012e2:	2201      	movs	r2, #1
  4012e4:	fa02 f303 	lsl.w	r3, r2, r3
  4012e8:	4619      	mov	r1, r3
  4012ea:	683b      	ldr	r3, [r7, #0]
  4012ec:	f003 0301 	and.w	r3, r3, #1
  4012f0:	461a      	mov	r2, r3
  4012f2:	68f8      	ldr	r0, [r7, #12]
  4012f4:	4b2e      	ldr	r3, [pc, #184]	; (4013b0 <pio_configure_pin+0x1a4>)
  4012f6:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4012f8:	e050      	b.n	40139c <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4012fa:	687b      	ldr	r3, [r7, #4]
  4012fc:	f003 031f 	and.w	r3, r3, #31
  401300:	2201      	movs	r2, #1
  401302:	fa02 f303 	lsl.w	r3, r2, r3
  401306:	461a      	mov	r2, r3
  401308:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40130c:	68f8      	ldr	r0, [r7, #12]
  40130e:	4b27      	ldr	r3, [pc, #156]	; (4013ac <pio_configure_pin+0x1a0>)
  401310:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401312:	687b      	ldr	r3, [r7, #4]
  401314:	f003 031f 	and.w	r3, r3, #31
  401318:	2201      	movs	r2, #1
  40131a:	fa02 f303 	lsl.w	r3, r2, r3
  40131e:	4619      	mov	r1, r3
  401320:	683b      	ldr	r3, [r7, #0]
  401322:	f003 0301 	and.w	r3, r3, #1
  401326:	461a      	mov	r2, r3
  401328:	68f8      	ldr	r0, [r7, #12]
  40132a:	4b21      	ldr	r3, [pc, #132]	; (4013b0 <pio_configure_pin+0x1a4>)
  40132c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40132e:	e035      	b.n	40139c <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401330:	687b      	ldr	r3, [r7, #4]
  401332:	f003 031f 	and.w	r3, r3, #31
  401336:	2201      	movs	r2, #1
  401338:	fa02 f303 	lsl.w	r3, r2, r3
  40133c:	683a      	ldr	r2, [r7, #0]
  40133e:	4619      	mov	r1, r3
  401340:	68f8      	ldr	r0, [r7, #12]
  401342:	4b1c      	ldr	r3, [pc, #112]	; (4013b4 <pio_configure_pin+0x1a8>)
  401344:	4798      	blx	r3
		break;
  401346:	e029      	b.n	40139c <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401348:	687b      	ldr	r3, [r7, #4]
  40134a:	f003 031f 	and.w	r3, r3, #31
  40134e:	2201      	movs	r2, #1
  401350:	fa02 f303 	lsl.w	r3, r2, r3
  401354:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401356:	683b      	ldr	r3, [r7, #0]
  401358:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40135c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401360:	bf0c      	ite	eq
  401362:	2301      	moveq	r3, #1
  401364:	2300      	movne	r3, #0
  401366:	b2db      	uxtb	r3, r3
  401368:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  40136a:	683b      	ldr	r3, [r7, #0]
  40136c:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401370:	2b00      	cmp	r3, #0
  401372:	bf14      	ite	ne
  401374:	2301      	movne	r3, #1
  401376:	2300      	moveq	r3, #0
  401378:	b2db      	uxtb	r3, r3
  40137a:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  40137c:	683b      	ldr	r3, [r7, #0]
  40137e:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401382:	2b00      	cmp	r3, #0
  401384:	bf14      	ite	ne
  401386:	2301      	movne	r3, #1
  401388:	2300      	moveq	r3, #0
  40138a:	b2db      	uxtb	r3, r3
  40138c:	9300      	str	r3, [sp, #0]
  40138e:	4603      	mov	r3, r0
  401390:	68f8      	ldr	r0, [r7, #12]
  401392:	4c09      	ldr	r4, [pc, #36]	; (4013b8 <pio_configure_pin+0x1ac>)
  401394:	47a0      	blx	r4
		break;
  401396:	e001      	b.n	40139c <pio_configure_pin+0x190>

	default:
		return 0;
  401398:	2300      	movs	r3, #0
  40139a:	e000      	b.n	40139e <pio_configure_pin+0x192>
	}

	return 1;
  40139c:	2301      	movs	r3, #1
}
  40139e:	4618      	mov	r0, r3
  4013a0:	3714      	adds	r7, #20
  4013a2:	46bd      	mov	sp, r7
  4013a4:	bd90      	pop	{r4, r7, pc}
  4013a6:	bf00      	nop
  4013a8:	004013bd 	.word	0x004013bd
  4013ac:	00400f4d 	.word	0x00400f4d
  4013b0:	00400eed 	.word	0x00400eed
  4013b4:	0040105d 	.word	0x0040105d
  4013b8:	004010dd 	.word	0x004010dd

004013bc <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  4013bc:	b480      	push	{r7}
  4013be:	b085      	sub	sp, #20
  4013c0:	af00      	add	r7, sp, #0
  4013c2:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4013c4:	687b      	ldr	r3, [r7, #4]
  4013c6:	095b      	lsrs	r3, r3, #5
  4013c8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4013cc:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4013d0:	025b      	lsls	r3, r3, #9
  4013d2:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  4013d4:	68fb      	ldr	r3, [r7, #12]
}
  4013d6:	4618      	mov	r0, r3
  4013d8:	3714      	adds	r7, #20
  4013da:	46bd      	mov	sp, r7
  4013dc:	bc80      	pop	{r7}
  4013de:	4770      	bx	lr

004013e0 <pio_capture_enable>:
 * \brief Enable PIO capture mode.
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_enable(Pio *p_pio)
{
  4013e0:	b480      	push	{r7}
  4013e2:	b083      	sub	sp, #12
  4013e4:	af00      	add	r7, sp, #0
  4013e6:	6078      	str	r0, [r7, #4]
	p_pio->PIO_PCMR |= PIO_PCMR_PCEN;
  4013e8:	687b      	ldr	r3, [r7, #4]
  4013ea:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4013ee:	f043 0201 	orr.w	r2, r3, #1
  4013f2:	687b      	ldr	r3, [r7, #4]
  4013f4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	pio_capture_enable_flag = true;
  4013f8:	4b03      	ldr	r3, [pc, #12]	; (401408 <pio_capture_enable+0x28>)
  4013fa:	2201      	movs	r2, #1
  4013fc:	601a      	str	r2, [r3, #0]
}
  4013fe:	bf00      	nop
  401400:	370c      	adds	r7, #12
  401402:	46bd      	mov	sp, r7
  401404:	bc80      	pop	{r7}
  401406:	4770      	bx	lr
  401408:	2001914c 	.word	0x2001914c

0040140c <pio_capture_disable>:
 * \brief Disable PIO capture mode.
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_disable(Pio *p_pio)
{
  40140c:	b480      	push	{r7}
  40140e:	b083      	sub	sp, #12
  401410:	af00      	add	r7, sp, #0
  401412:	6078      	str	r0, [r7, #4]
	p_pio->PIO_PCMR &= (~PIO_PCMR_PCEN);
  401414:	687b      	ldr	r3, [r7, #4]
  401416:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  40141a:	f023 0201 	bic.w	r2, r3, #1
  40141e:	687b      	ldr	r3, [r7, #4]
  401420:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	pio_capture_enable_flag = false;
  401424:	4b03      	ldr	r3, [pc, #12]	; (401434 <pio_capture_disable+0x28>)
  401426:	2200      	movs	r2, #0
  401428:	601a      	str	r2, [r3, #0]
}
  40142a:	bf00      	nop
  40142c:	370c      	adds	r7, #12
  40142e:	46bd      	mov	sp, r7
  401430:	bc80      	pop	{r7}
  401432:	4770      	bx	lr
  401434:	2001914c 	.word	0x2001914c

00401438 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  401438:	b480      	push	{r7}
  40143a:	b085      	sub	sp, #20
  40143c:	af00      	add	r7, sp, #0
  40143e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401440:	491c      	ldr	r1, [pc, #112]	; (4014b4 <pmc_switch_mck_to_pllack+0x7c>)
  401442:	4b1c      	ldr	r3, [pc, #112]	; (4014b4 <pmc_switch_mck_to_pllack+0x7c>)
  401444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401446:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40144a:	687b      	ldr	r3, [r7, #4]
  40144c:	4313      	orrs	r3, r2
  40144e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401450:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401454:	60fb      	str	r3, [r7, #12]
  401456:	e007      	b.n	401468 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401458:	68fb      	ldr	r3, [r7, #12]
  40145a:	2b00      	cmp	r3, #0
  40145c:	d101      	bne.n	401462 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40145e:	2301      	movs	r3, #1
  401460:	e023      	b.n	4014aa <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  401462:	68fb      	ldr	r3, [r7, #12]
  401464:	3b01      	subs	r3, #1
  401466:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401468:	4b12      	ldr	r3, [pc, #72]	; (4014b4 <pmc_switch_mck_to_pllack+0x7c>)
  40146a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40146c:	f003 0308 	and.w	r3, r3, #8
  401470:	2b00      	cmp	r3, #0
  401472:	d0f1      	beq.n	401458 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401474:	4a0f      	ldr	r2, [pc, #60]	; (4014b4 <pmc_switch_mck_to_pllack+0x7c>)
  401476:	4b0f      	ldr	r3, [pc, #60]	; (4014b4 <pmc_switch_mck_to_pllack+0x7c>)
  401478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40147a:	f023 0303 	bic.w	r3, r3, #3
  40147e:	f043 0302 	orr.w	r3, r3, #2
  401482:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401484:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401488:	60fb      	str	r3, [r7, #12]
  40148a:	e007      	b.n	40149c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40148c:	68fb      	ldr	r3, [r7, #12]
  40148e:	2b00      	cmp	r3, #0
  401490:	d101      	bne.n	401496 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  401492:	2301      	movs	r3, #1
  401494:	e009      	b.n	4014aa <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  401496:	68fb      	ldr	r3, [r7, #12]
  401498:	3b01      	subs	r3, #1
  40149a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40149c:	4b05      	ldr	r3, [pc, #20]	; (4014b4 <pmc_switch_mck_to_pllack+0x7c>)
  40149e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014a0:	f003 0308 	and.w	r3, r3, #8
  4014a4:	2b00      	cmp	r3, #0
  4014a6:	d0f1      	beq.n	40148c <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4014a8:	2300      	movs	r3, #0
}
  4014aa:	4618      	mov	r0, r3
  4014ac:	3714      	adds	r7, #20
  4014ae:	46bd      	mov	sp, r7
  4014b0:	bc80      	pop	{r7}
  4014b2:	4770      	bx	lr
  4014b4:	400e0400 	.word	0x400e0400

004014b8 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4014b8:	b480      	push	{r7}
  4014ba:	b083      	sub	sp, #12
  4014bc:	af00      	add	r7, sp, #0
  4014be:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4014c0:	687b      	ldr	r3, [r7, #4]
  4014c2:	2b01      	cmp	r3, #1
  4014c4:	d107      	bne.n	4014d6 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4014c6:	4a08      	ldr	r2, [pc, #32]	; (4014e8 <pmc_switch_sclk_to_32kxtal+0x30>)
  4014c8:	4b07      	ldr	r3, [pc, #28]	; (4014e8 <pmc_switch_sclk_to_32kxtal+0x30>)
  4014ca:	689b      	ldr	r3, [r3, #8]
  4014cc:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4014d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4014d4:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4014d6:	4b04      	ldr	r3, [pc, #16]	; (4014e8 <pmc_switch_sclk_to_32kxtal+0x30>)
  4014d8:	4a04      	ldr	r2, [pc, #16]	; (4014ec <pmc_switch_sclk_to_32kxtal+0x34>)
  4014da:	601a      	str	r2, [r3, #0]
}
  4014dc:	bf00      	nop
  4014de:	370c      	adds	r7, #12
  4014e0:	46bd      	mov	sp, r7
  4014e2:	bc80      	pop	{r7}
  4014e4:	4770      	bx	lr
  4014e6:	bf00      	nop
  4014e8:	400e1410 	.word	0x400e1410
  4014ec:	a5000008 	.word	0xa5000008

004014f0 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4014f0:	b480      	push	{r7}
  4014f2:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4014f4:	4b09      	ldr	r3, [pc, #36]	; (40151c <pmc_osc_is_ready_32kxtal+0x2c>)
  4014f6:	695b      	ldr	r3, [r3, #20]
  4014f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4014fc:	2b00      	cmp	r3, #0
  4014fe:	d007      	beq.n	401510 <pmc_osc_is_ready_32kxtal+0x20>
  401500:	4b07      	ldr	r3, [pc, #28]	; (401520 <pmc_osc_is_ready_32kxtal+0x30>)
  401502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401504:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401508:	2b00      	cmp	r3, #0
  40150a:	d001      	beq.n	401510 <pmc_osc_is_ready_32kxtal+0x20>
  40150c:	2301      	movs	r3, #1
  40150e:	e000      	b.n	401512 <pmc_osc_is_ready_32kxtal+0x22>
  401510:	2300      	movs	r3, #0
}
  401512:	4618      	mov	r0, r3
  401514:	46bd      	mov	sp, r7
  401516:	bc80      	pop	{r7}
  401518:	4770      	bx	lr
  40151a:	bf00      	nop
  40151c:	400e1410 	.word	0x400e1410
  401520:	400e0400 	.word	0x400e0400

00401524 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  401524:	b480      	push	{r7}
  401526:	b083      	sub	sp, #12
  401528:	af00      	add	r7, sp, #0
  40152a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  40152c:	4a18      	ldr	r2, [pc, #96]	; (401590 <pmc_switch_mainck_to_fastrc+0x6c>)
  40152e:	4b18      	ldr	r3, [pc, #96]	; (401590 <pmc_switch_mainck_to_fastrc+0x6c>)
  401530:	6a1b      	ldr	r3, [r3, #32]
  401532:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401536:	f043 0308 	orr.w	r3, r3, #8
  40153a:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40153c:	bf00      	nop
  40153e:	4b14      	ldr	r3, [pc, #80]	; (401590 <pmc_switch_mainck_to_fastrc+0x6c>)
  401540:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401546:	2b00      	cmp	r3, #0
  401548:	d0f9      	beq.n	40153e <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40154a:	4911      	ldr	r1, [pc, #68]	; (401590 <pmc_switch_mainck_to_fastrc+0x6c>)
  40154c:	4b10      	ldr	r3, [pc, #64]	; (401590 <pmc_switch_mainck_to_fastrc+0x6c>)
  40154e:	6a1b      	ldr	r3, [r3, #32]
  401550:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401558:	687a      	ldr	r2, [r7, #4]
  40155a:	4313      	orrs	r3, r2
  40155c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401560:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401562:	bf00      	nop
  401564:	4b0a      	ldr	r3, [pc, #40]	; (401590 <pmc_switch_mainck_to_fastrc+0x6c>)
  401566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40156c:	2b00      	cmp	r3, #0
  40156e:	d0f9      	beq.n	401564 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401570:	4a07      	ldr	r2, [pc, #28]	; (401590 <pmc_switch_mainck_to_fastrc+0x6c>)
  401572:	4b07      	ldr	r3, [pc, #28]	; (401590 <pmc_switch_mainck_to_fastrc+0x6c>)
  401574:	6a1b      	ldr	r3, [r3, #32]
  401576:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40157a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40157e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401582:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401584:	bf00      	nop
  401586:	370c      	adds	r7, #12
  401588:	46bd      	mov	sp, r7
  40158a:	bc80      	pop	{r7}
  40158c:	4770      	bx	lr
  40158e:	bf00      	nop
  401590:	400e0400 	.word	0x400e0400

00401594 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401594:	b480      	push	{r7}
  401596:	b083      	sub	sp, #12
  401598:	af00      	add	r7, sp, #0
  40159a:	6078      	str	r0, [r7, #4]
  40159c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40159e:	687b      	ldr	r3, [r7, #4]
  4015a0:	2b00      	cmp	r3, #0
  4015a2:	d008      	beq.n	4015b6 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015a4:	4916      	ldr	r1, [pc, #88]	; (401600 <pmc_switch_mainck_to_xtal+0x6c>)
  4015a6:	4b16      	ldr	r3, [pc, #88]	; (401600 <pmc_switch_mainck_to_xtal+0x6c>)
  4015a8:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4015aa:	4a16      	ldr	r2, [pc, #88]	; (401604 <pmc_switch_mainck_to_xtal+0x70>)
  4015ac:	401a      	ands	r2, r3
  4015ae:	4b16      	ldr	r3, [pc, #88]	; (401608 <pmc_switch_mainck_to_xtal+0x74>)
  4015b0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015b2:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4015b4:	e01e      	b.n	4015f4 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4015b6:	4912      	ldr	r1, [pc, #72]	; (401600 <pmc_switch_mainck_to_xtal+0x6c>)
  4015b8:	4b11      	ldr	r3, [pc, #68]	; (401600 <pmc_switch_mainck_to_xtal+0x6c>)
  4015ba:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4015bc:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4015c0:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4015c4:	683a      	ldr	r2, [r7, #0]
  4015c6:	0212      	lsls	r2, r2, #8
  4015c8:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4015ca:	4313      	orrs	r3, r2
  4015cc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4015d0:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4015d4:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4015d6:	bf00      	nop
  4015d8:	4b09      	ldr	r3, [pc, #36]	; (401600 <pmc_switch_mainck_to_xtal+0x6c>)
  4015da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4015dc:	f003 0301 	and.w	r3, r3, #1
  4015e0:	2b00      	cmp	r3, #0
  4015e2:	d0f9      	beq.n	4015d8 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4015e4:	4a06      	ldr	r2, [pc, #24]	; (401600 <pmc_switch_mainck_to_xtal+0x6c>)
  4015e6:	4b06      	ldr	r3, [pc, #24]	; (401600 <pmc_switch_mainck_to_xtal+0x6c>)
  4015e8:	6a1b      	ldr	r3, [r3, #32]
  4015ea:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4015ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4015f2:	6213      	str	r3, [r2, #32]
}
  4015f4:	bf00      	nop
  4015f6:	370c      	adds	r7, #12
  4015f8:	46bd      	mov	sp, r7
  4015fa:	bc80      	pop	{r7}
  4015fc:	4770      	bx	lr
  4015fe:	bf00      	nop
  401600:	400e0400 	.word	0x400e0400
  401604:	fec8fffc 	.word	0xfec8fffc
  401608:	01370002 	.word	0x01370002

0040160c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  40160c:	b480      	push	{r7}
  40160e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401610:	4b03      	ldr	r3, [pc, #12]	; (401620 <pmc_osc_is_ready_mainck+0x14>)
  401612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401618:	4618      	mov	r0, r3
  40161a:	46bd      	mov	sp, r7
  40161c:	bc80      	pop	{r7}
  40161e:	4770      	bx	lr
  401620:	400e0400 	.word	0x400e0400

00401624 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401624:	b480      	push	{r7}
  401626:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401628:	4b03      	ldr	r3, [pc, #12]	; (401638 <pmc_disable_pllack+0x14>)
  40162a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40162e:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401630:	bf00      	nop
  401632:	46bd      	mov	sp, r7
  401634:	bc80      	pop	{r7}
  401636:	4770      	bx	lr
  401638:	400e0400 	.word	0x400e0400

0040163c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  40163c:	b480      	push	{r7}
  40163e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401640:	4b03      	ldr	r3, [pc, #12]	; (401650 <pmc_is_locked_pllack+0x14>)
  401642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401644:	f003 0302 	and.w	r3, r3, #2
}
  401648:	4618      	mov	r0, r3
  40164a:	46bd      	mov	sp, r7
  40164c:	bc80      	pop	{r7}
  40164e:	4770      	bx	lr
  401650:	400e0400 	.word	0x400e0400

00401654 <pmc_enable_pllbck>:
 * \param mulb PLLB multiplier.
 * \param pllbcount PLLB counter.
 * \param divb Divider.
 */
void pmc_enable_pllbck(uint32_t mulb, uint32_t pllbcount, uint32_t divb)
{
  401654:	b580      	push	{r7, lr}
  401656:	b084      	sub	sp, #16
  401658:	af00      	add	r7, sp, #0
  40165a:	60f8      	str	r0, [r7, #12]
  40165c:	60b9      	str	r1, [r7, #8]
  40165e:	607a      	str	r2, [r7, #4]
	/* first disable the PLL to unlock the lock */
	pmc_disable_pllbck();
  401660:	4b0d      	ldr	r3, [pc, #52]	; (401698 <pmc_enable_pllbck+0x44>)
  401662:	4798      	blx	r3

#if SAMG55
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(divb) |
		CKGR_PLLAR_PLLACOUNT(pllbcount) | CKGR_PLLAR_MULA(mulb);
#else
	PMC->CKGR_PLLBR =
  401664:	480d      	ldr	r0, [pc, #52]	; (40169c <pmc_enable_pllbck+0x48>)
			CKGR_PLLBR_DIVB(divb) | CKGR_PLLBR_PLLBCOUNT(pllbcount)
  401666:	687b      	ldr	r3, [r7, #4]
  401668:	b2da      	uxtb	r2, r3
  40166a:	68bb      	ldr	r3, [r7, #8]
  40166c:	021b      	lsls	r3, r3, #8
  40166e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
  401672:	431a      	orrs	r2, r3
			| CKGR_PLLBR_MULB(mulb);
  401674:	68fb      	ldr	r3, [r7, #12]
  401676:	0419      	lsls	r1, r3, #16
  401678:	4b09      	ldr	r3, [pc, #36]	; (4016a0 <pmc_enable_pllbck+0x4c>)
  40167a:	400b      	ands	r3, r1
  40167c:	4313      	orrs	r3, r2
	PMC->CKGR_PLLBR =
  40167e:	62c3      	str	r3, [r0, #44]	; 0x2c
#endif
	while ((PMC->PMC_SR & PMC_SR_LOCKB) == 0);
  401680:	bf00      	nop
  401682:	4b06      	ldr	r3, [pc, #24]	; (40169c <pmc_enable_pllbck+0x48>)
  401684:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401686:	f003 0304 	and.w	r3, r3, #4
  40168a:	2b00      	cmp	r3, #0
  40168c:	d0f9      	beq.n	401682 <pmc_enable_pllbck+0x2e>
}
  40168e:	bf00      	nop
  401690:	3710      	adds	r7, #16
  401692:	46bd      	mov	sp, r7
  401694:	bd80      	pop	{r7, pc}
  401696:	bf00      	nop
  401698:	004016a5 	.word	0x004016a5
  40169c:	400e0400 	.word	0x400e0400
  4016a0:	07ff0000 	.word	0x07ff0000

004016a4 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  4016a4:	b480      	push	{r7}
  4016a6:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4016a8:	4b03      	ldr	r3, [pc, #12]	; (4016b8 <pmc_disable_pllbck+0x14>)
  4016aa:	2200      	movs	r2, #0
  4016ac:	62da      	str	r2, [r3, #44]	; 0x2c
}
  4016ae:	bf00      	nop
  4016b0:	46bd      	mov	sp, r7
  4016b2:	bc80      	pop	{r7}
  4016b4:	4770      	bx	lr
  4016b6:	bf00      	nop
  4016b8:	400e0400 	.word	0x400e0400

004016bc <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  4016bc:	b480      	push	{r7}
  4016be:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4016c0:	4b03      	ldr	r3, [pc, #12]	; (4016d0 <pmc_is_locked_pllbck+0x14>)
  4016c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4016c4:	f003 0304 	and.w	r3, r3, #4
}
  4016c8:	4618      	mov	r0, r3
  4016ca:	46bd      	mov	sp, r7
  4016cc:	bc80      	pop	{r7}
  4016ce:	4770      	bx	lr
  4016d0:	400e0400 	.word	0x400e0400

004016d4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4016d4:	b480      	push	{r7}
  4016d6:	b083      	sub	sp, #12
  4016d8:	af00      	add	r7, sp, #0
  4016da:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4016dc:	687b      	ldr	r3, [r7, #4]
  4016de:	2b22      	cmp	r3, #34	; 0x22
  4016e0:	d901      	bls.n	4016e6 <pmc_enable_periph_clk+0x12>
		return 1;
  4016e2:	2301      	movs	r3, #1
  4016e4:	e02f      	b.n	401746 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4016e6:	687b      	ldr	r3, [r7, #4]
  4016e8:	2b1f      	cmp	r3, #31
  4016ea:	d813      	bhi.n	401714 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4016ec:	4b18      	ldr	r3, [pc, #96]	; (401750 <pmc_enable_periph_clk+0x7c>)
  4016ee:	699a      	ldr	r2, [r3, #24]
  4016f0:	2101      	movs	r1, #1
  4016f2:	687b      	ldr	r3, [r7, #4]
  4016f4:	fa01 f303 	lsl.w	r3, r1, r3
  4016f8:	401a      	ands	r2, r3
  4016fa:	2101      	movs	r1, #1
  4016fc:	687b      	ldr	r3, [r7, #4]
  4016fe:	fa01 f303 	lsl.w	r3, r1, r3
  401702:	429a      	cmp	r2, r3
  401704:	d01e      	beq.n	401744 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  401706:	4a12      	ldr	r2, [pc, #72]	; (401750 <pmc_enable_periph_clk+0x7c>)
  401708:	2101      	movs	r1, #1
  40170a:	687b      	ldr	r3, [r7, #4]
  40170c:	fa01 f303 	lsl.w	r3, r1, r3
  401710:	6113      	str	r3, [r2, #16]
  401712:	e017      	b.n	401744 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401714:	687b      	ldr	r3, [r7, #4]
  401716:	3b20      	subs	r3, #32
  401718:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40171a:	4b0d      	ldr	r3, [pc, #52]	; (401750 <pmc_enable_periph_clk+0x7c>)
  40171c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401720:	2101      	movs	r1, #1
  401722:	687b      	ldr	r3, [r7, #4]
  401724:	fa01 f303 	lsl.w	r3, r1, r3
  401728:	401a      	ands	r2, r3
  40172a:	2101      	movs	r1, #1
  40172c:	687b      	ldr	r3, [r7, #4]
  40172e:	fa01 f303 	lsl.w	r3, r1, r3
  401732:	429a      	cmp	r2, r3
  401734:	d006      	beq.n	401744 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  401736:	4a06      	ldr	r2, [pc, #24]	; (401750 <pmc_enable_periph_clk+0x7c>)
  401738:	2101      	movs	r1, #1
  40173a:	687b      	ldr	r3, [r7, #4]
  40173c:	fa01 f303 	lsl.w	r3, r1, r3
  401740:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401744:	2300      	movs	r3, #0
}
  401746:	4618      	mov	r0, r3
  401748:	370c      	adds	r7, #12
  40174a:	46bd      	mov	sp, r7
  40174c:	bc80      	pop	{r7}
  40174e:	4770      	bx	lr
  401750:	400e0400 	.word	0x400e0400

00401754 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401754:	b480      	push	{r7}
  401756:	b083      	sub	sp, #12
  401758:	af00      	add	r7, sp, #0
  40175a:	4603      	mov	r3, r0
  40175c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40175e:	4908      	ldr	r1, [pc, #32]	; (401780 <NVIC_EnableIRQ+0x2c>)
  401760:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401764:	095b      	lsrs	r3, r3, #5
  401766:	79fa      	ldrb	r2, [r7, #7]
  401768:	f002 021f 	and.w	r2, r2, #31
  40176c:	2001      	movs	r0, #1
  40176e:	fa00 f202 	lsl.w	r2, r0, r2
  401772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401776:	bf00      	nop
  401778:	370c      	adds	r7, #12
  40177a:	46bd      	mov	sp, r7
  40177c:	bc80      	pop	{r7}
  40177e:	4770      	bx	lr
  401780:	e000e100 	.word	0xe000e100

00401784 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  401784:	b480      	push	{r7}
  401786:	b083      	sub	sp, #12
  401788:	af00      	add	r7, sp, #0
  40178a:	4603      	mov	r3, r0
  40178c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40178e:	4909      	ldr	r1, [pc, #36]	; (4017b4 <NVIC_DisableIRQ+0x30>)
  401790:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401794:	095b      	lsrs	r3, r3, #5
  401796:	79fa      	ldrb	r2, [r7, #7]
  401798:	f002 021f 	and.w	r2, r2, #31
  40179c:	2001      	movs	r0, #1
  40179e:	fa00 f202 	lsl.w	r2, r0, r2
  4017a2:	3320      	adds	r3, #32
  4017a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4017a8:	bf00      	nop
  4017aa:	370c      	adds	r7, #12
  4017ac:	46bd      	mov	sp, r7
  4017ae:	bc80      	pop	{r7}
  4017b0:	4770      	bx	lr
  4017b2:	bf00      	nop
  4017b4:	e000e100 	.word	0xe000e100

004017b8 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4017b8:	b480      	push	{r7}
  4017ba:	b083      	sub	sp, #12
  4017bc:	af00      	add	r7, sp, #0
  4017be:	4603      	mov	r3, r0
  4017c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4017c2:	4909      	ldr	r1, [pc, #36]	; (4017e8 <NVIC_ClearPendingIRQ+0x30>)
  4017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4017c8:	095b      	lsrs	r3, r3, #5
  4017ca:	79fa      	ldrb	r2, [r7, #7]
  4017cc:	f002 021f 	and.w	r2, r2, #31
  4017d0:	2001      	movs	r0, #1
  4017d2:	fa00 f202 	lsl.w	r2, r0, r2
  4017d6:	3360      	adds	r3, #96	; 0x60
  4017d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4017dc:	bf00      	nop
  4017de:	370c      	adds	r7, #12
  4017e0:	46bd      	mov	sp, r7
  4017e2:	bc80      	pop	{r7}
  4017e4:	4770      	bx	lr
  4017e6:	bf00      	nop
  4017e8:	e000e100 	.word	0xe000e100

004017ec <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  4017ec:	b480      	push	{r7}
  4017ee:	b083      	sub	sp, #12
  4017f0:	af00      	add	r7, sp, #0
  4017f2:	4603      	mov	r3, r0
  4017f4:	6039      	str	r1, [r7, #0]
  4017f6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  4017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4017fc:	2b00      	cmp	r3, #0
  4017fe:	da0b      	bge.n	401818 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401800:	490d      	ldr	r1, [pc, #52]	; (401838 <NVIC_SetPriority+0x4c>)
  401802:	79fb      	ldrb	r3, [r7, #7]
  401804:	f003 030f 	and.w	r3, r3, #15
  401808:	3b04      	subs	r3, #4
  40180a:	683a      	ldr	r2, [r7, #0]
  40180c:	b2d2      	uxtb	r2, r2
  40180e:	0112      	lsls	r2, r2, #4
  401810:	b2d2      	uxtb	r2, r2
  401812:	440b      	add	r3, r1
  401814:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  401816:	e009      	b.n	40182c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401818:	4908      	ldr	r1, [pc, #32]	; (40183c <NVIC_SetPriority+0x50>)
  40181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40181e:	683a      	ldr	r2, [r7, #0]
  401820:	b2d2      	uxtb	r2, r2
  401822:	0112      	lsls	r2, r2, #4
  401824:	b2d2      	uxtb	r2, r2
  401826:	440b      	add	r3, r1
  401828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  40182c:	bf00      	nop
  40182e:	370c      	adds	r7, #12
  401830:	46bd      	mov	sp, r7
  401832:	bc80      	pop	{r7}
  401834:	4770      	bx	lr
  401836:	bf00      	nop
  401838:	e000ed00 	.word	0xe000ed00
  40183c:	e000e100 	.word	0xe000e100

00401840 <osc_get_rate>:
{
  401840:	b480      	push	{r7}
  401842:	b083      	sub	sp, #12
  401844:	af00      	add	r7, sp, #0
  401846:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401848:	687b      	ldr	r3, [r7, #4]
  40184a:	2b07      	cmp	r3, #7
  40184c:	d825      	bhi.n	40189a <osc_get_rate+0x5a>
  40184e:	a201      	add	r2, pc, #4	; (adr r2, 401854 <osc_get_rate+0x14>)
  401850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401854:	00401875 	.word	0x00401875
  401858:	0040187b 	.word	0x0040187b
  40185c:	00401881 	.word	0x00401881
  401860:	00401887 	.word	0x00401887
  401864:	0040188b 	.word	0x0040188b
  401868:	0040188f 	.word	0x0040188f
  40186c:	00401893 	.word	0x00401893
  401870:	00401897 	.word	0x00401897
		return OSC_SLCK_32K_RC_HZ;
  401874:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401878:	e010      	b.n	40189c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40187a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40187e:	e00d      	b.n	40189c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401884:	e00a      	b.n	40189c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401886:	4b08      	ldr	r3, [pc, #32]	; (4018a8 <osc_get_rate+0x68>)
  401888:	e008      	b.n	40189c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40188a:	4b08      	ldr	r3, [pc, #32]	; (4018ac <osc_get_rate+0x6c>)
  40188c:	e006      	b.n	40189c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40188e:	4b08      	ldr	r3, [pc, #32]	; (4018b0 <osc_get_rate+0x70>)
  401890:	e004      	b.n	40189c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401892:	4b07      	ldr	r3, [pc, #28]	; (4018b0 <osc_get_rate+0x70>)
  401894:	e002      	b.n	40189c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401896:	4b06      	ldr	r3, [pc, #24]	; (4018b0 <osc_get_rate+0x70>)
  401898:	e000      	b.n	40189c <osc_get_rate+0x5c>
	return 0;
  40189a:	2300      	movs	r3, #0
}
  40189c:	4618      	mov	r0, r3
  40189e:	370c      	adds	r7, #12
  4018a0:	46bd      	mov	sp, r7
  4018a2:	bc80      	pop	{r7}
  4018a4:	4770      	bx	lr
  4018a6:	bf00      	nop
  4018a8:	003d0900 	.word	0x003d0900
  4018ac:	007a1200 	.word	0x007a1200
  4018b0:	00b71b00 	.word	0x00b71b00

004018b4 <sysclk_get_main_hz>:
{
  4018b4:	b580      	push	{r7, lr}
  4018b6:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4018b8:	2006      	movs	r0, #6
  4018ba:	4b04      	ldr	r3, [pc, #16]	; (4018cc <sysclk_get_main_hz+0x18>)
  4018bc:	4798      	blx	r3
  4018be:	4602      	mov	r2, r0
  4018c0:	4613      	mov	r3, r2
  4018c2:	009b      	lsls	r3, r3, #2
  4018c4:	4413      	add	r3, r2
  4018c6:	009b      	lsls	r3, r3, #2
}
  4018c8:	4618      	mov	r0, r3
  4018ca:	bd80      	pop	{r7, pc}
  4018cc:	00401841 	.word	0x00401841

004018d0 <sysclk_get_cpu_hz>:
{
  4018d0:	b580      	push	{r7, lr}
  4018d2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4018d4:	4b02      	ldr	r3, [pc, #8]	; (4018e0 <sysclk_get_cpu_hz+0x10>)
  4018d6:	4798      	blx	r3
  4018d8:	4603      	mov	r3, r0
  4018da:	085b      	lsrs	r3, r3, #1
}
  4018dc:	4618      	mov	r0, r3
  4018de:	bd80      	pop	{r7, pc}
  4018e0:	004018b5 	.word	0x004018b5

004018e4 <init_vsync_interrupts>:
volatile uint32_t image_length = 0;


// All functions go here
static void init_vsync_interrupts(void)
{
  4018e4:	b590      	push	{r4, r7, lr}
  4018e6:	b083      	sub	sp, #12
  4018e8:	af02      	add	r7, sp, #8
	//Initialize PIO interrupt handler, see PIO definition in conf_board.h
	pio_handler_set(OV_VSYNC_PIO, OV_VSYNC_ID, OV_VSYNC_MASK,OV_VSYNC_TYPE, vsync_handler);
  4018ea:	4b08      	ldr	r3, [pc, #32]	; (40190c <init_vsync_interrupts+0x28>)
  4018ec:	9300      	str	r3, [sp, #0]
  4018ee:	2301      	movs	r3, #1
  4018f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4018f4:	210b      	movs	r1, #11
  4018f6:	4806      	ldr	r0, [pc, #24]	; (401910 <init_vsync_interrupts+0x2c>)
  4018f8:	4c06      	ldr	r4, [pc, #24]	; (401914 <init_vsync_interrupts+0x30>)
  4018fa:	47a0      	blx	r4

	// Enable PIO controller IRQs
	NVIC_EnableIRQ((IRQn_Type)OV_VSYNC_ID);
  4018fc:	200b      	movs	r0, #11
  4018fe:	4b06      	ldr	r3, [pc, #24]	; (401918 <init_vsync_interrupts+0x34>)
  401900:	4798      	blx	r3
}
  401902:	bf00      	nop
  401904:	3704      	adds	r7, #4
  401906:	46bd      	mov	sp, r7
  401908:	bd90      	pop	{r4, r7, pc}
  40190a:	bf00      	nop
  40190c:	0040191d 	.word	0x0040191d
  401910:	400e0e00 	.word	0x400e0e00
  401914:	0040020d 	.word	0x0040020d
  401918:	00401755 	.word	0x00401755

0040191c <vsync_handler>:


static void vsync_handler(uint32_t ul_id, uint32_t ul_mask)
{
  40191c:	b480      	push	{r7}
  40191e:	b083      	sub	sp, #12
  401920:	af00      	add	r7, sp, #0
  401922:	6078      	str	r0, [r7, #4]
  401924:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);
	vsync_rising_edge_flag = true;
  401926:	4b04      	ldr	r3, [pc, #16]	; (401938 <vsync_handler+0x1c>)
  401928:	2201      	movs	r2, #1
  40192a:	601a      	str	r2, [r3, #0]
}
  40192c:	bf00      	nop
  40192e:	370c      	adds	r7, #12
  401930:	46bd      	mov	sp, r7
  401932:	bc80      	pop	{r7}
  401934:	4770      	bx	lr
  401936:	bf00      	nop
  401938:	20000a5c 	.word	0x20000a5c

0040193c <pio_capture_init>:

void pio_capture_init(Pio *p_pio, uint32_t ul_id)
{
  40193c:	b580      	push	{r7, lr}
  40193e:	b082      	sub	sp, #8
  401940:	af00      	add	r7, sp, #0
  401942:	6078      	str	r0, [r7, #4]
  401944:	6039      	str	r1, [r7, #0]
	//Enable periphral clock 
	pmc_enable_periph_clk(ul_id);
  401946:	6838      	ldr	r0, [r7, #0]
  401948:	4b1a      	ldr	r3, [pc, #104]	; (4019b4 <pio_capture_init+0x78>)
  40194a:	4798      	blx	r3

	// Disable pio capture 
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_PCEN);
  40194c:	687b      	ldr	r3, [r7, #4]
  40194e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401952:	f023 0201 	bic.w	r2, r3, #1
  401956:	687b      	ldr	r3, [r7, #4]
  401958:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	// Disable rxbuff interrupt 
	p_pio->PIO_PCIDR |= PIO_PCIDR_RXBUFF;
  40195c:	687b      	ldr	r3, [r7, #4]
  40195e:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
  401962:	f043 0208 	orr.w	r2, r3, #8
  401966:	687b      	ldr	r3, [r7, #4]
  401968:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

	// 32idth
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_DSIZE_Msk);
  40196c:	687b      	ldr	r3, [r7, #4]
  40196e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401972:	f023 0230 	bic.w	r2, r3, #48	; 0x30
  401976:	687b      	ldr	r3, [r7, #4]
  401978:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR |= PIO_PCMR_DSIZE_WORD;
  40197c:	687b      	ldr	r3, [r7, #4]
  40197e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401982:	f043 0220 	orr.w	r2, r3, #32
  401986:	687b      	ldr	r3, [r7, #4]
  401988:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	// Only HSYNC and VSYNC enabled 
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_ALWYS);
  40198c:	687b      	ldr	r3, [r7, #4]
  40198e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401992:	f423 7200 	bic.w	r2, r3, #512	; 0x200
  401996:	687b      	ldr	r3, [r7, #4]
  401998:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_HALFS);
  40199c:	687b      	ldr	r3, [r7, #4]
  40199e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4019a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
  4019a6:	687b      	ldr	r3, [r7, #4]
  4019a8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

}
  4019ac:	bf00      	nop
  4019ae:	3708      	adds	r7, #8
  4019b0:	46bd      	mov	sp, r7
  4019b2:	bd80      	pop	{r7, pc}
  4019b4:	004016d5 	.word	0x004016d5

004019b8 <pio_capture_to_buffer>:

static uint8_t pio_capture_to_buffer(Pio *p_pio, uint8_t *uc_buf,uint32_t ul_size)
{
  4019b8:	b480      	push	{r7}
  4019ba:	b085      	sub	sp, #20
  4019bc:	af00      	add	r7, sp, #0
  4019be:	60f8      	str	r0, [r7, #12]
  4019c0:	60b9      	str	r1, [r7, #8]
  4019c2:	607a      	str	r2, [r7, #4]
	//Check if the first PDC bank is free 
	if ((p_pio->PIO_RCR == 0) && (p_pio->PIO_RNCR == 0)) {
  4019c4:	68fb      	ldr	r3, [r7, #12]
  4019c6:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
  4019ca:	2b00      	cmp	r3, #0
  4019cc:	d112      	bne.n	4019f4 <pio_capture_to_buffer+0x3c>
  4019ce:	68fb      	ldr	r3, [r7, #12]
  4019d0:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
  4019d4:	2b00      	cmp	r3, #0
  4019d6:	d10d      	bne.n	4019f4 <pio_capture_to_buffer+0x3c>
		p_pio->PIO_RPR = (uint32_t)uc_buf;
  4019d8:	68ba      	ldr	r2, [r7, #8]
  4019da:	68fb      	ldr	r3, [r7, #12]
  4019dc:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
		p_pio->PIO_RCR = ul_size;
  4019e0:	68fb      	ldr	r3, [r7, #12]
  4019e2:	687a      	ldr	r2, [r7, #4]
  4019e4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
		p_pio->PIO_PTCR = PIO_PTCR_RXTEN;
  4019e8:	68fb      	ldr	r3, [r7, #12]
  4019ea:	2201      	movs	r2, #1
  4019ec:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		return 1;
  4019f0:	2301      	movs	r3, #1
  4019f2:	e00f      	b.n	401a14 <pio_capture_to_buffer+0x5c>
		} else if (p_pio->PIO_RNCR == 0) {
  4019f4:	68fb      	ldr	r3, [r7, #12]
  4019f6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
  4019fa:	2b00      	cmp	r3, #0
  4019fc:	d109      	bne.n	401a12 <pio_capture_to_buffer+0x5a>
		p_pio->PIO_RNPR = (uint32_t)uc_buf;
  4019fe:	68ba      	ldr	r2, [r7, #8]
  401a00:	68fb      	ldr	r3, [r7, #12]
  401a02:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
		p_pio->PIO_RNCR = ul_size;
  401a06:	68fb      	ldr	r3, [r7, #12]
  401a08:	687a      	ldr	r2, [r7, #4]
  401a0a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
		return 1;
  401a0e:	2301      	movs	r3, #1
  401a10:	e000      	b.n	401a14 <pio_capture_to_buffer+0x5c>
		} else {
		return 0;
  401a12:	2300      	movs	r3, #0
	}
}
  401a14:	4618      	mov	r0, r3
  401a16:	3714      	adds	r7, #20
  401a18:	46bd      	mov	sp, r7
  401a1a:	bc80      	pop	{r7}
  401a1c:	4770      	bx	lr
	...

00401a20 <configure_twi>:

void configure_twi(void)
{   
  401a20:	b580      	push	{r7, lr}
  401a22:	b084      	sub	sp, #16
  401a24:	af00      	add	r7, sp, #0
	twi_options_t opt;
	// Enable TWI peripheral 
	pmc_enable_periph_clk(ID_BOARD_TWI);
  401a26:	2013      	movs	r0, #19
  401a28:	4b0e      	ldr	r3, [pc, #56]	; (401a64 <configure_twi+0x44>)
  401a2a:	4798      	blx	r3

	// Init TWI peripheral 
	opt.master_clk = sysclk_get_cpu_hz();
  401a2c:	4b0e      	ldr	r3, [pc, #56]	; (401a68 <configure_twi+0x48>)
  401a2e:	4798      	blx	r3
  401a30:	4603      	mov	r3, r0
  401a32:	607b      	str	r3, [r7, #4]
	opt.speed      = TWI_CLK;
  401a34:	4b0d      	ldr	r3, [pc, #52]	; (401a6c <configure_twi+0x4c>)
  401a36:	60bb      	str	r3, [r7, #8]
	twi_master_init(BOARD_TWI, &opt);
  401a38:	1d3b      	adds	r3, r7, #4
  401a3a:	4619      	mov	r1, r3
  401a3c:	480c      	ldr	r0, [pc, #48]	; (401a70 <configure_twi+0x50>)
  401a3e:	4b0d      	ldr	r3, [pc, #52]	; (401a74 <configure_twi+0x54>)
  401a40:	4798      	blx	r3

	// Configure TWI interrupts 
	NVIC_DisableIRQ(BOARD_TWI_IRQn);
  401a42:	2013      	movs	r0, #19
  401a44:	4b0c      	ldr	r3, [pc, #48]	; (401a78 <configure_twi+0x58>)
  401a46:	4798      	blx	r3
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
  401a48:	2013      	movs	r0, #19
  401a4a:	4b0c      	ldr	r3, [pc, #48]	; (401a7c <configure_twi+0x5c>)
  401a4c:	4798      	blx	r3
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
  401a4e:	2100      	movs	r1, #0
  401a50:	2013      	movs	r0, #19
  401a52:	4b0b      	ldr	r3, [pc, #44]	; (401a80 <configure_twi+0x60>)
  401a54:	4798      	blx	r3
	NVIC_EnableIRQ(BOARD_TWI_IRQn);
  401a56:	2013      	movs	r0, #19
  401a58:	4b0a      	ldr	r3, [pc, #40]	; (401a84 <configure_twi+0x64>)
  401a5a:	4798      	blx	r3
}
  401a5c:	bf00      	nop
  401a5e:	3710      	adds	r7, #16
  401a60:	46bd      	mov	sp, r7
  401a62:	bd80      	pop	{r7, pc}
  401a64:	004016d5 	.word	0x004016d5
  401a68:	004018d1 	.word	0x004018d1
  401a6c:	00061a80 	.word	0x00061a80
  401a70:	40018000 	.word	0x40018000
  401a74:	00400469 	.word	0x00400469
  401a78:	00401785 	.word	0x00401785
  401a7c:	004017b9 	.word	0x004017b9
  401a80:	004017ed 	.word	0x004017ed
  401a84:	00401755 	.word	0x00401755

00401a88 <init_camera>:

void init_camera(void)
{
  401a88:	b580      	push	{r7, lr}
  401a8a:	af00      	add	r7, sp, #0
    pmc_enable_pllbck(7,0x1,1);
  401a8c:	2201      	movs	r2, #1
  401a8e:	2101      	movs	r1, #1
  401a90:	2007      	movs	r0, #7
  401a92:	4b0d      	ldr	r3, [pc, #52]	; (401ac8 <init_camera+0x40>)
  401a94:	4798      	blx	r3
	// Init Vsync handler
	init_vsync_interrupts();
  401a96:	4b0d      	ldr	r3, [pc, #52]	; (401acc <init_camera+0x44>)
  401a98:	4798      	blx	r3

	// Init PIO capture
	pio_capture_init(OV_DATA_BUS_PIO, OV_DATA_BUS_ID);
  401a9a:	210b      	movs	r1, #11
  401a9c:	480c      	ldr	r0, [pc, #48]	; (401ad0 <init_camera+0x48>)
  401a9e:	4b0d      	ldr	r3, [pc, #52]	; (401ad4 <init_camera+0x4c>)
  401aa0:	4798      	blx	r3

	

	// Init PCK0 to work at 24 Mhz  96/4=24 Mhz 
	PMC->PMC_PCK[1] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLB_CLK);
  401aa2:	4b0d      	ldr	r3, [pc, #52]	; (401ad8 <init_camera+0x50>)
  401aa4:	2223      	movs	r2, #35	; 0x23
  401aa6:	645a      	str	r2, [r3, #68]	; 0x44
	PMC->PMC_SCER = PMC_SCER_PCK1;
  401aa8:	4b0b      	ldr	r3, [pc, #44]	; (401ad8 <init_camera+0x50>)
  401aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
  401aae:	601a      	str	r2, [r3, #0]
	while (!(PMC->PMC_SCSR & PMC_SCSR_PCK1)) {}
  401ab0:	bf00      	nop
  401ab2:	4b09      	ldr	r3, [pc, #36]	; (401ad8 <init_camera+0x50>)
  401ab4:	689b      	ldr	r3, [r3, #8]
  401ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
  401aba:	2b00      	cmp	r3, #0
  401abc:	d0f9      	beq.n	401ab2 <init_camera+0x2a>
    configure_twi();
  401abe:	4b07      	ldr	r3, [pc, #28]	; (401adc <init_camera+0x54>)
  401ac0:	4798      	blx	r3
}
  401ac2:	bf00      	nop
  401ac4:	bd80      	pop	{r7, pc}
  401ac6:	bf00      	nop
  401ac8:	00401655 	.word	0x00401655
  401acc:	004018e5 	.word	0x004018e5
  401ad0:	400e0e00 	.word	0x400e0e00
  401ad4:	0040193d 	.word	0x0040193d
  401ad8:	400e0400 	.word	0x400e0400
  401adc:	00401a21 	.word	0x00401a21

00401ae0 <configure_camera>:

void configure_camera(void)
{
  401ae0:	b580      	push	{r7, lr}
  401ae2:	af00      	add	r7, sp, #0
	 init_camera();
  401ae4:	4b0d      	ldr	r3, [pc, #52]	; (401b1c <configure_camera+0x3c>)
  401ae6:	4798      	blx	r3
	// ov2640 Initialization 
	while (ov_init(BOARD_TWI) == 1) {
  401ae8:	bf00      	nop
  401aea:	480d      	ldr	r0, [pc, #52]	; (401b20 <configure_camera+0x40>)
  401aec:	4b0d      	ldr	r3, [pc, #52]	; (401b24 <configure_camera+0x44>)
  401aee:	4798      	blx	r3
  401af0:	4603      	mov	r3, r0
  401af2:	2b01      	cmp	r3, #1
  401af4:	d0f9      	beq.n	401aea <configure_camera+0xa>
	}
	
	// ov2640 configuration 
	ov_configure(BOARD_TWI, JPEG_INIT);
  401af6:	2100      	movs	r1, #0
  401af8:	4809      	ldr	r0, [pc, #36]	; (401b20 <configure_camera+0x40>)
  401afa:	4b0b      	ldr	r3, [pc, #44]	; (401b28 <configure_camera+0x48>)
  401afc:	4798      	blx	r3
	ov_configure(BOARD_TWI, JPEG);
  401afe:	2102      	movs	r1, #2
  401b00:	4807      	ldr	r0, [pc, #28]	; (401b20 <configure_camera+0x40>)
  401b02:	4b09      	ldr	r3, [pc, #36]	; (401b28 <configure_camera+0x48>)
  401b04:	4798      	blx	r3
	ov_configure(BOARD_TWI, YUV422);
  401b06:	2101      	movs	r1, #1
  401b08:	4805      	ldr	r0, [pc, #20]	; (401b20 <configure_camera+0x40>)
  401b0a:	4b07      	ldr	r3, [pc, #28]	; (401b28 <configure_camera+0x48>)
  401b0c:	4798      	blx	r3
	ov_configure(BOARD_TWI, JPEG_640x480);
  401b0e:	2104      	movs	r1, #4
  401b10:	4803      	ldr	r0, [pc, #12]	; (401b20 <configure_camera+0x40>)
  401b12:	4b05      	ldr	r3, [pc, #20]	; (401b28 <configure_camera+0x48>)
  401b14:	4798      	blx	r3
}
  401b16:	bf00      	nop
  401b18:	bd80      	pop	{r7, pc}
  401b1a:	bf00      	nop
  401b1c:	00401a89 	.word	0x00401a89
  401b20:	40018000 	.word	0x40018000
  401b24:	00401fc5 	.word	0x00401fc5
  401b28:	00402051 	.word	0x00402051

00401b2c <start_capture>:

 uint8_t start_capture(void)
{
  401b2c:	b580      	push	{r7, lr}
  401b2e:	af00      	add	r7, sp, #0
	// Enable vsync interrupt*
	pio_enable_interrupt(OV_VSYNC_PIO, OV_VSYNC_MASK);
  401b30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401b34:	4815      	ldr	r0, [pc, #84]	; (401b8c <start_capture+0x60>)
  401b36:	4b16      	ldr	r3, [pc, #88]	; (401b90 <start_capture+0x64>)
  401b38:	4798      	blx	r3

	/* Capture acquisition will start on rising edge of Vsync signal.
	 * So wait g_vsync_flag = 1 before start process
	 */
	while (!vsync_rising_edge_flag) {}
  401b3a:	bf00      	nop
  401b3c:	4b15      	ldr	r3, [pc, #84]	; (401b94 <start_capture+0x68>)
  401b3e:	681b      	ldr	r3, [r3, #0]
  401b40:	2b00      	cmp	r3, #0
  401b42:	d0fb      	beq.n	401b3c <start_capture+0x10>

	// Disable vsync interrupt
	pio_disable_interrupt(OV_VSYNC_PIO, OV_VSYNC_MASK);
  401b44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401b48:	4810      	ldr	r0, [pc, #64]	; (401b8c <start_capture+0x60>)
  401b4a:	4b13      	ldr	r3, [pc, #76]	; (401b98 <start_capture+0x6c>)
  401b4c:	4798      	blx	r3

	// Enable pio capture
	pio_capture_enable(OV_DATA_BUS_PIO);
  401b4e:	480f      	ldr	r0, [pc, #60]	; (401b8c <start_capture+0x60>)
  401b50:	4b12      	ldr	r3, [pc, #72]	; (401b9c <start_capture+0x70>)
  401b52:	4798      	blx	r3

	pio_capture_to_buffer(OV_DATA_BUS_PIO,image_dest_buffer_ptr,CAM_BUFFER/4);
  401b54:	f246 12a8 	movw	r2, #25000	; 0x61a8
  401b58:	4911      	ldr	r1, [pc, #68]	; (401ba0 <start_capture+0x74>)
  401b5a:	480c      	ldr	r0, [pc, #48]	; (401b8c <start_capture+0x60>)
  401b5c:	4b11      	ldr	r3, [pc, #68]	; (401ba4 <start_capture+0x78>)
  401b5e:	4798      	blx	r3
	
	// Wait end of capture
	while (!((OV_DATA_BUS_PIO->PIO_PCISR & PIO_PCIMR_RXBUFF) ==  PIO_PCIMR_RXBUFF)) {}
  401b60:	bf00      	nop
  401b62:	4b0a      	ldr	r3, [pc, #40]	; (401b8c <start_capture+0x60>)
  401b64:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
  401b68:	f003 0308 	and.w	r3, r3, #8
  401b6c:	2b08      	cmp	r3, #8
  401b6e:	d1f8      	bne.n	401b62 <start_capture+0x36>

	// Disable pio capture
	pio_capture_disable(OV_DATA_BUS_PIO);
  401b70:	4806      	ldr	r0, [pc, #24]	; (401b8c <start_capture+0x60>)
  401b72:	4b0d      	ldr	r3, [pc, #52]	; (401ba8 <start_capture+0x7c>)
  401b74:	4798      	blx	r3

	// Reset vsync flag
	vsync_rising_edge_flag = false;
  401b76:	4b07      	ldr	r3, [pc, #28]	; (401b94 <start_capture+0x68>)
  401b78:	2200      	movs	r2, #0
  401b7a:	601a      	str	r2, [r3, #0]
	
	image_length = find_image_len();
  401b7c:	4b0b      	ldr	r3, [pc, #44]	; (401bac <start_capture+0x80>)
  401b7e:	4798      	blx	r3
  401b80:	4602      	mov	r2, r0
  401b82:	4b0b      	ldr	r3, [pc, #44]	; (401bb0 <start_capture+0x84>)
  401b84:	601a      	str	r2, [r3, #0]
}
  401b86:	bf00      	nop
  401b88:	4618      	mov	r0, r3
  401b8a:	bd80      	pop	{r7, pc}
  401b8c:	400e0e00 	.word	0x400e0e00
  401b90:	004011ab 	.word	0x004011ab
  401b94:	20000a5c 	.word	0x20000a5c
  401b98:	004011c5 	.word	0x004011c5
  401b9c:	004013e1 	.word	0x004013e1
  401ba0:	20000a60 	.word	0x20000a60
  401ba4:	004019b9 	.word	0x004019b9
  401ba8:	0040140d 	.word	0x0040140d
  401bac:	00401bb5 	.word	0x00401bb5
  401bb0:	20000a58 	.word	0x20000a58

00401bb4 <find_image_len>:

uint32_t find_image_len(void)   
{
  401bb4:	b480      	push	{r7}
  401bb6:	b085      	sub	sp, #20
  401bb8:	af00      	add	r7, sp, #0
	//The first loop is to find the starting address of the JPEG (0xFFD8)
	for(int i=0;i<CAM_BUFFER; i++){
  401bba:	2300      	movs	r3, #0
  401bbc:	60fb      	str	r3, [r7, #12]
  401bbe:	e017      	b.n	401bf0 <find_image_len+0x3c>
		if((image_dest_buffer_ptr[i]==0xFF) && (image_dest_buffer_ptr[i+1]==0xD8)){
  401bc0:	4a26      	ldr	r2, [pc, #152]	; (401c5c <find_image_len+0xa8>)
  401bc2:	68fb      	ldr	r3, [r7, #12]
  401bc4:	4413      	add	r3, r2
  401bc6:	781b      	ldrb	r3, [r3, #0]
  401bc8:	b2db      	uxtb	r3, r3
  401bca:	2bff      	cmp	r3, #255	; 0xff
  401bcc:	d10a      	bne.n	401be4 <find_image_len+0x30>
  401bce:	68fb      	ldr	r3, [r7, #12]
  401bd0:	3301      	adds	r3, #1
  401bd2:	4a22      	ldr	r2, [pc, #136]	; (401c5c <find_image_len+0xa8>)
  401bd4:	5cd3      	ldrb	r3, [r2, r3]
  401bd6:	b2db      	uxtb	r3, r3
  401bd8:	2bd8      	cmp	r3, #216	; 0xd8
  401bda:	d103      	bne.n	401be4 <find_image_len+0x30>
			start_buff = i;
  401bdc:	68fb      	ldr	r3, [r7, #12]
  401bde:	4a20      	ldr	r2, [pc, #128]	; (401c60 <find_image_len+0xac>)
  401be0:	6013      	str	r3, [r2, #0]
			break;
  401be2:	e009      	b.n	401bf8 <find_image_len+0x44>
		}
		else
		image_length = 0;
  401be4:	4b1f      	ldr	r3, [pc, #124]	; (401c64 <find_image_len+0xb0>)
  401be6:	2200      	movs	r2, #0
  401be8:	601a      	str	r2, [r3, #0]
	for(int i=0;i<CAM_BUFFER; i++){
  401bea:	68fb      	ldr	r3, [r7, #12]
  401bec:	3301      	adds	r3, #1
  401bee:	60fb      	str	r3, [r7, #12]
  401bf0:	68fb      	ldr	r3, [r7, #12]
  401bf2:	4a1d      	ldr	r2, [pc, #116]	; (401c68 <find_image_len+0xb4>)
  401bf4:	4293      	cmp	r3, r2
  401bf6:	dde3      	ble.n	401bc0 <find_image_len+0xc>
	}
	
	// Once the start of the JPEG image has been found, the end of the image is found (0xFFD9)
	int j=0;
  401bf8:	2300      	movs	r3, #0
  401bfa:	60bb      	str	r3, [r7, #8]
	for (int i=start_buff;i<CAM_BUFFER;i++){
  401bfc:	4b18      	ldr	r3, [pc, #96]	; (401c60 <find_image_len+0xac>)
  401bfe:	681b      	ldr	r3, [r3, #0]
  401c00:	607b      	str	r3, [r7, #4]
  401c02:	e019      	b.n	401c38 <find_image_len+0x84>
		if((image_dest_buffer_ptr[i]==0xFF) && (image_dest_buffer_ptr[i+1]==0xD9)){
  401c04:	4a15      	ldr	r2, [pc, #84]	; (401c5c <find_image_len+0xa8>)
  401c06:	687b      	ldr	r3, [r7, #4]
  401c08:	4413      	add	r3, r2
  401c0a:	781b      	ldrb	r3, [r3, #0]
  401c0c:	b2db      	uxtb	r3, r3
  401c0e:	2bff      	cmp	r3, #255	; 0xff
  401c10:	d10c      	bne.n	401c2c <find_image_len+0x78>
  401c12:	687b      	ldr	r3, [r7, #4]
  401c14:	3301      	adds	r3, #1
  401c16:	4a11      	ldr	r2, [pc, #68]	; (401c5c <find_image_len+0xa8>)
  401c18:	5cd3      	ldrb	r3, [r2, r3]
  401c1a:	b2db      	uxtb	r3, r3
  401c1c:	2bd9      	cmp	r3, #217	; 0xd9
  401c1e:	d105      	bne.n	401c2c <find_image_len+0x78>
			image_length = j+1 ;
  401c20:	68bb      	ldr	r3, [r7, #8]
  401c22:	3301      	adds	r3, #1
  401c24:	461a      	mov	r2, r3
  401c26:	4b0f      	ldr	r3, [pc, #60]	; (401c64 <find_image_len+0xb0>)
  401c28:	601a      	str	r2, [r3, #0]
			break;
  401c2a:	e009      	b.n	401c40 <find_image_len+0x8c>
		}
		j++;
  401c2c:	68bb      	ldr	r3, [r7, #8]
  401c2e:	3301      	adds	r3, #1
  401c30:	60bb      	str	r3, [r7, #8]
	for (int i=start_buff;i<CAM_BUFFER;i++){
  401c32:	687b      	ldr	r3, [r7, #4]
  401c34:	3301      	adds	r3, #1
  401c36:	607b      	str	r3, [r7, #4]
  401c38:	687b      	ldr	r3, [r7, #4]
  401c3a:	4a0b      	ldr	r2, [pc, #44]	; (401c68 <find_image_len+0xb4>)
  401c3c:	4293      	cmp	r3, r2
  401c3e:	dde1      	ble.n	401c04 <find_image_len+0x50>
	}
	if(image_length==0)
  401c40:	4b08      	ldr	r3, [pc, #32]	; (401c64 <find_image_len+0xb0>)
  401c42:	681b      	ldr	r3, [r3, #0]
  401c44:	2b00      	cmp	r3, #0
  401c46:	d101      	bne.n	401c4c <find_image_len+0x98>
		return 0;
  401c48:	2300      	movs	r3, #0
  401c4a:	e001      	b.n	401c50 <find_image_len+0x9c>
	else
		return image_length;
  401c4c:	4b05      	ldr	r3, [pc, #20]	; (401c64 <find_image_len+0xb0>)
  401c4e:	681b      	ldr	r3, [r3, #0]
  401c50:	4618      	mov	r0, r3
  401c52:	3714      	adds	r7, #20
  401c54:	46bd      	mov	sp, r7
  401c56:	bc80      	pop	{r7}
  401c58:	4770      	bx	lr
  401c5a:	bf00      	nop
  401c5c:	20000a60 	.word	0x20000a60
  401c60:	20000a54 	.word	0x20000a54
  401c64:	20000a58 	.word	0x20000a58
  401c68:	0001869f 	.word	0x0001869f

00401c6c <osc_get_rate>:
{
  401c6c:	b480      	push	{r7}
  401c6e:	b083      	sub	sp, #12
  401c70:	af00      	add	r7, sp, #0
  401c72:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401c74:	687b      	ldr	r3, [r7, #4]
  401c76:	2b07      	cmp	r3, #7
  401c78:	d825      	bhi.n	401cc6 <osc_get_rate+0x5a>
  401c7a:	a201      	add	r2, pc, #4	; (adr r2, 401c80 <osc_get_rate+0x14>)
  401c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401c80:	00401ca1 	.word	0x00401ca1
  401c84:	00401ca7 	.word	0x00401ca7
  401c88:	00401cad 	.word	0x00401cad
  401c8c:	00401cb3 	.word	0x00401cb3
  401c90:	00401cb7 	.word	0x00401cb7
  401c94:	00401cbb 	.word	0x00401cbb
  401c98:	00401cbf 	.word	0x00401cbf
  401c9c:	00401cc3 	.word	0x00401cc3
		return OSC_SLCK_32K_RC_HZ;
  401ca0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401ca4:	e010      	b.n	401cc8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401caa:	e00d      	b.n	401cc8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401cac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401cb0:	e00a      	b.n	401cc8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401cb2:	4b08      	ldr	r3, [pc, #32]	; (401cd4 <osc_get_rate+0x68>)
  401cb4:	e008      	b.n	401cc8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401cb6:	4b08      	ldr	r3, [pc, #32]	; (401cd8 <osc_get_rate+0x6c>)
  401cb8:	e006      	b.n	401cc8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401cba:	4b08      	ldr	r3, [pc, #32]	; (401cdc <osc_get_rate+0x70>)
  401cbc:	e004      	b.n	401cc8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401cbe:	4b07      	ldr	r3, [pc, #28]	; (401cdc <osc_get_rate+0x70>)
  401cc0:	e002      	b.n	401cc8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401cc2:	4b06      	ldr	r3, [pc, #24]	; (401cdc <osc_get_rate+0x70>)
  401cc4:	e000      	b.n	401cc8 <osc_get_rate+0x5c>
	return 0;
  401cc6:	2300      	movs	r3, #0
}
  401cc8:	4618      	mov	r0, r3
  401cca:	370c      	adds	r7, #12
  401ccc:	46bd      	mov	sp, r7
  401cce:	bc80      	pop	{r7}
  401cd0:	4770      	bx	lr
  401cd2:	bf00      	nop
  401cd4:	003d0900 	.word	0x003d0900
  401cd8:	007a1200 	.word	0x007a1200
  401cdc:	00b71b00 	.word	0x00b71b00

00401ce0 <sysclk_get_main_hz>:
{
  401ce0:	b580      	push	{r7, lr}
  401ce2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401ce4:	2006      	movs	r0, #6
  401ce6:	4b04      	ldr	r3, [pc, #16]	; (401cf8 <sysclk_get_main_hz+0x18>)
  401ce8:	4798      	blx	r3
  401cea:	4602      	mov	r2, r0
  401cec:	4613      	mov	r3, r2
  401cee:	009b      	lsls	r3, r3, #2
  401cf0:	4413      	add	r3, r2
  401cf2:	009b      	lsls	r3, r3, #2
}
  401cf4:	4618      	mov	r0, r3
  401cf6:	bd80      	pop	{r7, pc}
  401cf8:	00401c6d 	.word	0x00401c6d

00401cfc <sysclk_get_cpu_hz>:
{
  401cfc:	b580      	push	{r7, lr}
  401cfe:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401d00:	4b02      	ldr	r3, [pc, #8]	; (401d0c <sysclk_get_cpu_hz+0x10>)
  401d02:	4798      	blx	r3
  401d04:	4603      	mov	r3, r0
  401d06:	085b      	lsrs	r3, r3, #1
}
  401d08:	4618      	mov	r0, r3
  401d0a:	bd80      	pop	{r7, pc}
  401d0c:	00401ce1 	.word	0x00401ce1

00401d10 <ov_id>:
 *
 * \param p_twi TWI interface.
 * \return PID and VER.
 */
static uint32_t ov_id(Twi* const p_twi)
{
  401d10:	b580      	push	{r7, lr}
  401d12:	b08e      	sub	sp, #56	; 0x38
  401d14:	af00      	add	r7, sp, #0
  401d16:	6078      	str	r0, [r7, #4]
	twi_packet_t packet_pid;
	twi_packet_t packet_ver;
	uint32_t ul_id = 0;
  401d18:	2300      	movs	r3, #0
  401d1a:	60fb      	str	r3, [r7, #12]
	uint32_t ul_ver = 0;
  401d1c:	2300      	movs	r3, #0
  401d1e:	60bb      	str	r3, [r7, #8]

	/* OV_PID */
	packet_pid.chip = OV_I2C_SENSOR_ADDRESS;
  401d20:	2330      	movs	r3, #48	; 0x30
  401d22:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	packet_pid.addr[0] = OV2640_PIDH;
  401d26:	230a      	movs	r3, #10
  401d28:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	packet_pid.addr_length = 1;
  401d2c:	2301      	movs	r3, #1
  401d2e:	62bb      	str	r3, [r7, #40]	; 0x28
	packet_pid.buffer = &ul_id;
  401d30:	f107 030c 	add.w	r3, r7, #12
  401d34:	62fb      	str	r3, [r7, #44]	; 0x2c
	packet_pid.length = 1;
  401d36:	2301      	movs	r3, #1
  401d38:	633b      	str	r3, [r7, #48]	; 0x30

	ov_read_reg(p_twi, &packet_pid);
  401d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401d3e:	4619      	mov	r1, r3
  401d40:	6878      	ldr	r0, [r7, #4]
  401d42:	4b0e      	ldr	r3, [pc, #56]	; (401d7c <ov_id+0x6c>)
  401d44:	4798      	blx	r3

	/* OV_VER */
	packet_ver.chip = OV_I2C_SENSOR_ADDRESS;
  401d46:	2330      	movs	r3, #48	; 0x30
  401d48:	f887 3020 	strb.w	r3, [r7, #32]
	packet_ver.addr[0] = OV2640_PIDL;
  401d4c:	230b      	movs	r3, #11
  401d4e:	743b      	strb	r3, [r7, #16]
	packet_ver.addr_length = 1;
  401d50:	2301      	movs	r3, #1
  401d52:	617b      	str	r3, [r7, #20]
	packet_ver.buffer = &ul_ver;
  401d54:	f107 0308 	add.w	r3, r7, #8
  401d58:	61bb      	str	r3, [r7, #24]
	packet_ver.length = 1;
  401d5a:	2301      	movs	r3, #1
  401d5c:	61fb      	str	r3, [r7, #28]

	ov_read_reg(p_twi, &packet_ver);
  401d5e:	f107 0310 	add.w	r3, r7, #16
  401d62:	4619      	mov	r1, r3
  401d64:	6878      	ldr	r0, [r7, #4]
  401d66:	4b05      	ldr	r3, [pc, #20]	; (401d7c <ov_id+0x6c>)
  401d68:	4798      	blx	r3
	return ((uint32_t)(ul_id << 8) | ul_ver);
  401d6a:	68fb      	ldr	r3, [r7, #12]
  401d6c:	021a      	lsls	r2, r3, #8
  401d6e:	68bb      	ldr	r3, [r7, #8]
  401d70:	4313      	orrs	r3, r2
}
  401d72:	4618      	mov	r0, r3
  401d74:	3738      	adds	r7, #56	; 0x38
  401d76:	46bd      	mov	sp, r7
  401d78:	bd80      	pop	{r7, pc}
  401d7a:	bf00      	nop
  401d7c:	00401ea9 	.word	0x00401ea9

00401d80 <ov_manufacturer>:
 *
 * \param p_twi TWI interface.
 * \return 0 if the sensor is present, 1 otherwise.
 */
static uint32_t ov_manufacturer(Twi* const p_twi)
{
  401d80:	b580      	push	{r7, lr}
  401d82:	b08a      	sub	sp, #40	; 0x28
  401d84:	af00      	add	r7, sp, #0
  401d86:	6078      	str	r0, [r7, #4]
	twi_packet_t twi_packet;
	uint32_t ul_midh = 0;
  401d88:	2300      	movs	r3, #0
  401d8a:	613b      	str	r3, [r7, #16]
	uint32_t ul_midl = 0;
  401d8c:	2300      	movs	r3, #0
  401d8e:	60fb      	str	r3, [r7, #12]

	/* OV_MIDH */
	twi_packet.addr[0] = OV2640_MIDH;
  401d90:	231c      	movs	r3, #28
  401d92:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  401d94:	2301      	movs	r3, #1
  401d96:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  401d98:	2330      	movs	r3, #48	; 0x30
  401d9a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.buffer = &ul_midh;
  401d9e:	f107 0310 	add.w	r3, r7, #16
  401da2:	61fb      	str	r3, [r7, #28]
	twi_packet.length = 1;
  401da4:	2301      	movs	r3, #1
  401da6:	623b      	str	r3, [r7, #32]

	ov_read_reg(p_twi, &twi_packet);
  401da8:	f107 0314 	add.w	r3, r7, #20
  401dac:	4619      	mov	r1, r3
  401dae:	6878      	ldr	r0, [r7, #4]
  401db0:	4b10      	ldr	r3, [pc, #64]	; (401df4 <ov_manufacturer+0x74>)
  401db2:	4798      	blx	r3

	/* OV_MIDL */
	twi_packet.addr[0] = OV2640_MIDL;
  401db4:	231d      	movs	r3, #29
  401db6:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  401db8:	2301      	movs	r3, #1
  401dba:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  401dbc:	2330      	movs	r3, #48	; 0x30
  401dbe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.buffer = &ul_midl;
  401dc2:	f107 030c 	add.w	r3, r7, #12
  401dc6:	61fb      	str	r3, [r7, #28]
	twi_packet.length = 1;
  401dc8:	2301      	movs	r3, #1
  401dca:	623b      	str	r3, [r7, #32]

	ov_read_reg(p_twi, &twi_packet);
  401dcc:	f107 0314 	add.w	r3, r7, #20
  401dd0:	4619      	mov	r1, r3
  401dd2:	6878      	ldr	r0, [r7, #4]
  401dd4:	4b07      	ldr	r3, [pc, #28]	; (401df4 <ov_manufacturer+0x74>)
  401dd6:	4798      	blx	r3

	if ((ul_midh == OV2640_MIDH_DEFAULT) && (ul_midl == OV2640_MIDL_DEFAULT)) {
  401dd8:	693b      	ldr	r3, [r7, #16]
  401dda:	2b7f      	cmp	r3, #127	; 0x7f
  401ddc:	d104      	bne.n	401de8 <ov_manufacturer+0x68>
  401dde:	68fb      	ldr	r3, [r7, #12]
  401de0:	2ba2      	cmp	r3, #162	; 0xa2
  401de2:	d101      	bne.n	401de8 <ov_manufacturer+0x68>
		return 0;
  401de4:	2300      	movs	r3, #0
  401de6:	e000      	b.n	401dea <ov_manufacturer+0x6a>
	}

	return 1;
  401de8:	2301      	movs	r3, #1
}
  401dea:	4618      	mov	r0, r3
  401dec:	3728      	adds	r7, #40	; 0x28
  401dee:	46bd      	mov	sp, r7
  401df0:	bd80      	pop	{r7, pc}
  401df2:	bf00      	nop
  401df4:	00401ea9 	.word	0x00401ea9

00401df8 <ov_test_write>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
static uint32_t ov_test_write(Twi* const p_twi)
{
  401df8:	b580      	push	{r7, lr}
  401dfa:	b08a      	sub	sp, #40	; 0x28
  401dfc:	af00      	add	r7, sp, #0
  401dfe:	6078      	str	r0, [r7, #4]
	twi_packet_t twi_packet;
	uint32_t ul_value = 0;
  401e00:	2300      	movs	r3, #0
  401e02:	613b      	str	r3, [r7, #16]
	uint32_t ul_oldvalue = 0;
  401e04:	2300      	movs	r3, #0
  401e06:	60fb      	str	r3, [r7, #12]
	uint32_t ul_entervalue = 0;
  401e08:	2300      	movs	r3, #0
  401e0a:	60bb      	str	r3, [r7, #8]

	/* OV_BLUE_GAIN */
	twi_packet.addr[0] = 0x01;
  401e0c:	2301      	movs	r3, #1
  401e0e:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  401e10:	2301      	movs	r3, #1
  401e12:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  401e14:	2330      	movs	r3, #48	; 0x30
  401e16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.length = 1;
  401e1a:	2301      	movs	r3, #1
  401e1c:	623b      	str	r3, [r7, #32]

	twi_packet.buffer = &ul_oldvalue;
  401e1e:	f107 030c 	add.w	r3, r7, #12
  401e22:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  401e24:	f107 0314 	add.w	r3, r7, #20
  401e28:	4619      	mov	r1, r3
  401e2a:	6878      	ldr	r0, [r7, #4]
  401e2c:	4b1c      	ldr	r3, [pc, #112]	; (401ea0 <ov_test_write+0xa8>)
  401e2e:	4798      	blx	r3

	ul_entervalue = 0xAD;
  401e30:	23ad      	movs	r3, #173	; 0xad
  401e32:	60bb      	str	r3, [r7, #8]
	twi_packet.buffer = &ul_entervalue;
  401e34:	f107 0308 	add.w	r3, r7, #8
  401e38:	61fb      	str	r3, [r7, #28]
	ov_write_reg(p_twi, &twi_packet);
  401e3a:	f107 0314 	add.w	r3, r7, #20
  401e3e:	4619      	mov	r1, r3
  401e40:	6878      	ldr	r0, [r7, #4]
  401e42:	4b18      	ldr	r3, [pc, #96]	; (401ea4 <ov_test_write+0xac>)
  401e44:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  401e46:	f107 0310 	add.w	r3, r7, #16
  401e4a:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  401e4c:	f107 0314 	add.w	r3, r7, #20
  401e50:	4619      	mov	r1, r3
  401e52:	6878      	ldr	r0, [r7, #4]
  401e54:	4b12      	ldr	r3, [pc, #72]	; (401ea0 <ov_test_write+0xa8>)
  401e56:	4798      	blx	r3

	if (ul_value != ul_entervalue) {
  401e58:	693a      	ldr	r2, [r7, #16]
  401e5a:	68bb      	ldr	r3, [r7, #8]
  401e5c:	429a      	cmp	r2, r3
  401e5e:	d001      	beq.n	401e64 <ov_test_write+0x6c>
		return 1;
  401e60:	2301      	movs	r3, #1
  401e62:	e018      	b.n	401e96 <ov_test_write+0x9e>
	}

	/* return old value */
	twi_packet.buffer = &ul_oldvalue;
  401e64:	f107 030c 	add.w	r3, r7, #12
  401e68:	61fb      	str	r3, [r7, #28]
	ov_write_reg(p_twi, &twi_packet);
  401e6a:	f107 0314 	add.w	r3, r7, #20
  401e6e:	4619      	mov	r1, r3
  401e70:	6878      	ldr	r0, [r7, #4]
  401e72:	4b0c      	ldr	r3, [pc, #48]	; (401ea4 <ov_test_write+0xac>)
  401e74:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  401e76:	f107 0310 	add.w	r3, r7, #16
  401e7a:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  401e7c:	f107 0314 	add.w	r3, r7, #20
  401e80:	4619      	mov	r1, r3
  401e82:	6878      	ldr	r0, [r7, #4]
  401e84:	4b06      	ldr	r3, [pc, #24]	; (401ea0 <ov_test_write+0xa8>)
  401e86:	4798      	blx	r3

	if (ul_value != ul_oldvalue) {
  401e88:	693a      	ldr	r2, [r7, #16]
  401e8a:	68fb      	ldr	r3, [r7, #12]
  401e8c:	429a      	cmp	r2, r3
  401e8e:	d001      	beq.n	401e94 <ov_test_write+0x9c>
		return 1;
  401e90:	2301      	movs	r3, #1
  401e92:	e000      	b.n	401e96 <ov_test_write+0x9e>
	}

	return 0;
  401e94:	2300      	movs	r3, #0
}
  401e96:	4618      	mov	r0, r3
  401e98:	3728      	adds	r7, #40	; 0x28
  401e9a:	46bd      	mov	sp, r7
  401e9c:	bd80      	pop	{r7, pc}
  401e9e:	bf00      	nop
  401ea0:	00401ea9 	.word	0x00401ea9
  401ea4:	00401ecd 	.word	0x00401ecd

00401ea8 <ov_read_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  401ea8:	b580      	push	{r7, lr}
  401eaa:	b084      	sub	sp, #16
  401eac:	af00      	add	r7, sp, #0
  401eae:	6078      	str	r0, [r7, #4]
  401eb0:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  401eb2:	6839      	ldr	r1, [r7, #0]
  401eb4:	6878      	ldr	r0, [r7, #4]
  401eb6:	4b04      	ldr	r3, [pc, #16]	; (401ec8 <ov_read_reg+0x20>)
  401eb8:	4798      	blx	r3
  401eba:	60f8      	str	r0, [r7, #12]

	return ul_status;
  401ebc:	68fb      	ldr	r3, [r7, #12]
}
  401ebe:	4618      	mov	r0, r3
  401ec0:	3710      	adds	r7, #16
  401ec2:	46bd      	mov	sp, r7
  401ec4:	bd80      	pop	{r7, pc}
  401ec6:	bf00      	nop
  401ec8:	0040061d 	.word	0x0040061d

00401ecc <ov_write_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  401ecc:	b580      	push	{r7, lr}
  401ece:	b084      	sub	sp, #16
  401ed0:	af00      	add	r7, sp, #0
  401ed2:	6078      	str	r0, [r7, #4]
  401ed4:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  401ed6:	6839      	ldr	r1, [r7, #0]
  401ed8:	6878      	ldr	r0, [r7, #4]
  401eda:	4b04      	ldr	r3, [pc, #16]	; (401eec <ov_write_reg+0x20>)
  401edc:	4798      	blx	r3
  401ede:	60f8      	str	r0, [r7, #12]

	return ul_status;
  401ee0:	68fb      	ldr	r3, [r7, #12]
}
  401ee2:	4618      	mov	r0, r3
  401ee4:	3710      	adds	r7, #16
  401ee6:	46bd      	mov	sp, r7
  401ee8:	bd80      	pop	{r7, pc}
  401eea:	bf00      	nop
  401eec:	00400729 	.word	0x00400729

00401ef0 <ov_write_regs>:
 * \param p_twi TWI interface.
 * \param p_reg_list Register list to be written.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_regs(Twi* const p_twi, const ov_reg *p_reg_list)
{
  401ef0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  401ef4:	b08a      	sub	sp, #40	; 0x28
  401ef6:	af00      	add	r7, sp, #0
  401ef8:	6078      	str	r0, [r7, #4]
  401efa:	6039      	str	r1, [r7, #0]
	uint32_t ul_err;
	uint32_t ul_size = 0;
  401efc:	2300      	movs	r3, #0
  401efe:	627b      	str	r3, [r7, #36]	; 0x24
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;
  401f00:	683b      	ldr	r3, [r7, #0]
  401f02:	623b      	str	r3, [r7, #32]

	while (!((p_next->reg == OV_REG_TERM) &&
  401f04:	e048      	b.n	401f98 <ov_write_regs+0xa8>
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
  401f06:	6a3b      	ldr	r3, [r7, #32]
  401f08:	781b      	ldrb	r3, [r3, #0]
  401f0a:	2bfe      	cmp	r3, #254	; 0xfe
  401f0c:	d126      	bne.n	401f5c <ov_write_regs+0x6c>
			delay_ms(5);
  401f0e:	4b29      	ldr	r3, [pc, #164]	; (401fb4 <ov_write_regs+0xc4>)
  401f10:	4798      	blx	r3
  401f12:	4603      	mov	r3, r0
  401f14:	4619      	mov	r1, r3
  401f16:	f04f 0200 	mov.w	r2, #0
  401f1a:	460b      	mov	r3, r1
  401f1c:	4614      	mov	r4, r2
  401f1e:	00a6      	lsls	r6, r4, #2
  401f20:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  401f24:	009d      	lsls	r5, r3, #2
  401f26:	462b      	mov	r3, r5
  401f28:	4634      	mov	r4, r6
  401f2a:	185b      	adds	r3, r3, r1
  401f2c:	eb44 0402 	adc.w	r4, r4, r2
  401f30:	f243 61af 	movw	r1, #13999	; 0x36af
  401f34:	f04f 0200 	mov.w	r2, #0
  401f38:	eb13 0b01 	adds.w	fp, r3, r1
  401f3c:	eb44 0c02 	adc.w	ip, r4, r2
  401f40:	4658      	mov	r0, fp
  401f42:	4661      	mov	r1, ip
  401f44:	4c1c      	ldr	r4, [pc, #112]	; (401fb8 <ov_write_regs+0xc8>)
  401f46:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401f4a:	f04f 0300 	mov.w	r3, #0
  401f4e:	47a0      	blx	r4
  401f50:	4603      	mov	r3, r0
  401f52:	460c      	mov	r4, r1
  401f54:	4618      	mov	r0, r3
  401f56:	4b19      	ldr	r3, [pc, #100]	; (401fbc <ov_write_regs+0xcc>)
  401f58:	4798      	blx	r3
  401f5a:	e01a      	b.n	401f92 <ov_write_regs+0xa2>
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
  401f5c:	6a3b      	ldr	r3, [r7, #32]
  401f5e:	781b      	ldrb	r3, [r3, #0]
  401f60:	723b      	strb	r3, [r7, #8]
			twi_packet_regs.addr_length = 1;
  401f62:	2301      	movs	r3, #1
  401f64:	60fb      	str	r3, [r7, #12]
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
  401f66:	2330      	movs	r3, #48	; 0x30
  401f68:	763b      	strb	r3, [r7, #24]
			twi_packet_regs.length = 1;
  401f6a:	2301      	movs	r3, #1
  401f6c:	617b      	str	r3, [r7, #20]
			twi_packet_regs.buffer = &(p_next->val);
  401f6e:	6a3b      	ldr	r3, [r7, #32]
  401f70:	3301      	adds	r3, #1
  401f72:	613b      	str	r3, [r7, #16]

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  401f74:	f107 0308 	add.w	r3, r7, #8
  401f78:	4619      	mov	r1, r3
  401f7a:	6878      	ldr	r0, [r7, #4]
  401f7c:	4b10      	ldr	r3, [pc, #64]	; (401fc0 <ov_write_regs+0xd0>)
  401f7e:	4798      	blx	r3
  401f80:	61f8      	str	r0, [r7, #28]
			ul_size++;
  401f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401f84:	3301      	adds	r3, #1
  401f86:	627b      	str	r3, [r7, #36]	; 0x24

			if (ul_err == TWI_BUSY) {
  401f88:	69fb      	ldr	r3, [r7, #28]
  401f8a:	2b08      	cmp	r3, #8
  401f8c:	d101      	bne.n	401f92 <ov_write_regs+0xa2>
				return ul_err;
  401f8e:	69fb      	ldr	r3, [r7, #28]
  401f90:	e00b      	b.n	401faa <ov_write_regs+0xba>
			}
		}

		p_next++;
  401f92:	6a3b      	ldr	r3, [r7, #32]
  401f94:	3302      	adds	r3, #2
  401f96:	623b      	str	r3, [r7, #32]
	while (!((p_next->reg == OV_REG_TERM) &&
  401f98:	6a3b      	ldr	r3, [r7, #32]
  401f9a:	781b      	ldrb	r3, [r3, #0]
  401f9c:	2bff      	cmp	r3, #255	; 0xff
  401f9e:	d1b2      	bne.n	401f06 <ov_write_regs+0x16>
			(p_next->val == OV_VAL_TERM))) {
  401fa0:	6a3b      	ldr	r3, [r7, #32]
  401fa2:	785b      	ldrb	r3, [r3, #1]
	while (!((p_next->reg == OV_REG_TERM) &&
  401fa4:	2bff      	cmp	r3, #255	; 0xff
  401fa6:	d1ae      	bne.n	401f06 <ov_write_regs+0x16>
	}
	return 0;
  401fa8:	2300      	movs	r3, #0
}
  401faa:	4618      	mov	r0, r3
  401fac:	3728      	adds	r7, #40	; 0x28
  401fae:	46bd      	mov	sp, r7
  401fb0:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  401fb4:	00401cfd 	.word	0x00401cfd
  401fb8:	004035f5 	.word	0x004035f5
  401fbc:	20000001 	.word	0x20000001
  401fc0:	00401ecd 	.word	0x00401ecd

00401fc4 <ov_init>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_init(Twi* const p_twi)
{
  401fc4:	b580      	push	{r7, lr}
  401fc6:	b08a      	sub	sp, #40	; 0x28
  401fc8:	af00      	add	r7, sp, #0
  401fca:	6078      	str	r0, [r7, #4]
	const uint8_t cont_reg_val = 1;
  401fcc:	2301      	movs	r3, #1
  401fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	twi_packet_t init_packet = {
  401fd2:	f107 030c 	add.w	r3, r7, #12
  401fd6:	2200      	movs	r2, #0
  401fd8:	601a      	str	r2, [r3, #0]
  401fda:	605a      	str	r2, [r3, #4]
  401fdc:	609a      	str	r2, [r3, #8]
  401fde:	60da      	str	r2, [r3, #12]
  401fe0:	611a      	str	r2, [r3, #16]
  401fe2:	23ff      	movs	r3, #255	; 0xff
  401fe4:	733b      	strb	r3, [r7, #12]
  401fe6:	2301      	movs	r3, #1
  401fe8:	613b      	str	r3, [r7, #16]
  401fea:	f107 0323 	add.w	r3, r7, #35	; 0x23
  401fee:	617b      	str	r3, [r7, #20]
  401ff0:	2301      	movs	r3, #1
  401ff2:	61bb      	str	r3, [r7, #24]
  401ff4:	2330      	movs	r3, #48	; 0x30
  401ff6:	773b      	strb	r3, [r7, #28]
		.addr_length  = 1, //sizeof (uint16_t),    // TWI slave memory address data size
		.chip         = OV_I2C_SENSOR_ADDRESS,      // TWI slave bus address
		.buffer       = &cont_reg_val,        // transfer data destination buffer
		.length       = 1                    // transfer data size (bytes)
	};
	ov_write_reg(p_twi, &init_packet);
  401ff8:	f107 030c 	add.w	r3, r7, #12
  401ffc:	4619      	mov	r1, r3
  401ffe:	6878      	ldr	r0, [r7, #4]
  402000:	4b0f      	ldr	r3, [pc, #60]	; (402040 <ov_init+0x7c>)
  402002:	4798      	blx	r3
	
	
	uint32_t ul_id = 0;
  402004:	2300      	movs	r3, #0
  402006:	627b      	str	r3, [r7, #36]	; 0x24

	ul_id = ov_id( p_twi );
  402008:	6878      	ldr	r0, [r7, #4]
  40200a:	4b0e      	ldr	r3, [pc, #56]	; (402044 <ov_init+0x80>)
  40200c:	4798      	blx	r3
  40200e:	6278      	str	r0, [r7, #36]	; 0x24

	if (((ul_id >> 8)&0xff)  == OV2640_PIDH_DEFAULT) {
  402010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402012:	0a1b      	lsrs	r3, r3, #8
  402014:	b2db      	uxtb	r3, r3
  402016:	2b26      	cmp	r3, #38	; 0x26
  402018:	d10d      	bne.n	402036 <ov_init+0x72>
		if (ov_manufacturer( p_twi ) == 0) {
  40201a:	6878      	ldr	r0, [r7, #4]
  40201c:	4b0a      	ldr	r3, [pc, #40]	; (402048 <ov_init+0x84>)
  40201e:	4798      	blx	r3
  402020:	4603      	mov	r3, r0
  402022:	2b00      	cmp	r3, #0
  402024:	d107      	bne.n	402036 <ov_init+0x72>
			if (ov_test_write( p_twi ) == 0) {
  402026:	6878      	ldr	r0, [r7, #4]
  402028:	4b08      	ldr	r3, [pc, #32]	; (40204c <ov_init+0x88>)
  40202a:	4798      	blx	r3
  40202c:	4603      	mov	r3, r0
  40202e:	2b00      	cmp	r3, #0
  402030:	d101      	bne.n	402036 <ov_init+0x72>
				return 0;
  402032:	2300      	movs	r3, #0
  402034:	e000      	b.n	402038 <ov_init+0x74>
			}
		}
	}

	return 1;
  402036:	2301      	movs	r3, #1
}
  402038:	4618      	mov	r0, r3
  40203a:	3728      	adds	r7, #40	; 0x28
  40203c:	46bd      	mov	sp, r7
  40203e:	bd80      	pop	{r7, pc}
  402040:	00401ecd 	.word	0x00401ecd
  402044:	00401d11 	.word	0x00401d11
  402048:	00401d81 	.word	0x00401d81
  40204c:	00401df9 	.word	0x00401df9

00402050 <ov_configure>:
 * \param p_twi TWI interface.
 * \param format Specific format to configure.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_configure(Twi* const p_twi, const e_OV2640_format format)
{
  402050:	b580      	push	{r7, lr}
  402052:	b084      	sub	sp, #16
  402054:	af00      	add	r7, sp, #0
  402056:	6078      	str	r0, [r7, #4]
  402058:	460b      	mov	r3, r1
  40205a:	70fb      	strb	r3, [r7, #3]
	const ov_reg *p_regs_conf = NULL;
  40205c:	2300      	movs	r3, #0
  40205e:	60fb      	str	r3, [r7, #12]

	/* Common register initialization */
	switch (format) {
  402060:	78fb      	ldrb	r3, [r7, #3]
  402062:	2b11      	cmp	r3, #17
  402064:	d85c      	bhi.n	402120 <ov_configure+0xd0>
  402066:	a201      	add	r2, pc, #4	; (adr r2, 40206c <ov_configure+0x1c>)
  402068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40206c:	004020b5 	.word	0x004020b5
  402070:	004020bb 	.word	0x004020bb
  402074:	004020c1 	.word	0x004020c1
  402078:	004020c7 	.word	0x004020c7
  40207c:	004020cd 	.word	0x004020cd
  402080:	004020d3 	.word	0x004020d3
  402084:	004020d9 	.word	0x004020d9
  402088:	004020df 	.word	0x004020df
  40208c:	004020e5 	.word	0x004020e5
  402090:	004020eb 	.word	0x004020eb
  402094:	004020f1 	.word	0x004020f1
  402098:	004020f7 	.word	0x004020f7
  40209c:	004020fd 	.word	0x004020fd
  4020a0:	00402103 	.word	0x00402103
  4020a4:	00402109 	.word	0x00402109
  4020a8:	0040210f 	.word	0x0040210f
  4020ac:	00402115 	.word	0x00402115
  4020b0:	0040211b 	.word	0x0040211b
		
	case JPEG_INIT:
		p_regs_conf = OV2640_JPEG_INIT;
  4020b4:	4b22      	ldr	r3, [pc, #136]	; (402140 <ov_configure+0xf0>)
  4020b6:	60fb      	str	r3, [r7, #12]
		break;
  4020b8:	e033      	b.n	402122 <ov_configure+0xd2>
		
	case YUV422:
		p_regs_conf = OV2640_YUV422;
  4020ba:	4b22      	ldr	r3, [pc, #136]	; (402144 <ov_configure+0xf4>)
  4020bc:	60fb      	str	r3, [r7, #12]
		break;
  4020be:	e030      	b.n	402122 <ov_configure+0xd2>
		
	case JPEG:
		p_regs_conf = OV2640_JPEG;
  4020c0:	4b21      	ldr	r3, [pc, #132]	; (402148 <ov_configure+0xf8>)
  4020c2:	60fb      	str	r3, [r7, #12]
		break;
  4020c4:	e02d      	b.n	402122 <ov_configure+0xd2>
		
	case JPEG_320x240:
		p_regs_conf = OV2640_JPEG_320x240;
  4020c6:	4b21      	ldr	r3, [pc, #132]	; (40214c <ov_configure+0xfc>)
  4020c8:	60fb      	str	r3, [r7, #12]
		break;
  4020ca:	e02a      	b.n	402122 <ov_configure+0xd2>
		
	case JPEG_640x480:
		p_regs_conf = OV2640_JPEG_640x480;
  4020cc:	4b20      	ldr	r3, [pc, #128]	; (402150 <ov_configure+0x100>)
  4020ce:	60fb      	str	r3, [r7, #12]
		break;
  4020d0:	e027      	b.n	402122 <ov_configure+0xd2>
		
	case JPEG_800x600:
		p_regs_conf = OV2640_JPEG_800x600;
  4020d2:	4b20      	ldr	r3, [pc, #128]	; (402154 <ov_configure+0x104>)
  4020d4:	60fb      	str	r3, [r7, #12]
		break;
  4020d6:	e024      	b.n	402122 <ov_configure+0xd2>
		
	case JPEG_1024x768:
		p_regs_conf = OV2640_JPEG_1024x768;
  4020d8:	4b1f      	ldr	r3, [pc, #124]	; (402158 <ov_configure+0x108>)
  4020da:	60fb      	str	r3, [r7, #12]
		break;
  4020dc:	e021      	b.n	402122 <ov_configure+0xd2>
		
	case JPEG_1280x1024:
		p_regs_conf = OV2640_JPEG_1280x1024;
  4020de:	4b1f      	ldr	r3, [pc, #124]	; (40215c <ov_configure+0x10c>)
  4020e0:	60fb      	str	r3, [r7, #12]
		break;
  4020e2:	e01e      	b.n	402122 <ov_configure+0xd2>
		
	case JPEG_1600x1200:
		p_regs_conf = OV2640_JPEG_1600x1200;
  4020e4:	4b1e      	ldr	r3, [pc, #120]	; (402160 <ov_configure+0x110>)
  4020e6:	60fb      	str	r3, [r7, #12]
		break;
  4020e8:	e01b      	b.n	402122 <ov_configure+0xd2>
		
	case QVGA_YUV422_10FPS:
		p_regs_conf = OV2640_QVGA_YUV422_10FPS;
  4020ea:	4b1e      	ldr	r3, [pc, #120]	; (402164 <ov_configure+0x114>)
  4020ec:	60fb      	str	r3, [r7, #12]
		break;
  4020ee:	e018      	b.n	402122 <ov_configure+0xd2>

	case QVGA_YUV422_15FPS:
		p_regs_conf = OV2640_QVGA_YUV422_15FPS;
  4020f0:	4b1d      	ldr	r3, [pc, #116]	; (402168 <ov_configure+0x118>)
  4020f2:	60fb      	str	r3, [r7, #12]
		break;
  4020f4:	e015      	b.n	402122 <ov_configure+0xd2>

	case QVGA_YUV422_20FPS:
		p_regs_conf = OV2640_QVGA_YUV422_20FPS;
  4020f6:	4b1d      	ldr	r3, [pc, #116]	; (40216c <ov_configure+0x11c>)
  4020f8:	60fb      	str	r3, [r7, #12]
		break;
  4020fa:	e012      	b.n	402122 <ov_configure+0xd2>

	case QVGA_YUV422_30FPS:
		p_regs_conf = OV2640_QVGA_YUV422_30FPS;
  4020fc:	4b1c      	ldr	r3, [pc, #112]	; (402170 <ov_configure+0x120>)
  4020fe:	60fb      	str	r3, [r7, #12]
		break;
  402100:	e00f      	b.n	402122 <ov_configure+0xd2>

	case QVGA_RGB888:
		p_regs_conf = OV2640_QVGA_RGB888;
  402102:	4b1c      	ldr	r3, [pc, #112]	; (402174 <ov_configure+0x124>)
  402104:	60fb      	str	r3, [r7, #12]
		break;
  402106:	e00c      	b.n	402122 <ov_configure+0xd2>

	case QQVGA_YUV422:
		p_regs_conf = OV2640_QQVGA_YUV422;
  402108:	4b1b      	ldr	r3, [pc, #108]	; (402178 <ov_configure+0x128>)
  40210a:	60fb      	str	r3, [r7, #12]
		break;
  40210c:	e009      	b.n	402122 <ov_configure+0xd2>

	case QQVGA_RGB888:
		p_regs_conf = OV2640_QQVGA_RGB888;
  40210e:	4b1b      	ldr	r3, [pc, #108]	; (40217c <ov_configure+0x12c>)
  402110:	60fb      	str	r3, [r7, #12]
		break;
  402112:	e006      	b.n	402122 <ov_configure+0xd2>

	case TEST_PATTERN:
		p_regs_conf = OV2640_TEST_PATTERN;
  402114:	4b1a      	ldr	r3, [pc, #104]	; (402180 <ov_configure+0x130>)
  402116:	60fb      	str	r3, [r7, #12]
		break;
  402118:	e003      	b.n	402122 <ov_configure+0xd2>

	case VGA_YUV422_20FPS:
		p_regs_conf = OV2640_VGA_YUV422_20FPS;
  40211a:	4b1a      	ldr	r3, [pc, #104]	; (402184 <ov_configure+0x134>)
  40211c:	60fb      	str	r3, [r7, #12]
		break;
  40211e:	e000      	b.n	402122 <ov_configure+0xd2>

	default:
		break;
  402120:	bf00      	nop
	}

	if (p_regs_conf != NULL) {
  402122:	68fb      	ldr	r3, [r7, #12]
  402124:	2b00      	cmp	r3, #0
  402126:	d005      	beq.n	402134 <ov_configure+0xe4>
		ov_write_regs( p_twi, p_regs_conf );
  402128:	68f9      	ldr	r1, [r7, #12]
  40212a:	6878      	ldr	r0, [r7, #4]
  40212c:	4b16      	ldr	r3, [pc, #88]	; (402188 <ov_configure+0x138>)
  40212e:	4798      	blx	r3
		return 0;
  402130:	2300      	movs	r3, #0
  402132:	e000      	b.n	402136 <ov_configure+0xe6>
	}

	return 1;
  402134:	2301      	movs	r3, #1
}
  402136:	4618      	mov	r0, r3
  402138:	3710      	adds	r7, #16
  40213a:	46bd      	mov	sp, r7
  40213c:	bd80      	pop	{r7, pc}
  40213e:	bf00      	nop
  402140:	004084c4 	.word	0x004084c4
  402144:	00408644 	.word	0x00408644
  402148:	00408658 	.word	0x00408658
  40214c:	0040866c 	.word	0x0040866c
  402150:	004086bc 	.word	0x004086bc
  402154:	00408710 	.word	0x00408710
  402158:	00408764 	.word	0x00408764
  40215c:	004087b4 	.word	0x004087b4
  402160:	00408808 	.word	0x00408808
  402164:	0040885c 	.word	0x0040885c
  402168:	0040894c 	.word	0x0040894c
  40216c:	00408a3c 	.word	0x00408a3c
  402170:	00408b2c 	.word	0x00408b2c
  402174:	00408c1c 	.word	0x00408c1c
  402178:	00408d10 	.word	0x00408d10
  40217c:	00408e04 	.word	0x00408e04
  402180:	00408ef8 	.word	0x00408ef8
  402184:	00408fec 	.word	0x00408fec
  402188:	00401ef1 	.word	0x00401ef1

0040218c <NVIC_EnableIRQ>:
{
  40218c:	b480      	push	{r7}
  40218e:	b083      	sub	sp, #12
  402190:	af00      	add	r7, sp, #0
  402192:	4603      	mov	r3, r0
  402194:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402196:	4908      	ldr	r1, [pc, #32]	; (4021b8 <NVIC_EnableIRQ+0x2c>)
  402198:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40219c:	095b      	lsrs	r3, r3, #5
  40219e:	79fa      	ldrb	r2, [r7, #7]
  4021a0:	f002 021f 	and.w	r2, r2, #31
  4021a4:	2001      	movs	r0, #1
  4021a6:	fa00 f202 	lsl.w	r2, r0, r2
  4021aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4021ae:	bf00      	nop
  4021b0:	370c      	adds	r7, #12
  4021b2:	46bd      	mov	sp, r7
  4021b4:	bc80      	pop	{r7}
  4021b6:	4770      	bx	lr
  4021b8:	e000e100 	.word	0xe000e100

004021bc <osc_get_rate>:
{
  4021bc:	b480      	push	{r7}
  4021be:	b083      	sub	sp, #12
  4021c0:	af00      	add	r7, sp, #0
  4021c2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4021c4:	687b      	ldr	r3, [r7, #4]
  4021c6:	2b07      	cmp	r3, #7
  4021c8:	d825      	bhi.n	402216 <osc_get_rate+0x5a>
  4021ca:	a201      	add	r2, pc, #4	; (adr r2, 4021d0 <osc_get_rate+0x14>)
  4021cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4021d0:	004021f1 	.word	0x004021f1
  4021d4:	004021f7 	.word	0x004021f7
  4021d8:	004021fd 	.word	0x004021fd
  4021dc:	00402203 	.word	0x00402203
  4021e0:	00402207 	.word	0x00402207
  4021e4:	0040220b 	.word	0x0040220b
  4021e8:	0040220f 	.word	0x0040220f
  4021ec:	00402213 	.word	0x00402213
		return OSC_SLCK_32K_RC_HZ;
  4021f0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4021f4:	e010      	b.n	402218 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4021f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4021fa:	e00d      	b.n	402218 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4021fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402200:	e00a      	b.n	402218 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  402202:	4b08      	ldr	r3, [pc, #32]	; (402224 <osc_get_rate+0x68>)
  402204:	e008      	b.n	402218 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  402206:	4b08      	ldr	r3, [pc, #32]	; (402228 <osc_get_rate+0x6c>)
  402208:	e006      	b.n	402218 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40220a:	4b08      	ldr	r3, [pc, #32]	; (40222c <osc_get_rate+0x70>)
  40220c:	e004      	b.n	402218 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40220e:	4b07      	ldr	r3, [pc, #28]	; (40222c <osc_get_rate+0x70>)
  402210:	e002      	b.n	402218 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  402212:	4b06      	ldr	r3, [pc, #24]	; (40222c <osc_get_rate+0x70>)
  402214:	e000      	b.n	402218 <osc_get_rate+0x5c>
	return 0;
  402216:	2300      	movs	r3, #0
}
  402218:	4618      	mov	r0, r3
  40221a:	370c      	adds	r7, #12
  40221c:	46bd      	mov	sp, r7
  40221e:	bc80      	pop	{r7}
  402220:	4770      	bx	lr
  402222:	bf00      	nop
  402224:	003d0900 	.word	0x003d0900
  402228:	007a1200 	.word	0x007a1200
  40222c:	00b71b00 	.word	0x00b71b00

00402230 <sysclk_get_main_hz>:
{
  402230:	b580      	push	{r7, lr}
  402232:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402234:	2006      	movs	r0, #6
  402236:	4b04      	ldr	r3, [pc, #16]	; (402248 <sysclk_get_main_hz+0x18>)
  402238:	4798      	blx	r3
  40223a:	4602      	mov	r2, r0
  40223c:	4613      	mov	r3, r2
  40223e:	009b      	lsls	r3, r3, #2
  402240:	4413      	add	r3, r2
  402242:	009b      	lsls	r3, r3, #2
}
  402244:	4618      	mov	r0, r3
  402246:	bd80      	pop	{r7, pc}
  402248:	004021bd 	.word	0x004021bd

0040224c <sysclk_get_cpu_hz>:
{
  40224c:	b580      	push	{r7, lr}
  40224e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402250:	4b02      	ldr	r3, [pc, #8]	; (40225c <sysclk_get_cpu_hz+0x10>)
  402252:	4798      	blx	r3
  402254:	4603      	mov	r3, r0
  402256:	085b      	lsrs	r3, r3, #1
}
  402258:	4618      	mov	r0, r3
  40225a:	bd80      	pop	{r7, pc}
  40225c:	00402231 	.word	0x00402231

00402260 <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  402260:	b580      	push	{r7, lr}
  402262:	b082      	sub	sp, #8
  402264:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	// Read TC0 status.
	ul_status = tc_get_status(TC0, 0);
  402266:	2100      	movs	r1, #0
  402268:	4809      	ldr	r0, [pc, #36]	; (402290 <TC0_Handler+0x30>)
  40226a:	4b0a      	ldr	r3, [pc, #40]	; (402294 <TC0_Handler+0x34>)
  40226c:	4798      	blx	r3
  40226e:	6078      	str	r0, [r7, #4]

	// RC compare.
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  402270:	687b      	ldr	r3, [r7, #4]
  402272:	f003 0310 	and.w	r3, r3, #16
  402276:	2b00      	cmp	r3, #0
  402278:	d006      	beq.n	402288 <TC0_Handler+0x28>
		counts++;
  40227a:	4b07      	ldr	r3, [pc, #28]	; (402298 <TC0_Handler+0x38>)
  40227c:	781b      	ldrb	r3, [r3, #0]
  40227e:	b2db      	uxtb	r3, r3
  402280:	3301      	adds	r3, #1
  402282:	b2da      	uxtb	r2, r3
  402284:	4b04      	ldr	r3, [pc, #16]	; (402298 <TC0_Handler+0x38>)
  402286:	701a      	strb	r2, [r3, #0]
	}
}
  402288:	bf00      	nop
  40228a:	3708      	adds	r7, #8
  40228c:	46bd      	mov	sp, r7
  40228e:	bd80      	pop	{r7, pc}
  402290:	40010000 	.word	0x40010000
  402294:	0040037f 	.word	0x0040037f
  402298:	20019538 	.word	0x20019538

0040229c <configure_tc>:

void configure_tc(void)
{
  40229c:	b590      	push	{r4, r7, lr}
  40229e:	b087      	sub	sp, #28
  4022a0:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	// Get system clock.
	ul_sysclk = sysclk_get_cpu_hz();
  4022a2:	4b18      	ldr	r3, [pc, #96]	; (402304 <configure_tc+0x68>)
  4022a4:	4798      	blx	r3
  4022a6:	60f8      	str	r0, [r7, #12]

	// Configure PMC.
	pmc_enable_periph_clk(ID_TC0);
  4022a8:	2017      	movs	r0, #23
  4022aa:	4b17      	ldr	r3, [pc, #92]	; (402308 <configure_tc+0x6c>)
  4022ac:	4798      	blx	r3

	// Configure TC for a 1Hz frequency and trigger on RC compare.
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4022ae:	1d39      	adds	r1, r7, #4
  4022b0:	f107 0208 	add.w	r2, r7, #8
  4022b4:	68fb      	ldr	r3, [r7, #12]
  4022b6:	9300      	str	r3, [sp, #0]
  4022b8:	460b      	mov	r3, r1
  4022ba:	68f9      	ldr	r1, [r7, #12]
  4022bc:	2001      	movs	r0, #1
  4022be:	4c13      	ldr	r4, [pc, #76]	; (40230c <configure_tc+0x70>)
  4022c0:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  4022c2:	687b      	ldr	r3, [r7, #4]
  4022c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  4022c8:	461a      	mov	r2, r3
  4022ca:	2100      	movs	r1, #0
  4022cc:	4810      	ldr	r0, [pc, #64]	; (402310 <configure_tc+0x74>)
  4022ce:	4b11      	ldr	r3, [pc, #68]	; (402314 <configure_tc+0x78>)
  4022d0:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  4022d2:	68bb      	ldr	r3, [r7, #8]
  4022d4:	68fa      	ldr	r2, [r7, #12]
  4022d6:	fbb2 f3f3 	udiv	r3, r2, r3
  4022da:	461a      	mov	r2, r3
  4022dc:	2100      	movs	r1, #0
  4022de:	480c      	ldr	r0, [pc, #48]	; (402310 <configure_tc+0x74>)
  4022e0:	4b0d      	ldr	r3, [pc, #52]	; (402318 <configure_tc+0x7c>)
  4022e2:	4798      	blx	r3

	// Configure and enable interrupt on RC compare.
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  4022e4:	2017      	movs	r0, #23
  4022e6:	4b0d      	ldr	r3, [pc, #52]	; (40231c <configure_tc+0x80>)
  4022e8:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  4022ea:	2210      	movs	r2, #16
  4022ec:	2100      	movs	r1, #0
  4022ee:	4808      	ldr	r0, [pc, #32]	; (402310 <configure_tc+0x74>)
  4022f0:	4b0b      	ldr	r3, [pc, #44]	; (402320 <configure_tc+0x84>)
  4022f2:	4798      	blx	r3
	
	// Start the timer
	tc_start(TC0, 0);
  4022f4:	2100      	movs	r1, #0
  4022f6:	4806      	ldr	r0, [pc, #24]	; (402310 <configure_tc+0x74>)
  4022f8:	4b0a      	ldr	r3, [pc, #40]	; (402324 <configure_tc+0x88>)
  4022fa:	4798      	blx	r3
  4022fc:	bf00      	nop
  4022fe:	3714      	adds	r7, #20
  402300:	46bd      	mov	sp, r7
  402302:	bd90      	pop	{r4, r7, pc}
  402304:	0040224d 	.word	0x0040224d
  402308:	004016d5 	.word	0x004016d5
  40230c:	004003a1 	.word	0x004003a1
  402310:	40010000 	.word	0x40010000
  402314:	004002dd 	.word	0x004002dd
  402318:	00400335 	.word	0x00400335
  40231c:	0040218d 	.word	0x0040218d
  402320:	00400359 	.word	0x00400359
  402324:	00400315 	.word	0x00400315

00402328 <NVIC_EnableIRQ>:
{
  402328:	b480      	push	{r7}
  40232a:	b083      	sub	sp, #12
  40232c:	af00      	add	r7, sp, #0
  40232e:	4603      	mov	r3, r0
  402330:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402332:	4908      	ldr	r1, [pc, #32]	; (402354 <NVIC_EnableIRQ+0x2c>)
  402334:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402338:	095b      	lsrs	r3, r3, #5
  40233a:	79fa      	ldrb	r2, [r7, #7]
  40233c:	f002 021f 	and.w	r2, r2, #31
  402340:	2001      	movs	r0, #1
  402342:	fa00 f202 	lsl.w	r2, r0, r2
  402346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40234a:	bf00      	nop
  40234c:	370c      	adds	r7, #12
  40234e:	46bd      	mov	sp, r7
  402350:	bc80      	pop	{r7}
  402352:	4770      	bx	lr
  402354:	e000e100 	.word	0xe000e100

00402358 <osc_get_rate>:
{
  402358:	b480      	push	{r7}
  40235a:	b083      	sub	sp, #12
  40235c:	af00      	add	r7, sp, #0
  40235e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402360:	687b      	ldr	r3, [r7, #4]
  402362:	2b07      	cmp	r3, #7
  402364:	d825      	bhi.n	4023b2 <osc_get_rate+0x5a>
  402366:	a201      	add	r2, pc, #4	; (adr r2, 40236c <osc_get_rate+0x14>)
  402368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40236c:	0040238d 	.word	0x0040238d
  402370:	00402393 	.word	0x00402393
  402374:	00402399 	.word	0x00402399
  402378:	0040239f 	.word	0x0040239f
  40237c:	004023a3 	.word	0x004023a3
  402380:	004023a7 	.word	0x004023a7
  402384:	004023ab 	.word	0x004023ab
  402388:	004023af 	.word	0x004023af
		return OSC_SLCK_32K_RC_HZ;
  40238c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402390:	e010      	b.n	4023b4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  402392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402396:	e00d      	b.n	4023b4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402398:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40239c:	e00a      	b.n	4023b4 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40239e:	4b08      	ldr	r3, [pc, #32]	; (4023c0 <osc_get_rate+0x68>)
  4023a0:	e008      	b.n	4023b4 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4023a2:	4b08      	ldr	r3, [pc, #32]	; (4023c4 <osc_get_rate+0x6c>)
  4023a4:	e006      	b.n	4023b4 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4023a6:	4b08      	ldr	r3, [pc, #32]	; (4023c8 <osc_get_rate+0x70>)
  4023a8:	e004      	b.n	4023b4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4023aa:	4b07      	ldr	r3, [pc, #28]	; (4023c8 <osc_get_rate+0x70>)
  4023ac:	e002      	b.n	4023b4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4023ae:	4b06      	ldr	r3, [pc, #24]	; (4023c8 <osc_get_rate+0x70>)
  4023b0:	e000      	b.n	4023b4 <osc_get_rate+0x5c>
	return 0;
  4023b2:	2300      	movs	r3, #0
}
  4023b4:	4618      	mov	r0, r3
  4023b6:	370c      	adds	r7, #12
  4023b8:	46bd      	mov	sp, r7
  4023ba:	bc80      	pop	{r7}
  4023bc:	4770      	bx	lr
  4023be:	bf00      	nop
  4023c0:	003d0900 	.word	0x003d0900
  4023c4:	007a1200 	.word	0x007a1200
  4023c8:	00b71b00 	.word	0x00b71b00

004023cc <sysclk_get_main_hz>:
{
  4023cc:	b580      	push	{r7, lr}
  4023ce:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4023d0:	2006      	movs	r0, #6
  4023d2:	4b04      	ldr	r3, [pc, #16]	; (4023e4 <sysclk_get_main_hz+0x18>)
  4023d4:	4798      	blx	r3
  4023d6:	4602      	mov	r2, r0
  4023d8:	4613      	mov	r3, r2
  4023da:	009b      	lsls	r3, r3, #2
  4023dc:	4413      	add	r3, r2
  4023de:	009b      	lsls	r3, r3, #2
}
  4023e0:	4618      	mov	r0, r3
  4023e2:	bd80      	pop	{r7, pc}
  4023e4:	00402359 	.word	0x00402359

004023e8 <sysclk_get_cpu_hz>:
{
  4023e8:	b580      	push	{r7, lr}
  4023ea:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4023ec:	4b02      	ldr	r3, [pc, #8]	; (4023f8 <sysclk_get_cpu_hz+0x10>)
  4023ee:	4798      	blx	r3
  4023f0:	4603      	mov	r3, r0
  4023f2:	085b      	lsrs	r3, r3, #1
}
  4023f4:	4618      	mov	r0, r3
  4023f6:	bd80      	pop	{r7, pc}
  4023f8:	004023cd 	.word	0x004023cd

004023fc <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4023fc:	b580      	push	{r7, lr}
  4023fe:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402400:	4b02      	ldr	r3, [pc, #8]	; (40240c <sysclk_get_peripheral_hz+0x10>)
  402402:	4798      	blx	r3
  402404:	4603      	mov	r3, r0
  402406:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  402408:	4618      	mov	r0, r3
  40240a:	bd80      	pop	{r7, pc}
  40240c:	004023cd 	.word	0x004023cd

00402410 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  402410:	b580      	push	{r7, lr}
  402412:	b082      	sub	sp, #8
  402414:	af00      	add	r7, sp, #0
  402416:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  402418:	6878      	ldr	r0, [r7, #4]
  40241a:	4b03      	ldr	r3, [pc, #12]	; (402428 <sysclk_enable_peripheral_clock+0x18>)
  40241c:	4798      	blx	r3
}
  40241e:	bf00      	nop
  402420:	3708      	adds	r7, #8
  402422:	46bd      	mov	sp, r7
  402424:	bd80      	pop	{r7, pc}
  402426:	bf00      	nop
  402428:	004016d5 	.word	0x004016d5

0040242c <USART0_Handler>:
volatile uint8_t  data_recieved = 0;


// All functions go here
void USART_Handler(void)
{
  40242c:	b580      	push	{r7, lr}
  40242e:	b082      	sub	sp, #8
  402430:	af00      	add	r7, sp, #0
	uint32_t ul_status;


	// Read USART status. 
	ul_status = usart_get_status(BOARD_USART);
  402432:	480d      	ldr	r0, [pc, #52]	; (402468 <USART0_Handler+0x3c>)
  402434:	4b0d      	ldr	r3, [pc, #52]	; (40246c <USART0_Handler+0x40>)
  402436:	4798      	blx	r3
  402438:	6078      	str	r0, [r7, #4]

	// Receive buffer is full. 
	if (ul_status & US_CSR_RXBUFF) {
  40243a:	687b      	ldr	r3, [r7, #4]
  40243c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  402440:	2b00      	cmp	r3, #0
  402442:	d00c      	beq.n	40245e <USART0_Handler+0x32>
		usart_read(BOARD_USART,&received_byte_wifi);
  402444:	490a      	ldr	r1, [pc, #40]	; (402470 <USART0_Handler+0x44>)
  402446:	4808      	ldr	r0, [pc, #32]	; (402468 <USART0_Handler+0x3c>)
  402448:	4b0a      	ldr	r3, [pc, #40]	; (402474 <USART0_Handler+0x48>)
  40244a:	4798      	blx	r3
		new_rx_wifi = true;
  40244c:	4b0a      	ldr	r3, [pc, #40]	; (402478 <USART0_Handler+0x4c>)
  40244e:	2201      	movs	r2, #1
  402450:	701a      	strb	r2, [r3, #0]
		process_incoming_byte_wifi((uint8_t)received_byte_wifi);
  402452:	4b07      	ldr	r3, [pc, #28]	; (402470 <USART0_Handler+0x44>)
  402454:	681b      	ldr	r3, [r3, #0]
  402456:	b2db      	uxtb	r3, r3
  402458:	4618      	mov	r0, r3
  40245a:	4b08      	ldr	r3, [pc, #32]	; (40247c <USART0_Handler+0x50>)
  40245c:	4798      	blx	r3
		}
}
  40245e:	bf00      	nop
  402460:	3708      	adds	r7, #8
  402462:	46bd      	mov	sp, r7
  402464:	bd80      	pop	{r7, pc}
  402466:	bf00      	nop
  402468:	40024000 	.word	0x40024000
  40246c:	00400a61 	.word	0x00400a61
  402470:	20019100 	.word	0x20019100
  402474:	00400b25 	.word	0x00400b25
  402478:	20019108 	.word	0x20019108
  40247c:	00402671 	.word	0x00402671

00402480 <wifi_command_response_handler>:

static void wifi_command_response_handler(uint32_t ul_id, uint32_t ul_mask)
{
  402480:	b580      	push	{r7, lr}
  402482:	b084      	sub	sp, #16
  402484:	af00      	add	r7, sp, #0
  402486:	6078      	str	r0, [r7, #4]
  402488:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);
	
	process_data_wifi();
  40248a:	4b0c      	ldr	r3, [pc, #48]	; (4024bc <wifi_command_response_handler+0x3c>)
  40248c:	4798      	blx	r3
	for (uint32_t i=0;i<MAX_INPUT_WIFI;i++) 
  40248e:	2300      	movs	r3, #0
  402490:	60fb      	str	r3, [r7, #12]
  402492:	e007      	b.n	4024a4 <wifi_command_response_handler+0x24>
	{input_line_wifi[i] =0;}
  402494:	4a0a      	ldr	r2, [pc, #40]	; (4024c0 <wifi_command_response_handler+0x40>)
  402496:	68fb      	ldr	r3, [r7, #12]
  402498:	4413      	add	r3, r2
  40249a:	2200      	movs	r2, #0
  40249c:	701a      	strb	r2, [r3, #0]
	for (uint32_t i=0;i<MAX_INPUT_WIFI;i++) 
  40249e:	68fb      	ldr	r3, [r7, #12]
  4024a0:	3301      	adds	r3, #1
  4024a2:	60fb      	str	r3, [r7, #12]
  4024a4:	68fb      	ldr	r3, [r7, #12]
  4024a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4024aa:	d3f3      	bcc.n	402494 <wifi_command_response_handler+0x14>
	input_pos_wifi = 0;
  4024ac:	4b05      	ldr	r3, [pc, #20]	; (4024c4 <wifi_command_response_handler+0x44>)
  4024ae:	2200      	movs	r2, #0
  4024b0:	601a      	str	r2, [r3, #0]
	
}
  4024b2:	bf00      	nop
  4024b4:	3710      	adds	r7, #16
  4024b6:	46bd      	mov	sp, r7
  4024b8:	bd80      	pop	{r7, pc}
  4024ba:	bf00      	nop
  4024bc:	0040269d 	.word	0x0040269d
  4024c0:	20019150 	.word	0x20019150
  4024c4:	20019104 	.word	0x20019104

004024c8 <wifi_web_setup_handler>:

static void wifi_web_setup_handler(uint32_t ul_id1, uint32_t ul_mask1)
{
  4024c8:	b480      	push	{r7}
  4024ca:	b083      	sub	sp, #12
  4024cc:	af00      	add	r7, sp, #0
  4024ce:	6078      	str	r0, [r7, #4]
  4024d0:	6039      	str	r1, [r7, #0]
	unused(ul_id1);
	unused(ul_mask1);
	wifi_button_flag = true;
  4024d2:	4b04      	ldr	r3, [pc, #16]	; (4024e4 <wifi_web_setup_handler+0x1c>)
  4024d4:	2201      	movs	r2, #1
  4024d6:	701a      	strb	r2, [r3, #0]
}
  4024d8:	bf00      	nop
  4024da:	370c      	adds	r7, #12
  4024dc:	46bd      	mov	sp, r7
  4024de:	bc80      	pop	{r7}
  4024e0:	4770      	bx	lr
  4024e2:	bf00      	nop
  4024e4:	20019109 	.word	0x20019109

004024e8 <configure_usart_wifi>:

void configure_usart_wifi(void)
{    
  4024e8:	b580      	push	{r7, lr}
  4024ea:	b086      	sub	sp, #24
  4024ec:	af00      	add	r7, sp, #0
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  4024ee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4024f2:	2005      	movs	r0, #5
  4024f4:	4b22      	ldr	r3, [pc, #136]	; (402580 <configure_usart_wifi+0x98>)
  4024f6:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  4024f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4024fc:	2006      	movs	r0, #6
  4024fe:	4b20      	ldr	r3, [pc, #128]	; (402580 <configure_usart_wifi+0x98>)
  402500:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
  402502:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402506:	2008      	movs	r0, #8
  402508:	4b1d      	ldr	r3, [pc, #116]	; (402580 <configure_usart_wifi+0x98>)
  40250a:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
  40250c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402510:	2007      	movs	r0, #7
  402512:	4b1b      	ldr	r3, [pc, #108]	; (402580 <configure_usart_wifi+0x98>)
  402514:	4798      	blx	r3

	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  402516:	463b      	mov	r3, r7
  402518:	2200      	movs	r2, #0
  40251a:	601a      	str	r2, [r3, #0]
  40251c:	605a      	str	r2, [r3, #4]
  40251e:	609a      	str	r2, [r3, #8]
  402520:	60da      	str	r2, [r3, #12]
  402522:	611a      	str	r2, [r3, #16]
  402524:	615a      	str	r2, [r3, #20]
  402526:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40252a:	603b      	str	r3, [r7, #0]
  40252c:	23c0      	movs	r3, #192	; 0xc0
  40252e:	607b      	str	r3, [r7, #4]
  402530:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402534:	60bb      	str	r3, [r7, #8]
		US_MR_CHMODE_NORMAL,
		// This field is only used in IrDA mode. 
	};

	// Get peripheral clock. 
	ul_sysclk = sysclk_get_peripheral_hz();
  402536:	4b13      	ldr	r3, [pc, #76]	; (402584 <configure_usart_wifi+0x9c>)
  402538:	4798      	blx	r3
  40253a:	4602      	mov	r2, r0
  40253c:	4b12      	ldr	r3, [pc, #72]	; (402588 <configure_usart_wifi+0xa0>)
  40253e:	601a      	str	r2, [r3, #0]

	// Enable peripheral clock. 
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  402540:	200e      	movs	r0, #14
  402542:	4b12      	ldr	r3, [pc, #72]	; (40258c <configure_usart_wifi+0xa4>)
  402544:	4798      	blx	r3

	// Configure USART. 
	usart_init_hw_handshaking(BOARD_USART, &usart_console_settings, ul_sysclk);
  402546:	4b10      	ldr	r3, [pc, #64]	; (402588 <configure_usart_wifi+0xa0>)
  402548:	681a      	ldr	r2, [r3, #0]
  40254a:	463b      	mov	r3, r7
  40254c:	4619      	mov	r1, r3
  40254e:	4810      	ldr	r0, [pc, #64]	; (402590 <configure_usart_wifi+0xa8>)
  402550:	4b10      	ldr	r3, [pc, #64]	; (402594 <configure_usart_wifi+0xac>)
  402552:	4798      	blx	r3

	// Disable all the interrupts. 
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  402554:	f04f 31ff 	mov.w	r1, #4294967295
  402558:	480d      	ldr	r0, [pc, #52]	; (402590 <configure_usart_wifi+0xa8>)
  40255a:	4b0f      	ldr	r3, [pc, #60]	; (402598 <configure_usart_wifi+0xb0>)
  40255c:	4798      	blx	r3
	
	// Enable TX & RX function. 
	usart_enable_tx(BOARD_USART);
  40255e:	480c      	ldr	r0, [pc, #48]	; (402590 <configure_usart_wifi+0xa8>)
  402560:	4b0e      	ldr	r3, [pc, #56]	; (40259c <configure_usart_wifi+0xb4>)
  402562:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  402564:	480a      	ldr	r0, [pc, #40]	; (402590 <configure_usart_wifi+0xa8>)
  402566:	4b0e      	ldr	r3, [pc, #56]	; (4025a0 <configure_usart_wifi+0xb8>)
  402568:	4798      	blx	r3

	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);    
  40256a:	2101      	movs	r1, #1
  40256c:	4808      	ldr	r0, [pc, #32]	; (402590 <configure_usart_wifi+0xa8>)
  40256e:	4b0d      	ldr	r3, [pc, #52]	; (4025a4 <configure_usart_wifi+0xbc>)
  402570:	4798      	blx	r3
	// Configure and enable interrupt of USART. 
	NVIC_EnableIRQ(USART_IRQn);
  402572:	200e      	movs	r0, #14
  402574:	4b0c      	ldr	r3, [pc, #48]	; (4025a8 <configure_usart_wifi+0xc0>)
  402576:	4798      	blx	r3
}
  402578:	bf00      	nop
  40257a:	3718      	adds	r7, #24
  40257c:	46bd      	mov	sp, r7
  40257e:	bd80      	pop	{r7, pc}
  402580:	0040120d 	.word	0x0040120d
  402584:	004023fd 	.word	0x004023fd
  402588:	20019110 	.word	0x20019110
  40258c:	00402411 	.word	0x00402411
  402590:	40024000 	.word	0x40024000
  402594:	0040098d 	.word	0x0040098d
  402598:	00400a47 	.word	0x00400a47
  40259c:	004009cd 	.word	0x004009cd
  4025a0:	004009fd 	.word	0x004009fd
  4025a4:	00400a2d 	.word	0x00400a2d
  4025a8:	00402329 	.word	0x00402329

004025ac <configure_wifi_comm_pin>:

void configure_wifi_comm_pin(void)
{
  4025ac:	b590      	push	{r4, r7, lr}
  4025ae:	b083      	sub	sp, #12
  4025b0:	af02      	add	r7, sp, #8
	// Configure PIO clock. 
	pmc_enable_periph_clk(WIFI_COMM_ID);
  4025b2:	200c      	movs	r0, #12
  4025b4:	4b0e      	ldr	r3, [pc, #56]	; (4025f0 <configure_wifi_comm_pin+0x44>)
  4025b6:	4798      	blx	r3

	// Adjust PIO debounce filter using a 10 Hz filter. 
	pio_set_debounce_filter(WIFI_COMM_PIO, WIFI_COMM_MASK, 10);
  4025b8:	220a      	movs	r2, #10
  4025ba:	2104      	movs	r1, #4
  4025bc:	480d      	ldr	r0, [pc, #52]	; (4025f4 <configure_wifi_comm_pin+0x48>)
  4025be:	4b0e      	ldr	r3, [pc, #56]	; (4025f8 <configure_wifi_comm_pin+0x4c>)
  4025c0:	4798      	blx	r3

	// Initialize PIO interrupt handler, see PIO definition in conf_board.h

	pio_handler_set(WIFI_COMM_PIO, WIFI_COMM_ID, WIFI_COMM_MASK,
  4025c2:	4b0e      	ldr	r3, [pc, #56]	; (4025fc <configure_wifi_comm_pin+0x50>)
  4025c4:	9300      	str	r3, [sp, #0]
  4025c6:	2379      	movs	r3, #121	; 0x79
  4025c8:	2204      	movs	r2, #4
  4025ca:	210c      	movs	r1, #12
  4025cc:	4809      	ldr	r0, [pc, #36]	; (4025f4 <configure_wifi_comm_pin+0x48>)
  4025ce:	4c0c      	ldr	r4, [pc, #48]	; (402600 <configure_wifi_comm_pin+0x54>)
  4025d0:	47a0      	blx	r4
			WIFI_COMM_ATTR, wifi_command_response_handler);

	// Enable PIO controller IRQs. 
	NVIC_EnableIRQ((IRQn_Type)WIFI_COMM_ID);
  4025d2:	200c      	movs	r0, #12
  4025d4:	4b0b      	ldr	r3, [pc, #44]	; (402604 <configure_wifi_comm_pin+0x58>)
  4025d6:	4798      	blx	r3

	// Enable PIO interrupt lines. 
	pio_enable_interrupt(WIFI_COMM_PIO, WIFI_COMM_MASK);
  4025d8:	2104      	movs	r1, #4
  4025da:	4806      	ldr	r0, [pc, #24]	; (4025f4 <configure_wifi_comm_pin+0x48>)
  4025dc:	4b0a      	ldr	r3, [pc, #40]	; (402608 <configure_wifi_comm_pin+0x5c>)
  4025de:	4798      	blx	r3
	data_recieved = 0;
  4025e0:	4b0a      	ldr	r3, [pc, #40]	; (40260c <configure_wifi_comm_pin+0x60>)
  4025e2:	2200      	movs	r2, #0
  4025e4:	701a      	strb	r2, [r3, #0]
}
  4025e6:	bf00      	nop
  4025e8:	3704      	adds	r7, #4
  4025ea:	46bd      	mov	sp, r7
  4025ec:	bd90      	pop	{r4, r7, pc}
  4025ee:	bf00      	nop
  4025f0:	004016d5 	.word	0x004016d5
  4025f4:	400e1000 	.word	0x400e1000
  4025f8:	00400f17 	.word	0x00400f17
  4025fc:	00402481 	.word	0x00402481
  402600:	0040020d 	.word	0x0040020d
  402604:	00402329 	.word	0x00402329
  402608:	004011ab 	.word	0x004011ab
  40260c:	2001910e 	.word	0x2001910e

00402610 <configure_wifi_web_setup_pin>:

void configure_wifi_web_setup_pin(void)
{
  402610:	b590      	push	{r4, r7, lr}
  402612:	b083      	sub	sp, #12
  402614:	af02      	add	r7, sp, #8
	// Configure PIO clock. 
	pmc_enable_periph_clk(WIFI_WEB_ID);
  402616:	200b      	movs	r0, #11
  402618:	4b0e      	ldr	r3, [pc, #56]	; (402654 <configure_wifi_web_setup_pin+0x44>)
  40261a:	4798      	blx	r3

	// Adjust PIO debounce filter using a 10 Hz filter. 
	pio_set_debounce_filter(WIFI_WEB_PIO, WIFI_WEB_PIN_MSK, 10);
  40261c:	220a      	movs	r2, #10
  40261e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402622:	480d      	ldr	r0, [pc, #52]	; (402658 <configure_wifi_web_setup_pin+0x48>)
  402624:	4b0d      	ldr	r3, [pc, #52]	; (40265c <configure_wifi_web_setup_pin+0x4c>)
  402626:	4798      	blx	r3

	// Initialize PIO interrupt handler, see PIO definition in conf_board.h
	pio_handler_set(WIFI_WEB_PIO, WIFI_WEB_ID, WIFI_WEB_PIN_MSK,
  402628:	4b0d      	ldr	r3, [pc, #52]	; (402660 <configure_wifi_web_setup_pin+0x50>)
  40262a:	9300      	str	r3, [sp, #0]
  40262c:	2379      	movs	r3, #121	; 0x79
  40262e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  402632:	210b      	movs	r1, #11
  402634:	4808      	ldr	r0, [pc, #32]	; (402658 <configure_wifi_web_setup_pin+0x48>)
  402636:	4c0b      	ldr	r4, [pc, #44]	; (402664 <configure_wifi_web_setup_pin+0x54>)
  402638:	47a0      	blx	r4
			WIFI_WEB_ATTR, wifi_web_setup_handler);

	// Enable PIO controller IRQs. 
	NVIC_EnableIRQ((IRQn_Type)WIFI_WEB_ID);
  40263a:	200b      	movs	r0, #11
  40263c:	4b0a      	ldr	r3, [pc, #40]	; (402668 <configure_wifi_web_setup_pin+0x58>)
  40263e:	4798      	blx	r3

	// Enable PIO interrupt lines. 
	pio_enable_interrupt(WIFI_WEB_PIO, WIFI_WEB_PIN_MSK);
  402640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402644:	4804      	ldr	r0, [pc, #16]	; (402658 <configure_wifi_web_setup_pin+0x48>)
  402646:	4b09      	ldr	r3, [pc, #36]	; (40266c <configure_wifi_web_setup_pin+0x5c>)
  402648:	4798      	blx	r3
}
  40264a:	bf00      	nop
  40264c:	3704      	adds	r7, #4
  40264e:	46bd      	mov	sp, r7
  402650:	bd90      	pop	{r4, r7, pc}
  402652:	bf00      	nop
  402654:	004016d5 	.word	0x004016d5
  402658:	400e0e00 	.word	0x400e0e00
  40265c:	00400f17 	.word	0x00400f17
  402660:	004024c9 	.word	0x004024c9
  402664:	0040020d 	.word	0x0040020d
  402668:	00402329 	.word	0x00402329
  40266c:	004011ab 	.word	0x004011ab

00402670 <process_incoming_byte_wifi>:

void process_incoming_byte_wifi(uint8_t in_byte)
{
  402670:	b480      	push	{r7}
  402672:	b083      	sub	sp, #12
  402674:	af00      	add	r7, sp, #0
  402676:	4603      	mov	r3, r0
  402678:	71fb      	strb	r3, [r7, #7]
	input_line_wifi[input_pos_wifi++]=in_byte;
  40267a:	4b06      	ldr	r3, [pc, #24]	; (402694 <process_incoming_byte_wifi+0x24>)
  40267c:	681b      	ldr	r3, [r3, #0]
  40267e:	1c5a      	adds	r2, r3, #1
  402680:	4904      	ldr	r1, [pc, #16]	; (402694 <process_incoming_byte_wifi+0x24>)
  402682:	600a      	str	r2, [r1, #0]
  402684:	4904      	ldr	r1, [pc, #16]	; (402698 <process_incoming_byte_wifi+0x28>)
  402686:	79fa      	ldrb	r2, [r7, #7]
  402688:	54ca      	strb	r2, [r1, r3]
	
}
  40268a:	bf00      	nop
  40268c:	370c      	adds	r7, #12
  40268e:	46bd      	mov	sp, r7
  402690:	bc80      	pop	{r7}
  402692:	4770      	bx	lr
  402694:	20019104 	.word	0x20019104
  402698:	20019150 	.word	0x20019150

0040269c <process_data_wifi>:

void process_data_wifi()
{
  40269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40269e:	af00      	add	r7, sp, #0
	
	if(strstr(input_line_wifi,"0,0"))
  4026a0:	4930      	ldr	r1, [pc, #192]	; (402764 <process_data_wifi+0xc8>)
  4026a2:	4831      	ldr	r0, [pc, #196]	; (402768 <process_data_wifi+0xcc>)
  4026a4:	4b31      	ldr	r3, [pc, #196]	; (40276c <process_data_wifi+0xd0>)
  4026a6:	4798      	blx	r3
  4026a8:	4603      	mov	r3, r0
  4026aa:	2b00      	cmp	r3, #0
  4026ac:	d002      	beq.n	4026b4 <process_data_wifi+0x18>
	{
		net_flag = true;
  4026ae:	4b30      	ldr	r3, [pc, #192]	; (402770 <process_data_wifi+0xd4>)
  4026b0:	2201      	movs	r2, #1
  4026b2:	701a      	strb	r2, [r3, #0]
	}
	
	if(strstr(input_line_wifi,"None"))
  4026b4:	492f      	ldr	r1, [pc, #188]	; (402774 <process_data_wifi+0xd8>)
  4026b6:	482c      	ldr	r0, [pc, #176]	; (402768 <process_data_wifi+0xcc>)
  4026b8:	4b2c      	ldr	r3, [pc, #176]	; (40276c <process_data_wifi+0xd0>)
  4026ba:	4798      	blx	r3
  4026bc:	4603      	mov	r3, r0
  4026be:	2b00      	cmp	r3, #0
  4026c0:	d002      	beq.n	4026c8 <process_data_wifi+0x2c>
	{
		net_flag = false;
  4026c2:	4b2b      	ldr	r3, [pc, #172]	; (402770 <process_data_wifi+0xd4>)
  4026c4:	2200      	movs	r2, #0
  4026c6:	701a      	strb	r2, [r3, #0]
	}
	
	if(strstr(input_line_wifi,"Websocket disconnected"))
  4026c8:	492b      	ldr	r1, [pc, #172]	; (402778 <process_data_wifi+0xdc>)
  4026ca:	4827      	ldr	r0, [pc, #156]	; (402768 <process_data_wifi+0xcc>)
  4026cc:	4b27      	ldr	r3, [pc, #156]	; (40276c <process_data_wifi+0xd0>)
  4026ce:	4798      	blx	r3
  4026d0:	4603      	mov	r3, r0
  4026d2:	2b00      	cmp	r3, #0
  4026d4:	d002      	beq.n	4026dc <process_data_wifi+0x40>
	{
		net_flag = false;
  4026d6:	4b26      	ldr	r3, [pc, #152]	; (402770 <process_data_wifi+0xd4>)
  4026d8:	2200      	movs	r2, #0
  4026da:	701a      	strb	r2, [r3, #0]
	}
	
	//To detect if the image_transfer function was given whose output are the words Start transfer
	if(strstr(input_line_wifi,"Start transfer"))
  4026dc:	4927      	ldr	r1, [pc, #156]	; (40277c <process_data_wifi+0xe0>)
  4026de:	4822      	ldr	r0, [pc, #136]	; (402768 <process_data_wifi+0xcc>)
  4026e0:	4b22      	ldr	r3, [pc, #136]	; (40276c <process_data_wifi+0xd0>)
  4026e2:	4798      	blx	r3
  4026e4:	4603      	mov	r3, r0
  4026e6:	2b00      	cmp	r3, #0
  4026e8:	d002      	beq.n	4026f0 <process_data_wifi+0x54>
	{
		transfer_start = true;
  4026ea:	4b25      	ldr	r3, [pc, #148]	; (402780 <process_data_wifi+0xe4>)
  4026ec:	2201      	movs	r2, #1
  4026ee:	701a      	strb	r2, [r3, #0]
	}
	
	if(strstr(input_line_wifi,"Complete"))
  4026f0:	4924      	ldr	r1, [pc, #144]	; (402784 <process_data_wifi+0xe8>)
  4026f2:	481d      	ldr	r0, [pc, #116]	; (402768 <process_data_wifi+0xcc>)
  4026f4:	4b1d      	ldr	r3, [pc, #116]	; (40276c <process_data_wifi+0xd0>)
  4026f6:	4798      	blx	r3
  4026f8:	4603      	mov	r3, r0
  4026fa:	2b00      	cmp	r3, #0
  4026fc:	d02f      	beq.n	40275e <process_data_wifi+0xc2>
	{
		//This is the 50ms delay which is given after the image_transfer is complete
		delay_ms(50);
  4026fe:	4b22      	ldr	r3, [pc, #136]	; (402788 <process_data_wifi+0xec>)
  402700:	4798      	blx	r3
  402702:	4603      	mov	r3, r0
  402704:	4619      	mov	r1, r3
  402706:	f04f 0200 	mov.w	r2, #0
  40270a:	460b      	mov	r3, r1
  40270c:	4614      	mov	r4, r2
  40270e:	18db      	adds	r3, r3, r3
  402710:	eb44 0404 	adc.w	r4, r4, r4
  402714:	185b      	adds	r3, r3, r1
  402716:	eb44 0402 	adc.w	r4, r4, r2
  40271a:	00e6      	lsls	r6, r4, #3
  40271c:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  402720:	00dd      	lsls	r5, r3, #3
  402722:	462b      	mov	r3, r5
  402724:	4634      	mov	r4, r6
  402726:	185b      	adds	r3, r3, r1
  402728:	eb44 0402 	adc.w	r4, r4, r2
  40272c:	18db      	adds	r3, r3, r3
  40272e:	eb44 0404 	adc.w	r4, r4, r4
  402732:	4619      	mov	r1, r3
  402734:	4622      	mov	r2, r4
  402736:	f243 63af 	movw	r3, #13999	; 0x36af
  40273a:	f04f 0400 	mov.w	r4, #0
  40273e:	18cd      	adds	r5, r1, r3
  402740:	eb42 0604 	adc.w	r6, r2, r4
  402744:	4628      	mov	r0, r5
  402746:	4631      	mov	r1, r6
  402748:	4c10      	ldr	r4, [pc, #64]	; (40278c <process_data_wifi+0xf0>)
  40274a:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40274e:	f04f 0300 	mov.w	r3, #0
  402752:	47a0      	blx	r4
  402754:	4603      	mov	r3, r0
  402756:	460c      	mov	r4, r1
  402758:	4618      	mov	r0, r3
  40275a:	4b0d      	ldr	r3, [pc, #52]	; (402790 <process_data_wifi+0xf4>)
  40275c:	4798      	blx	r3
	}
	
}
  40275e:	bf00      	nop
  402760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402762:	bf00      	nop
  402764:	004090dc 	.word	0x004090dc
  402768:	20019150 	.word	0x20019150
  40276c:	00403ced 	.word	0x00403ced
  402770:	2001910b 	.word	0x2001910b
  402774:	004090e0 	.word	0x004090e0
  402778:	004090e8 	.word	0x004090e8
  40277c:	00409100 	.word	0x00409100
  402780:	2001910c 	.word	0x2001910c
  402784:	00409110 	.word	0x00409110
  402788:	004023e9 	.word	0x004023e9
  40278c:	004035f5 	.word	0x004035f5
  402790:	20000001 	.word	0x20000001

00402794 <write_wifi_command>:

void write_wifi_command(char*comm, uint8_t cnt)
{
  402794:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  402798:	b082      	sub	sp, #8
  40279a:	af00      	add	r7, sp, #0
  40279c:	6078      	str	r0, [r7, #4]
  40279e:	460b      	mov	r3, r1
  4027a0:	70fb      	strb	r3, [r7, #3]
	data_recieved = 0 ;
  4027a2:	4b29      	ldr	r3, [pc, #164]	; (402848 <write_wifi_command+0xb4>)
  4027a4:	2200      	movs	r2, #0
  4027a6:	701a      	strb	r2, [r3, #0]
	usart_write_line(BOARD_USART, comm);
  4027a8:	6879      	ldr	r1, [r7, #4]
  4027aa:	4828      	ldr	r0, [pc, #160]	; (40284c <write_wifi_command+0xb8>)
  4027ac:	4b28      	ldr	r3, [pc, #160]	; (402850 <write_wifi_command+0xbc>)
  4027ae:	4798      	blx	r3
	
	timeout_counter = 0;
  4027b0:	4b28      	ldr	r3, [pc, #160]	; (402854 <write_wifi_command+0xc0>)
  4027b2:	2200      	movs	r2, #0
  4027b4:	701a      	strb	r2, [r3, #0]
	cnt = cnt * 20 ;
  4027b6:	78fb      	ldrb	r3, [r7, #3]
  4027b8:	461a      	mov	r2, r3
  4027ba:	0092      	lsls	r2, r2, #2
  4027bc:	4413      	add	r3, r2
  4027be:	009b      	lsls	r3, r3, #2
  4027c0:	70fb      	strb	r3, [r7, #3]
	while(timeout_counter<cnt && !data_recieved){
  4027c2:	e031      	b.n	402828 <write_wifi_command+0x94>
	delay_ms(10);
  4027c4:	4b24      	ldr	r3, [pc, #144]	; (402858 <write_wifi_command+0xc4>)
  4027c6:	4798      	blx	r3
  4027c8:	4603      	mov	r3, r0
  4027ca:	4619      	mov	r1, r3
  4027cc:	f04f 0200 	mov.w	r2, #0
  4027d0:	460b      	mov	r3, r1
  4027d2:	4614      	mov	r4, r2
  4027d4:	00a6      	lsls	r6, r4, #2
  4027d6:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  4027da:	009d      	lsls	r5, r3, #2
  4027dc:	462b      	mov	r3, r5
  4027de:	4634      	mov	r4, r6
  4027e0:	185b      	adds	r3, r3, r1
  4027e2:	eb44 0402 	adc.w	r4, r4, r2
  4027e6:	18db      	adds	r3, r3, r3
  4027e8:	eb44 0404 	adc.w	r4, r4, r4
  4027ec:	4619      	mov	r1, r3
  4027ee:	4622      	mov	r2, r4
  4027f0:	f243 63af 	movw	r3, #13999	; 0x36af
  4027f4:	f04f 0400 	mov.w	r4, #0
  4027f8:	eb11 0b03 	adds.w	fp, r1, r3
  4027fc:	eb42 0c04 	adc.w	ip, r2, r4
  402800:	4658      	mov	r0, fp
  402802:	4661      	mov	r1, ip
  402804:	4c15      	ldr	r4, [pc, #84]	; (40285c <write_wifi_command+0xc8>)
  402806:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40280a:	f04f 0300 	mov.w	r3, #0
  40280e:	47a0      	blx	r4
  402810:	4603      	mov	r3, r0
  402812:	460c      	mov	r4, r1
  402814:	4618      	mov	r0, r3
  402816:	4b12      	ldr	r3, [pc, #72]	; (402860 <write_wifi_command+0xcc>)
  402818:	4798      	blx	r3
	timeout_counter++;
  40281a:	4b0e      	ldr	r3, [pc, #56]	; (402854 <write_wifi_command+0xc0>)
  40281c:	781b      	ldrb	r3, [r3, #0]
  40281e:	b2db      	uxtb	r3, r3
  402820:	3301      	adds	r3, #1
  402822:	b2da      	uxtb	r2, r3
  402824:	4b0b      	ldr	r3, [pc, #44]	; (402854 <write_wifi_command+0xc0>)
  402826:	701a      	strb	r2, [r3, #0]
	while(timeout_counter<cnt && !data_recieved){
  402828:	4b0a      	ldr	r3, [pc, #40]	; (402854 <write_wifi_command+0xc0>)
  40282a:	781b      	ldrb	r3, [r3, #0]
  40282c:	b2db      	uxtb	r3, r3
  40282e:	78fa      	ldrb	r2, [r7, #3]
  402830:	429a      	cmp	r2, r3
  402832:	d904      	bls.n	40283e <write_wifi_command+0xaa>
  402834:	4b04      	ldr	r3, [pc, #16]	; (402848 <write_wifi_command+0xb4>)
  402836:	781b      	ldrb	r3, [r3, #0]
  402838:	b2db      	uxtb	r3, r3
  40283a:	2b00      	cmp	r3, #0
  40283c:	d0c2      	beq.n	4027c4 <write_wifi_command+0x30>
	}
	  
	  
	
}
  40283e:	bf00      	nop
  402840:	3708      	adds	r7, #8
  402842:	46bd      	mov	sp, r7
  402844:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  402848:	2001910e 	.word	0x2001910e
  40284c:	40024000 	.word	0x40024000
  402850:	00400af5 	.word	0x00400af5
  402854:	2001910d 	.word	0x2001910d
  402858:	004023e9 	.word	0x004023e9
  40285c:	004035f5 	.word	0x004035f5
  402860:	20000001 	.word	0x20000001

00402864 <write_image_to_file>:

void write_image_to_file()
{
  402864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402868:	b08b      	sub	sp, #44	; 0x2c
  40286a:	af00      	add	r7, sp, #0
	// if there is an image detected where the length exists
	if(image_length!= 0)														
  40286c:	4b2b      	ldr	r3, [pc, #172]	; (40291c <write_image_to_file+0xb8>)
  40286e:	681b      	ldr	r3, [r3, #0]
  402870:	2b00      	cmp	r3, #0
  402872:	d04d      	beq.n	402910 <write_image_to_file+0xac>
	{
		// create a string that contains 20 chars can hold the command
		char image_length_transfer[20];
		
		// put "image transfer" and image length together to make the final command
		sprintf(image_length_transfer,"image_transfer %d\r\n",image_length);	
  402874:	4b29      	ldr	r3, [pc, #164]	; (40291c <write_image_to_file+0xb8>)
  402876:	681a      	ldr	r2, [r3, #0]
  402878:	1d3b      	adds	r3, r7, #4
  40287a:	4929      	ldr	r1, [pc, #164]	; (402920 <write_image_to_file+0xbc>)
  40287c:	4618      	mov	r0, r3
  40287e:	4b29      	ldr	r3, [pc, #164]	; (402924 <write_image_to_file+0xc0>)
  402880:	4798      	blx	r3
		
		// write the command to the WIFI moduel
		write_wifi_command(image_length_transfer,2);							
  402882:	1d3b      	adds	r3, r7, #4
  402884:	2102      	movs	r1, #2
  402886:	4618      	mov	r0, r3
  402888:	4b27      	ldr	r3, [pc, #156]	; (402928 <write_image_to_file+0xc4>)
  40288a:	4798      	blx	r3
		while(transfer_start)													
  40288c:	e03b      	b.n	402906 <write_image_to_file+0xa2>
		{
  40288e:	466b      	mov	r3, sp
  402890:	461e      	mov	r6, r3
			// create an array for transfer content with a length that detected for that specific image
			uint8_t image_transfer[image_length];								
  402892:	4b22      	ldr	r3, [pc, #136]	; (40291c <write_image_to_file+0xb8>)
  402894:	6819      	ldr	r1, [r3, #0]
  402896:	460b      	mov	r3, r1
  402898:	3b01      	subs	r3, #1
  40289a:	623b      	str	r3, [r7, #32]
  40289c:	460a      	mov	r2, r1
  40289e:	f04f 0300 	mov.w	r3, #0
  4028a2:	00dd      	lsls	r5, r3, #3
  4028a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
  4028a8:	00d4      	lsls	r4, r2, #3
  4028aa:	460a      	mov	r2, r1
  4028ac:	f04f 0300 	mov.w	r3, #0
  4028b0:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  4028b4:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
  4028b8:	ea4f 08c2 	mov.w	r8, r2, lsl #3
  4028bc:	1dcb      	adds	r3, r1, #7
  4028be:	08db      	lsrs	r3, r3, #3
  4028c0:	00db      	lsls	r3, r3, #3
  4028c2:	ebad 0d03 	sub.w	sp, sp, r3
  4028c6:	466b      	mov	r3, sp
  4028c8:	3300      	adds	r3, #0
  4028ca:	61fb      	str	r3, [r7, #28]
			char tem_char;															
			uint8_t tem_int;													
			for(uint32_t i = 0 ;i<image_length;i++)								
  4028cc:	2300      	movs	r3, #0
  4028ce:	627b      	str	r3, [r7, #36]	; 0x24
  4028d0:	e010      	b.n	4028f4 <write_image_to_file+0x90>
			{
				// put the content on the address starting at the starting point to the tem variable
				tem_int = image_dest_buffer_ptr[start_buff+i];					
  4028d2:	4b16      	ldr	r3, [pc, #88]	; (40292c <write_image_to_file+0xc8>)
  4028d4:	681a      	ldr	r2, [r3, #0]
  4028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4028d8:	4413      	add	r3, r2
  4028da:	4a15      	ldr	r2, [pc, #84]	; (402930 <write_image_to_file+0xcc>)
  4028dc:	5cd3      	ldrb	r3, [r2, r3]
  4028de:	76fb      	strb	r3, [r7, #27]
				tem_char = tem_int;			
  4028e0:	7efb      	ldrb	r3, [r7, #27]
  4028e2:	76bb      	strb	r3, [r7, #26]
				// output the char tem to the terminal									
				usart_putchar(BOARD_USART,tem_char);								
  4028e4:	7ebb      	ldrb	r3, [r7, #26]
  4028e6:	4619      	mov	r1, r3
  4028e8:	4812      	ldr	r0, [pc, #72]	; (402934 <write_image_to_file+0xd0>)
  4028ea:	4b13      	ldr	r3, [pc, #76]	; (402938 <write_image_to_file+0xd4>)
  4028ec:	4798      	blx	r3
			for(uint32_t i = 0 ;i<image_length;i++)								
  4028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4028f0:	3301      	adds	r3, #1
  4028f2:	627b      	str	r3, [r7, #36]	; 0x24
  4028f4:	4b09      	ldr	r3, [pc, #36]	; (40291c <write_image_to_file+0xb8>)
  4028f6:	681b      	ldr	r3, [r3, #0]
  4028f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4028fa:	429a      	cmp	r2, r3
  4028fc:	d3e9      	bcc.n	4028d2 <write_image_to_file+0x6e>
			}
			transfer_start = false;												
  4028fe:	4b0f      	ldr	r3, [pc, #60]	; (40293c <write_image_to_file+0xd8>)
  402900:	2200      	movs	r2, #0
  402902:	701a      	strb	r2, [r3, #0]
  402904:	46b5      	mov	sp, r6
		while(transfer_start)													
  402906:	4b0d      	ldr	r3, [pc, #52]	; (40293c <write_image_to_file+0xd8>)
  402908:	781b      	ldrb	r3, [r3, #0]
  40290a:	b2db      	uxtb	r3, r3
  40290c:	2b00      	cmp	r3, #0
  40290e:	d1be      	bne.n	40288e <write_image_to_file+0x2a>
		}
	}
}
  402910:	bf00      	nop
  402912:	372c      	adds	r7, #44	; 0x2c
  402914:	46bd      	mov	sp, r7
  402916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40291a:	bf00      	nop
  40291c:	20000a58 	.word	0x20000a58
  402920:	0040911c 	.word	0x0040911c
  402924:	004039f1 	.word	0x004039f1
  402928:	00402795 	.word	0x00402795
  40292c:	20000a54 	.word	0x20000a54
  402930:	20000a60 	.word	0x20000a60
  402934:	40024000 	.word	0x40024000
  402938:	00400ac5 	.word	0x00400ac5
  40293c:	2001910c 	.word	0x2001910c

00402940 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  402940:	b480      	push	{r7}
  402942:	b08d      	sub	sp, #52	; 0x34
  402944:	af00      	add	r7, sp, #0
  402946:	6078      	str	r0, [r7, #4]
  402948:	6039      	str	r1, [r7, #0]
  40294a:	687b      	ldr	r3, [r7, #4]
  40294c:	62fb      	str	r3, [r7, #44]	; 0x2c
  40294e:	683b      	ldr	r3, [r7, #0]
  402950:	62bb      	str	r3, [r7, #40]	; 0x28
  402952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402954:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402958:	095a      	lsrs	r2, r3, #5
  40295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40295c:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40295e:	6a3b      	ldr	r3, [r7, #32]
  402960:	f003 031f 	and.w	r3, r3, #31
  402964:	2101      	movs	r1, #1
  402966:	fa01 f303 	lsl.w	r3, r1, r3
  40296a:	61fa      	str	r2, [r7, #28]
  40296c:	61bb      	str	r3, [r7, #24]
  40296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402970:	617b      	str	r3, [r7, #20]
  402972:	69fb      	ldr	r3, [r7, #28]
  402974:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402976:	693b      	ldr	r3, [r7, #16]
  402978:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40297c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402980:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  402982:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  402984:	697b      	ldr	r3, [r7, #20]
  402986:	f003 0308 	and.w	r3, r3, #8
  40298a:	2b00      	cmp	r3, #0
  40298c:	d003      	beq.n	402996 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  40298e:	68fb      	ldr	r3, [r7, #12]
  402990:	69ba      	ldr	r2, [r7, #24]
  402992:	665a      	str	r2, [r3, #100]	; 0x64
  402994:	e002      	b.n	40299c <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  402996:	68fb      	ldr	r3, [r7, #12]
  402998:	69ba      	ldr	r2, [r7, #24]
  40299a:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  40299c:	697b      	ldr	r3, [r7, #20]
  40299e:	f003 0310 	and.w	r3, r3, #16
  4029a2:	2b00      	cmp	r3, #0
  4029a4:	d004      	beq.n	4029b0 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  4029a6:	68fb      	ldr	r3, [r7, #12]
  4029a8:	69ba      	ldr	r2, [r7, #24]
  4029aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4029ae:	e003      	b.n	4029b8 <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  4029b0:	68fb      	ldr	r3, [r7, #12]
  4029b2:	69ba      	ldr	r2, [r7, #24]
  4029b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4029b8:	697b      	ldr	r3, [r7, #20]
  4029ba:	f003 0320 	and.w	r3, r3, #32
  4029be:	2b00      	cmp	r3, #0
  4029c0:	d003      	beq.n	4029ca <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  4029c2:	68fb      	ldr	r3, [r7, #12]
  4029c4:	69ba      	ldr	r2, [r7, #24]
  4029c6:	651a      	str	r2, [r3, #80]	; 0x50
  4029c8:	e002      	b.n	4029d0 <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  4029ca:	68fb      	ldr	r3, [r7, #12]
  4029cc:	69ba      	ldr	r2, [r7, #24]
  4029ce:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4029d0:	697b      	ldr	r3, [r7, #20]
  4029d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4029d6:	2b00      	cmp	r3, #0
  4029d8:	d003      	beq.n	4029e2 <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  4029da:	68fb      	ldr	r3, [r7, #12]
  4029dc:	69ba      	ldr	r2, [r7, #24]
  4029de:	621a      	str	r2, [r3, #32]
  4029e0:	e002      	b.n	4029e8 <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  4029e2:	68fb      	ldr	r3, [r7, #12]
  4029e4:	69ba      	ldr	r2, [r7, #24]
  4029e6:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  4029e8:	697b      	ldr	r3, [r7, #20]
  4029ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4029ee:	2b00      	cmp	r3, #0
  4029f0:	d004      	beq.n	4029fc <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  4029f2:	68fb      	ldr	r3, [r7, #12]
  4029f4:	69ba      	ldr	r2, [r7, #24]
  4029f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4029fa:	e003      	b.n	402a04 <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4029fc:	68fb      	ldr	r3, [r7, #12]
  4029fe:	69ba      	ldr	r2, [r7, #24]
  402a00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  402a04:	697b      	ldr	r3, [r7, #20]
  402a06:	f003 0301 	and.w	r3, r3, #1
  402a0a:	2b00      	cmp	r3, #0
  402a0c:	d006      	beq.n	402a1c <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  402a0e:	68fb      	ldr	r3, [r7, #12]
  402a10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402a12:	69bb      	ldr	r3, [r7, #24]
  402a14:	431a      	orrs	r2, r3
  402a16:	68fb      	ldr	r3, [r7, #12]
  402a18:	671a      	str	r2, [r3, #112]	; 0x70
  402a1a:	e006      	b.n	402a2a <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  402a1c:	68fb      	ldr	r3, [r7, #12]
  402a1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402a20:	69bb      	ldr	r3, [r7, #24]
  402a22:	43db      	mvns	r3, r3
  402a24:	401a      	ands	r2, r3
  402a26:	68fb      	ldr	r3, [r7, #12]
  402a28:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  402a2a:	697b      	ldr	r3, [r7, #20]
  402a2c:	f003 0302 	and.w	r3, r3, #2
  402a30:	2b00      	cmp	r3, #0
  402a32:	d006      	beq.n	402a42 <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  402a34:	68fb      	ldr	r3, [r7, #12]
  402a36:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402a38:	69bb      	ldr	r3, [r7, #24]
  402a3a:	431a      	orrs	r2, r3
  402a3c:	68fb      	ldr	r3, [r7, #12]
  402a3e:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  402a40:	e006      	b.n	402a50 <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  402a42:	68fb      	ldr	r3, [r7, #12]
  402a44:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402a46:	69bb      	ldr	r3, [r7, #24]
  402a48:	43db      	mvns	r3, r3
  402a4a:	401a      	ands	r2, r3
  402a4c:	68fb      	ldr	r3, [r7, #12]
  402a4e:	675a      	str	r2, [r3, #116]	; 0x74
  402a50:	bf00      	nop
  402a52:	3734      	adds	r7, #52	; 0x34
  402a54:	46bd      	mov	sp, r7
  402a56:	bc80      	pop	{r7}
  402a58:	4770      	bx	lr

00402a5a <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  402a5a:	b480      	push	{r7}
  402a5c:	b08d      	sub	sp, #52	; 0x34
  402a5e:	af00      	add	r7, sp, #0
  402a60:	6078      	str	r0, [r7, #4]
  402a62:	460b      	mov	r3, r1
  402a64:	70fb      	strb	r3, [r7, #3]
  402a66:	687b      	ldr	r3, [r7, #4]
  402a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  402a6a:	78fb      	ldrb	r3, [r7, #3]
  402a6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  402a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402a72:	627b      	str	r3, [r7, #36]	; 0x24
  402a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402a76:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  402a78:	6a3b      	ldr	r3, [r7, #32]
  402a7a:	095b      	lsrs	r3, r3, #5
  402a7c:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402a7e:	69fb      	ldr	r3, [r7, #28]
  402a80:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402a84:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402a88:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402a8a:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  402a8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402a90:	2b01      	cmp	r3, #1
  402a92:	d109      	bne.n	402aa8 <ioport_set_pin_dir+0x4e>
  402a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402a96:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  402a98:	697b      	ldr	r3, [r7, #20]
  402a9a:	f003 031f 	and.w	r3, r3, #31
  402a9e:	2201      	movs	r2, #1
  402aa0:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402aa2:	69bb      	ldr	r3, [r7, #24]
  402aa4:	611a      	str	r2, [r3, #16]
  402aa6:	e00c      	b.n	402ac2 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  402aa8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402aac:	2b00      	cmp	r3, #0
  402aae:	d108      	bne.n	402ac2 <ioport_set_pin_dir+0x68>
  402ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402ab2:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  402ab4:	693b      	ldr	r3, [r7, #16]
  402ab6:	f003 031f 	and.w	r3, r3, #31
  402aba:	2201      	movs	r2, #1
  402abc:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402abe:	69bb      	ldr	r3, [r7, #24]
  402ac0:	615a      	str	r2, [r3, #20]
  402ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402ac4:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402ac6:	68fb      	ldr	r3, [r7, #12]
  402ac8:	f003 031f 	and.w	r3, r3, #31
  402acc:	2201      	movs	r2, #1
  402ace:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402ad0:	69bb      	ldr	r3, [r7, #24]
  402ad2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  402ad6:	bf00      	nop
  402ad8:	3734      	adds	r7, #52	; 0x34
  402ada:	46bd      	mov	sp, r7
  402adc:	bc80      	pop	{r7}
  402ade:	4770      	bx	lr

00402ae0 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  402ae0:	b480      	push	{r7}
  402ae2:	b08b      	sub	sp, #44	; 0x2c
  402ae4:	af00      	add	r7, sp, #0
  402ae6:	6078      	str	r0, [r7, #4]
  402ae8:	460b      	mov	r3, r1
  402aea:	70fb      	strb	r3, [r7, #3]
  402aec:	687b      	ldr	r3, [r7, #4]
  402aee:	627b      	str	r3, [r7, #36]	; 0x24
  402af0:	78fb      	ldrb	r3, [r7, #3]
  402af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402af8:	61fb      	str	r3, [r7, #28]
  402afa:	69fb      	ldr	r3, [r7, #28]
  402afc:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  402afe:	69bb      	ldr	r3, [r7, #24]
  402b00:	095b      	lsrs	r3, r3, #5
  402b02:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402b04:	697b      	ldr	r3, [r7, #20]
  402b06:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402b0a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402b0e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402b10:	613b      	str	r3, [r7, #16]

	if (level) {
  402b12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402b16:	2b00      	cmp	r3, #0
  402b18:	d009      	beq.n	402b2e <ioport_set_pin_level+0x4e>
  402b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402b1c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402b1e:	68fb      	ldr	r3, [r7, #12]
  402b20:	f003 031f 	and.w	r3, r3, #31
  402b24:	2201      	movs	r2, #1
  402b26:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402b28:	693b      	ldr	r3, [r7, #16]
  402b2a:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  402b2c:	e008      	b.n	402b40 <ioport_set_pin_level+0x60>
  402b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402b30:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  402b32:	68bb      	ldr	r3, [r7, #8]
  402b34:	f003 031f 	and.w	r3, r3, #31
  402b38:	2201      	movs	r2, #1
  402b3a:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402b3c:	693b      	ldr	r3, [r7, #16]
  402b3e:	635a      	str	r2, [r3, #52]	; 0x34
  402b40:	bf00      	nop
  402b42:	372c      	adds	r7, #44	; 0x2c
  402b44:	46bd      	mov	sp, r7
  402b46:	bc80      	pop	{r7}
  402b48:	4770      	bx	lr
	...

00402b4c <board_init>:
#include <board.h>
#include <conf_board.h>
#include "camera.h"

void board_init(void)
{
  402b4c:	b580      	push	{r7, lr}
  402b4e:	af00      	add	r7, sp, #0
	
	//Button pin Initialization
	ioport_set_pin_dir(LED_PIN, IOPORT_DIR_OUTPUT);
  402b50:	2101      	movs	r1, #1
  402b52:	2011      	movs	r0, #17
  402b54:	4b31      	ldr	r3, [pc, #196]	; (402c1c <board_init+0xd0>)
  402b56:	4798      	blx	r3
	ioport_set_pin_level(LED_PIN, false);
  402b58:	2100      	movs	r1, #0
  402b5a:	2011      	movs	r0, #17
  402b5c:	4b30      	ldr	r3, [pc, #192]	; (402c20 <board_init+0xd4>)
  402b5e:	4798      	blx	r3
	ioport_set_pin_dir(WIFI_BUTTON_PIN, IOPORT_DIR_INPUT);
  402b60:	2100      	movs	r1, #0
  402b62:	200c      	movs	r0, #12
  402b64:	4b2d      	ldr	r3, [pc, #180]	; (402c1c <board_init+0xd0>)
  402b66:	4798      	blx	r3
	ioport_set_pin_mode(WIFI_BUTTON_PIN,IOPORT_MODE_PULLUP);
  402b68:	2108      	movs	r1, #8
  402b6a:	200c      	movs	r0, #12
  402b6c:	4b2d      	ldr	r3, [pc, #180]	; (402c24 <board_init+0xd8>)
  402b6e:	4798      	blx	r3
    ioport_set_pin_level(WIFI_BUTTON_PIN, false);
  402b70:	2100      	movs	r1, #0
  402b72:	200c      	movs	r0, #12
  402b74:	4b2a      	ldr	r3, [pc, #168]	; (402c20 <board_init+0xd4>)
  402b76:	4798      	blx	r3


	// Camera data pin Initialization
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
  402b78:	2171      	movs	r1, #113	; 0x71
  402b7a:	2010      	movs	r0, #16
  402b7c:	4b2a      	ldr	r3, [pc, #168]	; (402c28 <board_init+0xdc>)
  402b7e:	4798      	blx	r3
	gpio_configure_pin(OV_VSYNC_GPIO, OV_VSYNC_FLAGS);
  402b80:	2171      	movs	r1, #113	; 0x71
  402b82:	200f      	movs	r0, #15
  402b84:	4b28      	ldr	r3, [pc, #160]	; (402c28 <board_init+0xdc>)
  402b86:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  402b88:	4928      	ldr	r1, [pc, #160]	; (402c2c <board_init+0xe0>)
  402b8a:	2018      	movs	r0, #24
  402b8c:	4b26      	ldr	r3, [pc, #152]	; (402c28 <board_init+0xdc>)
  402b8e:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D3, OV_DATA_BUS_FLAGS);
  402b90:	4926      	ldr	r1, [pc, #152]	; (402c2c <board_init+0xe0>)
  402b92:	2019      	movs	r0, #25
  402b94:	4b24      	ldr	r3, [pc, #144]	; (402c28 <board_init+0xdc>)
  402b96:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D4, OV_DATA_BUS_FLAGS);
  402b98:	4924      	ldr	r1, [pc, #144]	; (402c2c <board_init+0xe0>)
  402b9a:	201a      	movs	r0, #26
  402b9c:	4b22      	ldr	r3, [pc, #136]	; (402c28 <board_init+0xdc>)
  402b9e:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D5, OV_DATA_BUS_FLAGS);
  402ba0:	4922      	ldr	r1, [pc, #136]	; (402c2c <board_init+0xe0>)
  402ba2:	201b      	movs	r0, #27
  402ba4:	4b20      	ldr	r3, [pc, #128]	; (402c28 <board_init+0xdc>)
  402ba6:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D6, OV_DATA_BUS_FLAGS);
  402ba8:	4920      	ldr	r1, [pc, #128]	; (402c2c <board_init+0xe0>)
  402baa:	201c      	movs	r0, #28
  402bac:	4b1e      	ldr	r3, [pc, #120]	; (402c28 <board_init+0xdc>)
  402bae:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D7, OV_DATA_BUS_FLAGS);
  402bb0:	491e      	ldr	r1, [pc, #120]	; (402c2c <board_init+0xe0>)
  402bb2:	201d      	movs	r0, #29
  402bb4:	4b1c      	ldr	r3, [pc, #112]	; (402c28 <board_init+0xdc>)
  402bb6:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D8, OV_DATA_BUS_FLAGS);
  402bb8:	491c      	ldr	r1, [pc, #112]	; (402c2c <board_init+0xe0>)
  402bba:	201e      	movs	r0, #30
  402bbc:	4b1a      	ldr	r3, [pc, #104]	; (402c28 <board_init+0xdc>)
  402bbe:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D9, OV_DATA_BUS_FLAGS);
  402bc0:	491a      	ldr	r1, [pc, #104]	; (402c2c <board_init+0xe0>)
  402bc2:	201f      	movs	r0, #31
  402bc4:	4b18      	ldr	r3, [pc, #96]	; (402c28 <board_init+0xdc>)
  402bc6:	4798      	blx	r3

	// Camera Initialization Pin 
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
  402bc8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402bcc:	2011      	movs	r0, #17
  402bce:	4b16      	ldr	r3, [pc, #88]	; (402c28 <board_init+0xdc>)
  402bd0:	4798      	blx	r3
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  402bd2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402bd6:	2003      	movs	r0, #3
  402bd8:	4b13      	ldr	r3, [pc, #76]	; (402c28 <board_init+0xdc>)
  402bda:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  402bdc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402be0:	2004      	movs	r0, #4
  402be2:	4b11      	ldr	r3, [pc, #68]	; (402c28 <board_init+0xdc>)
  402be4:	4798      	blx	r3
	gpio_configure_pin(CAM_RST, CAM_RST_FLAGS);	
  402be6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402bea:	2014      	movs	r0, #20
  402bec:	4b0e      	ldr	r3, [pc, #56]	; (402c28 <board_init+0xdc>)
  402bee:	4798      	blx	r3
	ioport_set_pin_mode(CAM_RST,IOPORT_MODE_PULLUP);
  402bf0:	2108      	movs	r1, #8
  402bf2:	2014      	movs	r0, #20
  402bf4:	4b0b      	ldr	r3, [pc, #44]	; (402c24 <board_init+0xd8>)
  402bf6:	4798      	blx	r3
	ioport_set_pin_level(CAM_RST, false);
  402bf8:	2100      	movs	r1, #0
  402bfa:	2014      	movs	r0, #20
  402bfc:	4b08      	ldr	r3, [pc, #32]	; (402c20 <board_init+0xd4>)
  402bfe:	4798      	blx	r3
	
	
	gpio_configure_pin(NET_PIN, NET_PIN_FLAGS);
  402c00:	490b      	ldr	r1, [pc, #44]	; (402c30 <board_init+0xe4>)
  402c02:	2020      	movs	r0, #32
  402c04:	4b08      	ldr	r3, [pc, #32]	; (402c28 <board_init+0xdc>)
  402c06:	4798      	blx	r3
	ioport_set_pin_dir(NET_PIN, IOPORT_DIR_INPUT);
  402c08:	2100      	movs	r1, #0
  402c0a:	2020      	movs	r0, #32
  402c0c:	4b03      	ldr	r3, [pc, #12]	; (402c1c <board_init+0xd0>)
  402c0e:	4798      	blx	r3
	ioport_set_pin_mode(NET_PIN, IOPORT_MODE_PULLUP);
  402c10:	2108      	movs	r1, #8
  402c12:	2020      	movs	r0, #32
  402c14:	4b03      	ldr	r3, [pc, #12]	; (402c24 <board_init+0xd8>)
  402c16:	4798      	blx	r3
}
  402c18:	bf00      	nop
  402c1a:	bd80      	pop	{r7, pc}
  402c1c:	00402a5b 	.word	0x00402a5b
  402c20:	00402ae1 	.word	0x00402ae1
  402c24:	00402941 	.word	0x00402941
  402c28:	0040120d 	.word	0x0040120d
  402c2c:	28000001 	.word	0x28000001
  402c30:	28000079 	.word	0x28000079

00402c34 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402c34:	b580      	push	{r7, lr}
  402c36:	b084      	sub	sp, #16
  402c38:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  402c3a:	4b27      	ldr	r3, [pc, #156]	; (402cd8 <Reset_Handler+0xa4>)
  402c3c:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  402c3e:	4b27      	ldr	r3, [pc, #156]	; (402cdc <Reset_Handler+0xa8>)
  402c40:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  402c42:	68fa      	ldr	r2, [r7, #12]
  402c44:	68bb      	ldr	r3, [r7, #8]
  402c46:	429a      	cmp	r2, r3
  402c48:	d90d      	bls.n	402c66 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  402c4a:	e007      	b.n	402c5c <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  402c4c:	68bb      	ldr	r3, [r7, #8]
  402c4e:	1d1a      	adds	r2, r3, #4
  402c50:	60ba      	str	r2, [r7, #8]
  402c52:	68fa      	ldr	r2, [r7, #12]
  402c54:	1d11      	adds	r1, r2, #4
  402c56:	60f9      	str	r1, [r7, #12]
  402c58:	6812      	ldr	r2, [r2, #0]
  402c5a:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  402c5c:	68bb      	ldr	r3, [r7, #8]
  402c5e:	4a20      	ldr	r2, [pc, #128]	; (402ce0 <Reset_Handler+0xac>)
  402c60:	4293      	cmp	r3, r2
  402c62:	d3f3      	bcc.n	402c4c <Reset_Handler+0x18>
  402c64:	e020      	b.n	402ca8 <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  402c66:	68fa      	ldr	r2, [r7, #12]
  402c68:	68bb      	ldr	r3, [r7, #8]
  402c6a:	429a      	cmp	r2, r3
  402c6c:	d21c      	bcs.n	402ca8 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  402c6e:	4a1c      	ldr	r2, [pc, #112]	; (402ce0 <Reset_Handler+0xac>)
  402c70:	4b1a      	ldr	r3, [pc, #104]	; (402cdc <Reset_Handler+0xa8>)
  402c72:	1ad3      	subs	r3, r2, r3
  402c74:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  402c76:	68fa      	ldr	r2, [r7, #12]
  402c78:	687b      	ldr	r3, [r7, #4]
  402c7a:	4413      	add	r3, r2
  402c7c:	3b04      	subs	r3, #4
  402c7e:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  402c80:	68ba      	ldr	r2, [r7, #8]
  402c82:	687b      	ldr	r3, [r7, #4]
  402c84:	4413      	add	r3, r2
  402c86:	3b04      	subs	r3, #4
  402c88:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  402c8a:	e00a      	b.n	402ca2 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  402c8c:	68bb      	ldr	r3, [r7, #8]
  402c8e:	1f1a      	subs	r2, r3, #4
  402c90:	60ba      	str	r2, [r7, #8]
  402c92:	68fa      	ldr	r2, [r7, #12]
  402c94:	1f11      	subs	r1, r2, #4
  402c96:	60f9      	str	r1, [r7, #12]
  402c98:	6812      	ldr	r2, [r2, #0]
  402c9a:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  402c9c:	687b      	ldr	r3, [r7, #4]
  402c9e:	3b04      	subs	r3, #4
  402ca0:	607b      	str	r3, [r7, #4]
  402ca2:	687b      	ldr	r3, [r7, #4]
  402ca4:	2b00      	cmp	r3, #0
  402ca6:	d1f1      	bne.n	402c8c <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402ca8:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402caa:	4b0e      	ldr	r3, [pc, #56]	; (402ce4 <Reset_Handler+0xb0>)
  402cac:	60bb      	str	r3, [r7, #8]
  402cae:	e004      	b.n	402cba <Reset_Handler+0x86>
		*pDest++ = 0;
  402cb0:	68bb      	ldr	r3, [r7, #8]
  402cb2:	1d1a      	adds	r2, r3, #4
  402cb4:	60ba      	str	r2, [r7, #8]
  402cb6:	2200      	movs	r2, #0
  402cb8:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  402cba:	68bb      	ldr	r3, [r7, #8]
  402cbc:	4a0a      	ldr	r2, [pc, #40]	; (402ce8 <Reset_Handler+0xb4>)
  402cbe:	4293      	cmp	r3, r2
  402cc0:	d3f6      	bcc.n	402cb0 <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  402cc2:	4b0a      	ldr	r3, [pc, #40]	; (402cec <Reset_Handler+0xb8>)
  402cc4:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  402cc6:	4a0a      	ldr	r2, [pc, #40]	; (402cf0 <Reset_Handler+0xbc>)
  402cc8:	68fb      	ldr	r3, [r7, #12]
  402cca:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  402ccc:	4b09      	ldr	r3, [pc, #36]	; (402cf4 <Reset_Handler+0xc0>)
  402cce:	4798      	blx	r3

	/* Branch to main function */
	main();
  402cd0:	4b09      	ldr	r3, [pc, #36]	; (402cf8 <Reset_Handler+0xc4>)
  402cd2:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  402cd4:	e7fe      	b.n	402cd4 <Reset_Handler+0xa0>
  402cd6:	bf00      	nop
  402cd8:	0040940c 	.word	0x0040940c
  402cdc:	20000000 	.word	0x20000000
  402ce0:	200009bc 	.word	0x200009bc
  402ce4:	200009bc 	.word	0x200009bc
  402ce8:	20019540 	.word	0x20019540
  402cec:	00400000 	.word	0x00400000
  402cf0:	e000ed00 	.word	0xe000ed00
  402cf4:	00403905 	.word	0x00403905
  402cf8:	004030b1 	.word	0x004030b1

00402cfc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402cfc:	b480      	push	{r7}
  402cfe:	af00      	add	r7, sp, #0
	while (1) {
  402d00:	e7fe      	b.n	402d00 <Dummy_Handler+0x4>
	...

00402d04 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  402d04:	b480      	push	{r7}
  402d06:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  402d08:	4b5d      	ldr	r3, [pc, #372]	; (402e80 <SystemCoreClockUpdate+0x17c>)
  402d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402d0c:	f003 0303 	and.w	r3, r3, #3
  402d10:	2b03      	cmp	r3, #3
  402d12:	f200 8096 	bhi.w	402e42 <SystemCoreClockUpdate+0x13e>
  402d16:	a201      	add	r2, pc, #4	; (adr r2, 402d1c <SystemCoreClockUpdate+0x18>)
  402d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402d1c:	00402d2d 	.word	0x00402d2d
  402d20:	00402d4d 	.word	0x00402d4d
  402d24:	00402d97 	.word	0x00402d97
  402d28:	00402d97 	.word	0x00402d97
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402d2c:	4b55      	ldr	r3, [pc, #340]	; (402e84 <SystemCoreClockUpdate+0x180>)
  402d2e:	695b      	ldr	r3, [r3, #20]
  402d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402d34:	2b00      	cmp	r3, #0
  402d36:	d004      	beq.n	402d42 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402d38:	4b53      	ldr	r3, [pc, #332]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402d3a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402d3e:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  402d40:	e080      	b.n	402e44 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402d42:	4b51      	ldr	r3, [pc, #324]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402d44:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402d48:	601a      	str	r2, [r3, #0]
		break;
  402d4a:	e07b      	b.n	402e44 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402d4c:	4b4c      	ldr	r3, [pc, #304]	; (402e80 <SystemCoreClockUpdate+0x17c>)
  402d4e:	6a1b      	ldr	r3, [r3, #32]
  402d50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402d54:	2b00      	cmp	r3, #0
  402d56:	d003      	beq.n	402d60 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  402d58:	4b4b      	ldr	r3, [pc, #300]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402d5a:	4a4c      	ldr	r2, [pc, #304]	; (402e8c <SystemCoreClockUpdate+0x188>)
  402d5c:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  402d5e:	e071      	b.n	402e44 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402d60:	4b49      	ldr	r3, [pc, #292]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402d62:	4a4b      	ldr	r2, [pc, #300]	; (402e90 <SystemCoreClockUpdate+0x18c>)
  402d64:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402d66:	4b46      	ldr	r3, [pc, #280]	; (402e80 <SystemCoreClockUpdate+0x17c>)
  402d68:	6a1b      	ldr	r3, [r3, #32]
  402d6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402d6e:	2b10      	cmp	r3, #16
  402d70:	d008      	beq.n	402d84 <SystemCoreClockUpdate+0x80>
  402d72:	2b20      	cmp	r3, #32
  402d74:	d00a      	beq.n	402d8c <SystemCoreClockUpdate+0x88>
  402d76:	2b00      	cmp	r3, #0
  402d78:	d000      	beq.n	402d7c <SystemCoreClockUpdate+0x78>
			break;
  402d7a:	e00b      	b.n	402d94 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402d7c:	4b42      	ldr	r3, [pc, #264]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402d7e:	4a44      	ldr	r2, [pc, #272]	; (402e90 <SystemCoreClockUpdate+0x18c>)
  402d80:	601a      	str	r2, [r3, #0]
			break;
  402d82:	e007      	b.n	402d94 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402d84:	4b40      	ldr	r3, [pc, #256]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402d86:	4a43      	ldr	r2, [pc, #268]	; (402e94 <SystemCoreClockUpdate+0x190>)
  402d88:	601a      	str	r2, [r3, #0]
			break;
  402d8a:	e003      	b.n	402d94 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402d8c:	4b3e      	ldr	r3, [pc, #248]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402d8e:	4a3f      	ldr	r2, [pc, #252]	; (402e8c <SystemCoreClockUpdate+0x188>)
  402d90:	601a      	str	r2, [r3, #0]
			break;
  402d92:	bf00      	nop
		break;
  402d94:	e056      	b.n	402e44 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402d96:	4b3a      	ldr	r3, [pc, #232]	; (402e80 <SystemCoreClockUpdate+0x17c>)
  402d98:	6a1b      	ldr	r3, [r3, #32]
  402d9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402d9e:	2b00      	cmp	r3, #0
  402da0:	d003      	beq.n	402daa <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402da2:	4b39      	ldr	r3, [pc, #228]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402da4:	4a39      	ldr	r2, [pc, #228]	; (402e8c <SystemCoreClockUpdate+0x188>)
  402da6:	601a      	str	r2, [r3, #0]
  402da8:	e019      	b.n	402dde <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402daa:	4b37      	ldr	r3, [pc, #220]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402dac:	4a38      	ldr	r2, [pc, #224]	; (402e90 <SystemCoreClockUpdate+0x18c>)
  402dae:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402db0:	4b33      	ldr	r3, [pc, #204]	; (402e80 <SystemCoreClockUpdate+0x17c>)
  402db2:	6a1b      	ldr	r3, [r3, #32]
  402db4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402db8:	2b10      	cmp	r3, #16
  402dba:	d008      	beq.n	402dce <SystemCoreClockUpdate+0xca>
  402dbc:	2b20      	cmp	r3, #32
  402dbe:	d00a      	beq.n	402dd6 <SystemCoreClockUpdate+0xd2>
  402dc0:	2b00      	cmp	r3, #0
  402dc2:	d000      	beq.n	402dc6 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  402dc4:	e00b      	b.n	402dde <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402dc6:	4b30      	ldr	r3, [pc, #192]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402dc8:	4a31      	ldr	r2, [pc, #196]	; (402e90 <SystemCoreClockUpdate+0x18c>)
  402dca:	601a      	str	r2, [r3, #0]
					break;
  402dcc:	e007      	b.n	402dde <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402dce:	4b2e      	ldr	r3, [pc, #184]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402dd0:	4a30      	ldr	r2, [pc, #192]	; (402e94 <SystemCoreClockUpdate+0x190>)
  402dd2:	601a      	str	r2, [r3, #0]
					break;
  402dd4:	e003      	b.n	402dde <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402dd6:	4b2c      	ldr	r3, [pc, #176]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402dd8:	4a2c      	ldr	r2, [pc, #176]	; (402e8c <SystemCoreClockUpdate+0x188>)
  402dda:	601a      	str	r2, [r3, #0]
					break;
  402ddc:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  402dde:	4b28      	ldr	r3, [pc, #160]	; (402e80 <SystemCoreClockUpdate+0x17c>)
  402de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402de2:	f003 0303 	and.w	r3, r3, #3
  402de6:	2b02      	cmp	r3, #2
  402de8:	d115      	bne.n	402e16 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402dea:	4b25      	ldr	r3, [pc, #148]	; (402e80 <SystemCoreClockUpdate+0x17c>)
  402dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  402dee:	0c1b      	lsrs	r3, r3, #16
  402df0:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402df4:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402df6:	4a24      	ldr	r2, [pc, #144]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402df8:	6812      	ldr	r2, [r2, #0]
  402dfa:	fb02 f303 	mul.w	r3, r2, r3
  402dfe:	4a22      	ldr	r2, [pc, #136]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402e00:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402e02:	4b1f      	ldr	r3, [pc, #124]	; (402e80 <SystemCoreClockUpdate+0x17c>)
  402e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  402e06:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402e08:	4a1f      	ldr	r2, [pc, #124]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402e0a:	6812      	ldr	r2, [r2, #0]
  402e0c:	fbb2 f3f3 	udiv	r3, r2, r3
  402e10:	4a1d      	ldr	r2, [pc, #116]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402e12:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  402e14:	e016      	b.n	402e44 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402e16:	4b1a      	ldr	r3, [pc, #104]	; (402e80 <SystemCoreClockUpdate+0x17c>)
  402e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  402e1a:	0c1b      	lsrs	r3, r3, #16
  402e1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402e20:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402e22:	4a19      	ldr	r2, [pc, #100]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402e24:	6812      	ldr	r2, [r2, #0]
  402e26:	fb02 f303 	mul.w	r3, r2, r3
  402e2a:	4a17      	ldr	r2, [pc, #92]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402e2c:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402e2e:	4b14      	ldr	r3, [pc, #80]	; (402e80 <SystemCoreClockUpdate+0x17c>)
  402e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  402e32:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402e34:	4a14      	ldr	r2, [pc, #80]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402e36:	6812      	ldr	r2, [r2, #0]
  402e38:	fbb2 f3f3 	udiv	r3, r2, r3
  402e3c:	4a12      	ldr	r2, [pc, #72]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402e3e:	6013      	str	r3, [r2, #0]
		break;
  402e40:	e000      	b.n	402e44 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  402e42:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  402e44:	4b0e      	ldr	r3, [pc, #56]	; (402e80 <SystemCoreClockUpdate+0x17c>)
  402e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402e48:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402e4c:	2b70      	cmp	r3, #112	; 0x70
  402e4e:	d108      	bne.n	402e62 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  402e50:	4b0d      	ldr	r3, [pc, #52]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402e52:	681b      	ldr	r3, [r3, #0]
  402e54:	4a10      	ldr	r2, [pc, #64]	; (402e98 <SystemCoreClockUpdate+0x194>)
  402e56:	fba2 2303 	umull	r2, r3, r2, r3
  402e5a:	085b      	lsrs	r3, r3, #1
  402e5c:	4a0a      	ldr	r2, [pc, #40]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402e5e:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  402e60:	e00a      	b.n	402e78 <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402e62:	4b07      	ldr	r3, [pc, #28]	; (402e80 <SystemCoreClockUpdate+0x17c>)
  402e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402e66:	091b      	lsrs	r3, r3, #4
  402e68:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  402e6c:	4a06      	ldr	r2, [pc, #24]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402e6e:	6812      	ldr	r2, [r2, #0]
  402e70:	fa22 f303 	lsr.w	r3, r2, r3
  402e74:	4a04      	ldr	r2, [pc, #16]	; (402e88 <SystemCoreClockUpdate+0x184>)
  402e76:	6013      	str	r3, [r2, #0]
}
  402e78:	bf00      	nop
  402e7a:	46bd      	mov	sp, r7
  402e7c:	bc80      	pop	{r7}
  402e7e:	4770      	bx	lr
  402e80:	400e0400 	.word	0x400e0400
  402e84:	400e1410 	.word	0x400e1410
  402e88:	2000000c 	.word	0x2000000c
  402e8c:	00b71b00 	.word	0x00b71b00
  402e90:	003d0900 	.word	0x003d0900
  402e94:	007a1200 	.word	0x007a1200
  402e98:	aaaaaaab 	.word	0xaaaaaaab

00402e9c <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  402e9c:	b480      	push	{r7}
  402e9e:	b083      	sub	sp, #12
  402ea0:	af00      	add	r7, sp, #0
  402ea2:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402ea4:	687b      	ldr	r3, [r7, #4]
  402ea6:	4a18      	ldr	r2, [pc, #96]	; (402f08 <system_init_flash+0x6c>)
  402ea8:	4293      	cmp	r3, r2
  402eaa:	d804      	bhi.n	402eb6 <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402eac:	4b17      	ldr	r3, [pc, #92]	; (402f0c <system_init_flash+0x70>)
  402eae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402eb2:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402eb4:	e023      	b.n	402efe <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402eb6:	687b      	ldr	r3, [r7, #4]
  402eb8:	4a15      	ldr	r2, [pc, #84]	; (402f10 <system_init_flash+0x74>)
  402eba:	4293      	cmp	r3, r2
  402ebc:	d803      	bhi.n	402ec6 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402ebe:	4b13      	ldr	r3, [pc, #76]	; (402f0c <system_init_flash+0x70>)
  402ec0:	4a14      	ldr	r2, [pc, #80]	; (402f14 <system_init_flash+0x78>)
  402ec2:	601a      	str	r2, [r3, #0]
}
  402ec4:	e01b      	b.n	402efe <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402ec6:	687b      	ldr	r3, [r7, #4]
  402ec8:	4a13      	ldr	r2, [pc, #76]	; (402f18 <system_init_flash+0x7c>)
  402eca:	4293      	cmp	r3, r2
  402ecc:	d803      	bhi.n	402ed6 <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402ece:	4b0f      	ldr	r3, [pc, #60]	; (402f0c <system_init_flash+0x70>)
  402ed0:	4a12      	ldr	r2, [pc, #72]	; (402f1c <system_init_flash+0x80>)
  402ed2:	601a      	str	r2, [r3, #0]
}
  402ed4:	e013      	b.n	402efe <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402ed6:	687b      	ldr	r3, [r7, #4]
  402ed8:	4a11      	ldr	r2, [pc, #68]	; (402f20 <system_init_flash+0x84>)
  402eda:	4293      	cmp	r3, r2
  402edc:	d803      	bhi.n	402ee6 <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402ede:	4b0b      	ldr	r3, [pc, #44]	; (402f0c <system_init_flash+0x70>)
  402ee0:	4a10      	ldr	r2, [pc, #64]	; (402f24 <system_init_flash+0x88>)
  402ee2:	601a      	str	r2, [r3, #0]
}
  402ee4:	e00b      	b.n	402efe <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402ee6:	687b      	ldr	r3, [r7, #4]
  402ee8:	4a0f      	ldr	r2, [pc, #60]	; (402f28 <system_init_flash+0x8c>)
  402eea:	4293      	cmp	r3, r2
  402eec:	d804      	bhi.n	402ef8 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402eee:	4b07      	ldr	r3, [pc, #28]	; (402f0c <system_init_flash+0x70>)
  402ef0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402ef4:	601a      	str	r2, [r3, #0]
}
  402ef6:	e002      	b.n	402efe <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402ef8:	4b04      	ldr	r3, [pc, #16]	; (402f0c <system_init_flash+0x70>)
  402efa:	4a0c      	ldr	r2, [pc, #48]	; (402f2c <system_init_flash+0x90>)
  402efc:	601a      	str	r2, [r3, #0]
}
  402efe:	bf00      	nop
  402f00:	370c      	adds	r7, #12
  402f02:	46bd      	mov	sp, r7
  402f04:	bc80      	pop	{r7}
  402f06:	4770      	bx	lr
  402f08:	01312cff 	.word	0x01312cff
  402f0c:	400e0a00 	.word	0x400e0a00
  402f10:	026259ff 	.word	0x026259ff
  402f14:	04000100 	.word	0x04000100
  402f18:	039386ff 	.word	0x039386ff
  402f1c:	04000200 	.word	0x04000200
  402f20:	04c4b3ff 	.word	0x04c4b3ff
  402f24:	04000300 	.word	0x04000300
  402f28:	05f5e0ff 	.word	0x05f5e0ff
  402f2c:	04000500 	.word	0x04000500

00402f30 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  402f30:	b480      	push	{r7}
  402f32:	b085      	sub	sp, #20
  402f34:	af00      	add	r7, sp, #0
  402f36:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  402f38:	4b10      	ldr	r3, [pc, #64]	; (402f7c <_sbrk+0x4c>)
  402f3a:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  402f3c:	4b10      	ldr	r3, [pc, #64]	; (402f80 <_sbrk+0x50>)
  402f3e:	681b      	ldr	r3, [r3, #0]
  402f40:	2b00      	cmp	r3, #0
  402f42:	d102      	bne.n	402f4a <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  402f44:	4b0e      	ldr	r3, [pc, #56]	; (402f80 <_sbrk+0x50>)
  402f46:	4a0f      	ldr	r2, [pc, #60]	; (402f84 <_sbrk+0x54>)
  402f48:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402f4a:	4b0d      	ldr	r3, [pc, #52]	; (402f80 <_sbrk+0x50>)
  402f4c:	681b      	ldr	r3, [r3, #0]
  402f4e:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  402f50:	68ba      	ldr	r2, [r7, #8]
  402f52:	687b      	ldr	r3, [r7, #4]
  402f54:	441a      	add	r2, r3
  402f56:	68fb      	ldr	r3, [r7, #12]
  402f58:	429a      	cmp	r2, r3
  402f5a:	dd02      	ble.n	402f62 <_sbrk+0x32>
		return (caddr_t) -1;	
  402f5c:	f04f 33ff 	mov.w	r3, #4294967295
  402f60:	e006      	b.n	402f70 <_sbrk+0x40>
	}

	heap += incr;
  402f62:	4b07      	ldr	r3, [pc, #28]	; (402f80 <_sbrk+0x50>)
  402f64:	681a      	ldr	r2, [r3, #0]
  402f66:	687b      	ldr	r3, [r7, #4]
  402f68:	4413      	add	r3, r2
  402f6a:	4a05      	ldr	r2, [pc, #20]	; (402f80 <_sbrk+0x50>)
  402f6c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  402f6e:	68bb      	ldr	r3, [r7, #8]
}
  402f70:	4618      	mov	r0, r3
  402f72:	3714      	adds	r7, #20
  402f74:	46bd      	mov	sp, r7
  402f76:	bc80      	pop	{r7}
  402f78:	4770      	bx	lr
  402f7a:	bf00      	nop
  402f7c:	2001fffc 	.word	0x2001fffc
  402f80:	20019114 	.word	0x20019114
  402f84:	2001c540 	.word	0x2001c540

00402f88 <osc_get_rate>:
{
  402f88:	b480      	push	{r7}
  402f8a:	b083      	sub	sp, #12
  402f8c:	af00      	add	r7, sp, #0
  402f8e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402f90:	687b      	ldr	r3, [r7, #4]
  402f92:	2b07      	cmp	r3, #7
  402f94:	d825      	bhi.n	402fe2 <osc_get_rate+0x5a>
  402f96:	a201      	add	r2, pc, #4	; (adr r2, 402f9c <osc_get_rate+0x14>)
  402f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402f9c:	00402fbd 	.word	0x00402fbd
  402fa0:	00402fc3 	.word	0x00402fc3
  402fa4:	00402fc9 	.word	0x00402fc9
  402fa8:	00402fcf 	.word	0x00402fcf
  402fac:	00402fd3 	.word	0x00402fd3
  402fb0:	00402fd7 	.word	0x00402fd7
  402fb4:	00402fdb 	.word	0x00402fdb
  402fb8:	00402fdf 	.word	0x00402fdf
		return OSC_SLCK_32K_RC_HZ;
  402fbc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402fc0:	e010      	b.n	402fe4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  402fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402fc6:	e00d      	b.n	402fe4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402fc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402fcc:	e00a      	b.n	402fe4 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  402fce:	4b08      	ldr	r3, [pc, #32]	; (402ff0 <osc_get_rate+0x68>)
  402fd0:	e008      	b.n	402fe4 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  402fd2:	4b08      	ldr	r3, [pc, #32]	; (402ff4 <osc_get_rate+0x6c>)
  402fd4:	e006      	b.n	402fe4 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  402fd6:	4b08      	ldr	r3, [pc, #32]	; (402ff8 <osc_get_rate+0x70>)
  402fd8:	e004      	b.n	402fe4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  402fda:	4b07      	ldr	r3, [pc, #28]	; (402ff8 <osc_get_rate+0x70>)
  402fdc:	e002      	b.n	402fe4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  402fde:	4b06      	ldr	r3, [pc, #24]	; (402ff8 <osc_get_rate+0x70>)
  402fe0:	e000      	b.n	402fe4 <osc_get_rate+0x5c>
	return 0;
  402fe2:	2300      	movs	r3, #0
}
  402fe4:	4618      	mov	r0, r3
  402fe6:	370c      	adds	r7, #12
  402fe8:	46bd      	mov	sp, r7
  402fea:	bc80      	pop	{r7}
  402fec:	4770      	bx	lr
  402fee:	bf00      	nop
  402ff0:	003d0900 	.word	0x003d0900
  402ff4:	007a1200 	.word	0x007a1200
  402ff8:	00b71b00 	.word	0x00b71b00

00402ffc <sysclk_get_main_hz>:
{
  402ffc:	b580      	push	{r7, lr}
  402ffe:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  403000:	2006      	movs	r0, #6
  403002:	4b04      	ldr	r3, [pc, #16]	; (403014 <sysclk_get_main_hz+0x18>)
  403004:	4798      	blx	r3
  403006:	4602      	mov	r2, r0
  403008:	4613      	mov	r3, r2
  40300a:	009b      	lsls	r3, r3, #2
  40300c:	4413      	add	r3, r2
  40300e:	009b      	lsls	r3, r3, #2
}
  403010:	4618      	mov	r0, r3
  403012:	bd80      	pop	{r7, pc}
  403014:	00402f89 	.word	0x00402f89

00403018 <sysclk_get_cpu_hz>:
{
  403018:	b580      	push	{r7, lr}
  40301a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  40301c:	4b02      	ldr	r3, [pc, #8]	; (403028 <sysclk_get_cpu_hz+0x10>)
  40301e:	4798      	blx	r3
  403020:	4603      	mov	r3, r0
  403022:	085b      	lsrs	r3, r3, #1
}
  403024:	4618      	mov	r0, r3
  403026:	bd80      	pop	{r7, pc}
  403028:	00402ffd 	.word	0x00402ffd

0040302c <sysclk_enable_peripheral_clock>:
{
  40302c:	b580      	push	{r7, lr}
  40302e:	b082      	sub	sp, #8
  403030:	af00      	add	r7, sp, #0
  403032:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  403034:	6878      	ldr	r0, [r7, #4]
  403036:	4b03      	ldr	r3, [pc, #12]	; (403044 <sysclk_enable_peripheral_clock+0x18>)
  403038:	4798      	blx	r3
}
  40303a:	bf00      	nop
  40303c:	3708      	adds	r7, #8
  40303e:	46bd      	mov	sp, r7
  403040:	bd80      	pop	{r7, pc}
  403042:	bf00      	nop
  403044:	004016d5 	.word	0x004016d5

00403048 <ioport_init>:
{
  403048:	b580      	push	{r7, lr}
  40304a:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  40304c:	200b      	movs	r0, #11
  40304e:	4b03      	ldr	r3, [pc, #12]	; (40305c <ioport_init+0x14>)
  403050:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  403052:	200c      	movs	r0, #12
  403054:	4b01      	ldr	r3, [pc, #4]	; (40305c <ioport_init+0x14>)
  403056:	4798      	blx	r3
}
  403058:	bf00      	nop
  40305a:	bd80      	pop	{r7, pc}
  40305c:	0040302d 	.word	0x0040302d

00403060 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  403060:	b480      	push	{r7}
  403062:	b089      	sub	sp, #36	; 0x24
  403064:	af00      	add	r7, sp, #0
  403066:	6078      	str	r0, [r7, #4]
  403068:	687b      	ldr	r3, [r7, #4]
  40306a:	61fb      	str	r3, [r7, #28]
  40306c:	69fb      	ldr	r3, [r7, #28]
  40306e:	61bb      	str	r3, [r7, #24]
  403070:	69bb      	ldr	r3, [r7, #24]
  403072:	617b      	str	r3, [r7, #20]
	return pin >> 5;
  403074:	697b      	ldr	r3, [r7, #20]
  403076:	095b      	lsrs	r3, r3, #5
  403078:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40307a:	693b      	ldr	r3, [r7, #16]
  40307c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403080:	f203 7307 	addw	r3, r3, #1799	; 0x707
  403084:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  403086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  403088:	69fb      	ldr	r3, [r7, #28]
  40308a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40308c:	68fb      	ldr	r3, [r7, #12]
  40308e:	f003 031f 	and.w	r3, r3, #31
  403092:	2101      	movs	r1, #1
  403094:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  403098:	4013      	ands	r3, r2
  40309a:	2b00      	cmp	r3, #0
  40309c:	bf14      	ite	ne
  40309e:	2301      	movne	r3, #1
  4030a0:	2300      	moveq	r3, #0
  4030a2:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  4030a4:	4618      	mov	r0, r3
  4030a6:	3724      	adds	r7, #36	; 0x24
  4030a8:	46bd      	mov	sp, r7
  4030aa:	bc80      	pop	{r7}
  4030ac:	4770      	bx	lr
	...

004030b0 <main>:
#include <conf_clock.h>
#include <conf_board.h>


int main (void)
{	
  4030b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4030b4:	b0a5      	sub	sp, #148	; 0x94
  4030b6:	af00      	add	r7, sp, #0
	// All the initialization goes here, the individual pins are intialised in the init.c function
	sysclk_init();
  4030b8:	4b64      	ldr	r3, [pc, #400]	; (40324c <main+0x19c>)
  4030ba:	4798      	blx	r3
	wdt_disable(WDT);
  4030bc:	4864      	ldr	r0, [pc, #400]	; (403250 <main+0x1a0>)
  4030be:	4b65      	ldr	r3, [pc, #404]	; (403254 <main+0x1a4>)
  4030c0:	4798      	blx	r3
	board_init();
  4030c2:	4b65      	ldr	r3, [pc, #404]	; (403258 <main+0x1a8>)
  4030c4:	4798      	blx	r3
	ioport_init();
  4030c6:	4b65      	ldr	r3, [pc, #404]	; (40325c <main+0x1ac>)
  4030c8:	4798      	blx	r3
	configure_tc();
  4030ca:	4b65      	ldr	r3, [pc, #404]	; (403260 <main+0x1b0>)
  4030cc:	4798      	blx	r3
	tc_start(TC0,0);
  4030ce:	2100      	movs	r1, #0
  4030d0:	4864      	ldr	r0, [pc, #400]	; (403264 <main+0x1b4>)
  4030d2:	4b65      	ldr	r3, [pc, #404]	; (403268 <main+0x1b8>)
  4030d4:	4798      	blx	r3
	
	//All configuration goes here
	configure_usart_wifi();
  4030d6:	4b65      	ldr	r3, [pc, #404]	; (40326c <main+0x1bc>)
  4030d8:	4798      	blx	r3
	configure_wifi_comm_pin();
  4030da:	4b65      	ldr	r3, [pc, #404]	; (403270 <main+0x1c0>)
  4030dc:	4798      	blx	r3
	configure_wifi_web_setup_pin();
  4030de:	4b65      	ldr	r3, [pc, #404]	; (403274 <main+0x1c4>)
  4030e0:	4798      	blx	r3
	configure_camera();
  4030e2:	4b65      	ldr	r3, [pc, #404]	; (403278 <main+0x1c8>)
  4030e4:	4798      	blx	r3
	
	
	//This is the reboot function, a delay of 10s is added so that it immediately doesn't go into the while loop and gives sufficient time for the reboot of the wifi chip to occur
	wifi_button_flag = false;
  4030e6:	4a65      	ldr	r2, [pc, #404]	; (40327c <main+0x1cc>)
  4030e8:	2300      	movs	r3, #0
  4030ea:	7013      	strb	r3, [r2, #0]
	wifi_status_flag = false;
  4030ec:	4a64      	ldr	r2, [pc, #400]	; (403280 <main+0x1d0>)
  4030ee:	2300      	movs	r3, #0
  4030f0:	7013      	strb	r3, [r2, #0]
	net_flag = false;
  4030f2:	4a64      	ldr	r2, [pc, #400]	; (403284 <main+0x1d4>)
  4030f4:	2300      	movs	r3, #0
  4030f6:	7013      	strb	r3, [r2, #0]
 	usart_write_line(BOARD_USART,"reboot\r\n");
  4030f8:	4963      	ldr	r1, [pc, #396]	; (403288 <main+0x1d8>)
  4030fa:	4864      	ldr	r0, [pc, #400]	; (40328c <main+0x1dc>)
  4030fc:	4b64      	ldr	r3, [pc, #400]	; (403290 <main+0x1e0>)
  4030fe:	4798      	blx	r3
 	delay_ms(10000);
  403100:	4b64      	ldr	r3, [pc, #400]	; (403294 <main+0x1e4>)
  403102:	4798      	blx	r3
  403104:	4603      	mov	r3, r0
  403106:	4619      	mov	r1, r3
  403108:	f04f 0200 	mov.w	r2, #0
  40310c:	460b      	mov	r3, r1
  40310e:	4614      	mov	r4, r2
  403110:	00a6      	lsls	r6, r4, #2
  403112:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  403116:	009d      	lsls	r5, r3, #2
  403118:	462b      	mov	r3, r5
  40311a:	4634      	mov	r4, r6
  40311c:	185b      	adds	r3, r3, r1
  40311e:	eb44 0402 	adc.w	r4, r4, r2
  403122:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  403126:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  40312a:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  40312e:	4643      	mov	r3, r8
  403130:	464c      	mov	r4, r9
  403132:	1a5b      	subs	r3, r3, r1
  403134:	eb64 0402 	sbc.w	r4, r4, r2
  403138:	ea4f 1b04 	mov.w	fp, r4, lsl #4
  40313c:	ea4b 7b13 	orr.w	fp, fp, r3, lsr #28
  403140:	ea4f 1a03 	mov.w	sl, r3, lsl #4
  403144:	4653      	mov	r3, sl
  403146:	465c      	mov	r4, fp
  403148:	185b      	adds	r3, r3, r1
  40314a:	eb44 0402 	adc.w	r4, r4, r2
  40314e:	0122      	lsls	r2, r4, #4
  403150:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
  403154:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
  403158:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
  40315c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
  403160:	011b      	lsls	r3, r3, #4
  403162:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  403166:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
  40316a:	4619      	mov	r1, r3
  40316c:	4622      	mov	r2, r4
  40316e:	f243 63af 	movw	r3, #13999	; 0x36af
  403172:	f04f 0400 	mov.w	r4, #0
  403176:	18cd      	adds	r5, r1, r3
  403178:	eb42 0604 	adc.w	r6, r2, r4
  40317c:	4628      	mov	r0, r5
  40317e:	4631      	mov	r1, r6
  403180:	4c45      	ldr	r4, [pc, #276]	; (403298 <main+0x1e8>)
  403182:	f243 62b0 	movw	r2, #14000	; 0x36b0
  403186:	f04f 0300 	mov.w	r3, #0
  40318a:	47a0      	blx	r4
  40318c:	4603      	mov	r3, r0
  40318e:	460c      	mov	r4, r1
  403190:	4618      	mov	r0, r3
  403192:	4b42      	ldr	r3, [pc, #264]	; (40329c <main+0x1ec>)
  403194:	4798      	blx	r3
	//While loop
	while(1)
	{
	
	  //This is the setup web function which is used to setup and connect the wifi chip to a desired network connection 
	  if(wifi_button_flag)
  403196:	4b39      	ldr	r3, [pc, #228]	; (40327c <main+0x1cc>)
  403198:	781b      	ldrb	r3, [r3, #0]
  40319a:	b2db      	uxtb	r3, r3
  40319c:	2b00      	cmp	r3, #0
  40319e:	f000 80e0 	beq.w	403362 <main+0x2b2>
		{
 		usart_write_line(BOARD_USART,"setup web\r\n");
  4031a2:	493f      	ldr	r1, [pc, #252]	; (4032a0 <main+0x1f0>)
  4031a4:	4839      	ldr	r0, [pc, #228]	; (40328c <main+0x1dc>)
  4031a6:	4b3a      	ldr	r3, [pc, #232]	; (403290 <main+0x1e0>)
  4031a8:	4798      	blx	r3
		delay_ms(1000);
  4031aa:	4b3a      	ldr	r3, [pc, #232]	; (403294 <main+0x1e4>)
  4031ac:	4798      	blx	r3
  4031ae:	4603      	mov	r3, r0
  4031b0:	4619      	mov	r1, r3
  4031b2:	f04f 0200 	mov.w	r2, #0
  4031b6:	460b      	mov	r3, r1
  4031b8:	4614      	mov	r4, r2
  4031ba:	0160      	lsls	r0, r4, #5
  4031bc:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  4031c0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
  4031c4:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  4031c8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  4031cc:	015b      	lsls	r3, r3, #5
  4031ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  4031d2:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
  4031d6:	1a5b      	subs	r3, r3, r1
  4031d8:	eb64 0402 	sbc.w	r4, r4, r2
  4031dc:	00a0      	lsls	r0, r4, #2
  4031de:	67f8      	str	r0, [r7, #124]	; 0x7c
  4031e0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
  4031e2:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  4031e6:	67f8      	str	r0, [r7, #124]	; 0x7c
  4031e8:	009b      	lsls	r3, r3, #2
  4031ea:	67bb      	str	r3, [r7, #120]	; 0x78
  4031ec:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
  4031f0:	185b      	adds	r3, r3, r1
  4031f2:	eb44 0402 	adc.w	r4, r4, r2
  4031f6:	00e2      	lsls	r2, r4, #3
  4031f8:	677a      	str	r2, [r7, #116]	; 0x74
  4031fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
  4031fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
  403200:	677a      	str	r2, [r7, #116]	; 0x74
  403202:	00db      	lsls	r3, r3, #3
  403204:	673b      	str	r3, [r7, #112]	; 0x70
  403206:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
  40320a:	4619      	mov	r1, r3
  40320c:	4622      	mov	r2, r4
  40320e:	f243 63af 	movw	r3, #13999	; 0x36af
  403212:	f04f 0400 	mov.w	r4, #0
  403216:	18cd      	adds	r5, r1, r3
  403218:	eb42 0604 	adc.w	r6, r2, r4
  40321c:	4628      	mov	r0, r5
  40321e:	4631      	mov	r1, r6
  403220:	4c1d      	ldr	r4, [pc, #116]	; (403298 <main+0x1e8>)
  403222:	f243 62b0 	movw	r2, #14000	; 0x36b0
  403226:	f04f 0300 	mov.w	r3, #0
  40322a:	47a0      	blx	r4
  40322c:	4603      	mov	r3, r0
  40322e:	460c      	mov	r4, r1
  403230:	4618      	mov	r0, r3
  403232:	4b1a      	ldr	r3, [pc, #104]	; (40329c <main+0x1ec>)
  403234:	4798      	blx	r3
		wifi_button_flag=false;
  403236:	4a11      	ldr	r2, [pc, #68]	; (40327c <main+0x1cc>)
  403238:	2300      	movs	r3, #0
  40323a:	7013      	strb	r3, [r2, #0]
		wifi_status_flag = ioport_get_pin_level(NET_PIN);
  40323c:	2020      	movs	r0, #32
  40323e:	4b19      	ldr	r3, [pc, #100]	; (4032a4 <main+0x1f4>)
  403240:	4798      	blx	r3
  403242:	4603      	mov	r3, r0
  403244:	4a0e      	ldr	r2, [pc, #56]	; (403280 <main+0x1d0>)
  403246:	7013      	strb	r3, [r2, #0]
		while(!wifi_status_flag)
  403248:	e034      	b.n	4032b4 <main+0x204>
  40324a:	bf00      	nop
  40324c:	00400e7d 	.word	0x00400e7d
  403250:	400e1450 	.word	0x400e1450
  403254:	00400b79 	.word	0x00400b79
  403258:	00402b4d 	.word	0x00402b4d
  40325c:	00403049 	.word	0x00403049
  403260:	0040229d 	.word	0x0040229d
  403264:	40010000 	.word	0x40010000
  403268:	00400315 	.word	0x00400315
  40326c:	004024e9 	.word	0x004024e9
  403270:	004025ad 	.word	0x004025ad
  403274:	00402611 	.word	0x00402611
  403278:	00401ae1 	.word	0x00401ae1
  40327c:	20019109 	.word	0x20019109
  403280:	2001910a 	.word	0x2001910a
  403284:	2001910b 	.word	0x2001910b
  403288:	00409130 	.word	0x00409130
  40328c:	40024000 	.word	0x40024000
  403290:	00400af5 	.word	0x00400af5
  403294:	00403019 	.word	0x00403019
  403298:	004035f5 	.word	0x004035f5
  40329c:	20000001 	.word	0x20000001
  4032a0:	0040913c 	.word	0x0040913c
  4032a4:	00403061 	.word	0x00403061
		{
		wifi_status_flag = ioport_get_pin_level(NET_PIN);
  4032a8:	2020      	movs	r0, #32
  4032aa:	4b8d      	ldr	r3, [pc, #564]	; (4034e0 <main+0x430>)
  4032ac:	4798      	blx	r3
  4032ae:	4603      	mov	r3, r0
  4032b0:	4a8c      	ldr	r2, [pc, #560]	; (4034e4 <main+0x434>)
  4032b2:	7013      	strb	r3, [r2, #0]
		while(!wifi_status_flag)
  4032b4:	4b8b      	ldr	r3, [pc, #556]	; (4034e4 <main+0x434>)
  4032b6:	781b      	ldrb	r3, [r3, #0]
  4032b8:	b2db      	uxtb	r3, r3
  4032ba:	f083 0301 	eor.w	r3, r3, #1
  4032be:	b2db      	uxtb	r3, r3
  4032c0:	2b00      	cmp	r3, #0
  4032c2:	d1f1      	bne.n	4032a8 <main+0x1f8>
		}
	    delay_ms(10000);
  4032c4:	4b88      	ldr	r3, [pc, #544]	; (4034e8 <main+0x438>)
  4032c6:	4798      	blx	r3
  4032c8:	4603      	mov	r3, r0
  4032ca:	4619      	mov	r1, r3
  4032cc:	f04f 0200 	mov.w	r2, #0
  4032d0:	460b      	mov	r3, r1
  4032d2:	4614      	mov	r4, r2
  4032d4:	00a0      	lsls	r0, r4, #2
  4032d6:	66f8      	str	r0, [r7, #108]	; 0x6c
  4032d8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
  4032da:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  4032de:	66f8      	str	r0, [r7, #108]	; 0x6c
  4032e0:	009b      	lsls	r3, r3, #2
  4032e2:	66bb      	str	r3, [r7, #104]	; 0x68
  4032e4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
  4032e8:	185b      	adds	r3, r3, r1
  4032ea:	eb44 0402 	adc.w	r4, r4, r2
  4032ee:	00e0      	lsls	r0, r4, #3
  4032f0:	6678      	str	r0, [r7, #100]	; 0x64
  4032f2:	6e78      	ldr	r0, [r7, #100]	; 0x64
  4032f4:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
  4032f8:	6678      	str	r0, [r7, #100]	; 0x64
  4032fa:	00db      	lsls	r3, r3, #3
  4032fc:	663b      	str	r3, [r7, #96]	; 0x60
  4032fe:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
  403302:	1a5b      	subs	r3, r3, r1
  403304:	eb64 0402 	sbc.w	r4, r4, r2
  403308:	0120      	lsls	r0, r4, #4
  40330a:	65f8      	str	r0, [r7, #92]	; 0x5c
  40330c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
  40330e:	ea40 7013 	orr.w	r0, r0, r3, lsr #28
  403312:	65f8      	str	r0, [r7, #92]	; 0x5c
  403314:	011b      	lsls	r3, r3, #4
  403316:	65bb      	str	r3, [r7, #88]	; 0x58
  403318:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
  40331c:	185b      	adds	r3, r3, r1
  40331e:	eb44 0402 	adc.w	r4, r4, r2
  403322:	0122      	lsls	r2, r4, #4
  403324:	657a      	str	r2, [r7, #84]	; 0x54
  403326:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  403328:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
  40332c:	657a      	str	r2, [r7, #84]	; 0x54
  40332e:	011b      	lsls	r3, r3, #4
  403330:	653b      	str	r3, [r7, #80]	; 0x50
  403332:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
  403336:	4619      	mov	r1, r3
  403338:	4622      	mov	r2, r4
  40333a:	f243 63af 	movw	r3, #13999	; 0x36af
  40333e:	f04f 0400 	mov.w	r4, #0
  403342:	18cd      	adds	r5, r1, r3
  403344:	eb42 0604 	adc.w	r6, r2, r4
  403348:	4628      	mov	r0, r5
  40334a:	4631      	mov	r1, r6
  40334c:	4c67      	ldr	r4, [pc, #412]	; (4034ec <main+0x43c>)
  40334e:	f243 62b0 	movw	r2, #14000	; 0x36b0
  403352:	f04f 0300 	mov.w	r3, #0
  403356:	47a0      	blx	r4
  403358:	4603      	mov	r3, r0
  40335a:	460c      	mov	r4, r1
  40335c:	4618      	mov	r0, r3
  40335e:	4b64      	ldr	r3, [pc, #400]	; (4034f0 <main+0x440>)
  403360:	4798      	blx	r3
		}
	
		usart_write_line(BOARD_USART,"poll all\r\n");
  403362:	4964      	ldr	r1, [pc, #400]	; (4034f4 <main+0x444>)
  403364:	4864      	ldr	r0, [pc, #400]	; (4034f8 <main+0x448>)
  403366:	4b65      	ldr	r3, [pc, #404]	; (4034fc <main+0x44c>)
  403368:	4798      	blx	r3
		delay_ms(1000);
  40336a:	4b5f      	ldr	r3, [pc, #380]	; (4034e8 <main+0x438>)
  40336c:	4798      	blx	r3
  40336e:	4603      	mov	r3, r0
  403370:	4619      	mov	r1, r3
  403372:	f04f 0200 	mov.w	r2, #0
  403376:	460b      	mov	r3, r1
  403378:	4614      	mov	r4, r2
  40337a:	0160      	lsls	r0, r4, #5
  40337c:	64f8      	str	r0, [r7, #76]	; 0x4c
  40337e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
  403380:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  403384:	64f8      	str	r0, [r7, #76]	; 0x4c
  403386:	015b      	lsls	r3, r3, #5
  403388:	64bb      	str	r3, [r7, #72]	; 0x48
  40338a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
  40338e:	1a5b      	subs	r3, r3, r1
  403390:	eb64 0402 	sbc.w	r4, r4, r2
  403394:	00a0      	lsls	r0, r4, #2
  403396:	6478      	str	r0, [r7, #68]	; 0x44
  403398:	6c78      	ldr	r0, [r7, #68]	; 0x44
  40339a:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  40339e:	6478      	str	r0, [r7, #68]	; 0x44
  4033a0:	009b      	lsls	r3, r3, #2
  4033a2:	643b      	str	r3, [r7, #64]	; 0x40
  4033a4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  4033a8:	185b      	adds	r3, r3, r1
  4033aa:	eb44 0402 	adc.w	r4, r4, r2
  4033ae:	00e2      	lsls	r2, r4, #3
  4033b0:	63fa      	str	r2, [r7, #60]	; 0x3c
  4033b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  4033b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
  4033b8:	63fa      	str	r2, [r7, #60]	; 0x3c
  4033ba:	00db      	lsls	r3, r3, #3
  4033bc:	63bb      	str	r3, [r7, #56]	; 0x38
  4033be:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
  4033c2:	4619      	mov	r1, r3
  4033c4:	4622      	mov	r2, r4
  4033c6:	f243 63af 	movw	r3, #13999	; 0x36af
  4033ca:	f04f 0400 	mov.w	r4, #0
  4033ce:	18cd      	adds	r5, r1, r3
  4033d0:	eb42 0604 	adc.w	r6, r2, r4
  4033d4:	4628      	mov	r0, r5
  4033d6:	4631      	mov	r1, r6
  4033d8:	4c44      	ldr	r4, [pc, #272]	; (4034ec <main+0x43c>)
  4033da:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4033de:	f04f 0300 	mov.w	r3, #0
  4033e2:	47a0      	blx	r4
  4033e4:	4603      	mov	r3, r0
  4033e6:	460c      	mov	r4, r1
  4033e8:	4618      	mov	r0, r3
  4033ea:	4b41      	ldr	r3, [pc, #260]	; (4034f0 <main+0x440>)
  4033ec:	4798      	blx	r3
	  //Capture of an image		
		while(net_flag)
  4033ee:	e0ee      	b.n	4035ce <main+0x51e>
		{
	  //I have included the setup web function outside of this loop because I don't want the user to setup the web when the image is being transferred to the network 
		delay_ms(1);	
  4033f0:	4b3d      	ldr	r3, [pc, #244]	; (4034e8 <main+0x438>)
  4033f2:	4798      	blx	r3
  4033f4:	4603      	mov	r3, r0
  4033f6:	f04f 0400 	mov.w	r4, #0
  4033fa:	f243 61af 	movw	r1, #13999	; 0x36af
  4033fe:	f04f 0200 	mov.w	r2, #0
  403402:	185d      	adds	r5, r3, r1
  403404:	eb44 0602 	adc.w	r6, r4, r2
  403408:	4628      	mov	r0, r5
  40340a:	4631      	mov	r1, r6
  40340c:	4c37      	ldr	r4, [pc, #220]	; (4034ec <main+0x43c>)
  40340e:	f243 62b0 	movw	r2, #14000	; 0x36b0
  403412:	f04f 0300 	mov.w	r3, #0
  403416:	47a0      	blx	r4
  403418:	4603      	mov	r3, r0
  40341a:	460c      	mov	r4, r1
  40341c:	4618      	mov	r0, r3
  40341e:	4b34      	ldr	r3, [pc, #208]	; (4034f0 <main+0x440>)
  403420:	4798      	blx	r3
		start_capture();
  403422:	4b37      	ldr	r3, [pc, #220]	; (403500 <main+0x450>)
  403424:	4798      	blx	r3
		if(image_length>0)
  403426:	4b37      	ldr	r3, [pc, #220]	; (403504 <main+0x454>)
  403428:	681b      	ldr	r3, [r3, #0]
  40342a:	2b00      	cmp	r3, #0
  40342c:	d001      	beq.n	403432 <main+0x382>
		{
 		write_image_to_file();
  40342e:	4b36      	ldr	r3, [pc, #216]	; (403508 <main+0x458>)
  403430:	4798      	blx	r3
		}
	  if(wifi_button_flag)
  403432:	4b36      	ldr	r3, [pc, #216]	; (40350c <main+0x45c>)
  403434:	781b      	ldrb	r3, [r3, #0]
  403436:	b2db      	uxtb	r3, r3
  403438:	2b00      	cmp	r3, #0
  40343a:	f000 80c8 	beq.w	4035ce <main+0x51e>
		{
 		usart_write_line(BOARD_USART,"setup web\r\n");
  40343e:	4934      	ldr	r1, [pc, #208]	; (403510 <main+0x460>)
  403440:	482d      	ldr	r0, [pc, #180]	; (4034f8 <main+0x448>)
  403442:	4b2e      	ldr	r3, [pc, #184]	; (4034fc <main+0x44c>)
  403444:	4798      	blx	r3
		delay_ms(1000);
  403446:	4b28      	ldr	r3, [pc, #160]	; (4034e8 <main+0x438>)
  403448:	4798      	blx	r3
  40344a:	4603      	mov	r3, r0
  40344c:	4619      	mov	r1, r3
  40344e:	f04f 0200 	mov.w	r2, #0
  403452:	460b      	mov	r3, r1
  403454:	4614      	mov	r4, r2
  403456:	0160      	lsls	r0, r4, #5
  403458:	6378      	str	r0, [r7, #52]	; 0x34
  40345a:	6b78      	ldr	r0, [r7, #52]	; 0x34
  40345c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  403460:	6378      	str	r0, [r7, #52]	; 0x34
  403462:	015b      	lsls	r3, r3, #5
  403464:	633b      	str	r3, [r7, #48]	; 0x30
  403466:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
  40346a:	1a5b      	subs	r3, r3, r1
  40346c:	eb64 0402 	sbc.w	r4, r4, r2
  403470:	00a0      	lsls	r0, r4, #2
  403472:	62f8      	str	r0, [r7, #44]	; 0x2c
  403474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  403476:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  40347a:	62f8      	str	r0, [r7, #44]	; 0x2c
  40347c:	009b      	lsls	r3, r3, #2
  40347e:	62bb      	str	r3, [r7, #40]	; 0x28
  403480:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
  403484:	185b      	adds	r3, r3, r1
  403486:	eb44 0402 	adc.w	r4, r4, r2
  40348a:	00e2      	lsls	r2, r4, #3
  40348c:	627a      	str	r2, [r7, #36]	; 0x24
  40348e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  403490:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
  403494:	627a      	str	r2, [r7, #36]	; 0x24
  403496:	00db      	lsls	r3, r3, #3
  403498:	623b      	str	r3, [r7, #32]
  40349a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
  40349e:	4619      	mov	r1, r3
  4034a0:	4622      	mov	r2, r4
  4034a2:	f243 63af 	movw	r3, #13999	; 0x36af
  4034a6:	f04f 0400 	mov.w	r4, #0
  4034aa:	18cd      	adds	r5, r1, r3
  4034ac:	eb42 0604 	adc.w	r6, r2, r4
  4034b0:	4628      	mov	r0, r5
  4034b2:	4631      	mov	r1, r6
  4034b4:	4c0d      	ldr	r4, [pc, #52]	; (4034ec <main+0x43c>)
  4034b6:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4034ba:	f04f 0300 	mov.w	r3, #0
  4034be:	47a0      	blx	r4
  4034c0:	4603      	mov	r3, r0
  4034c2:	460c      	mov	r4, r1
  4034c4:	4618      	mov	r0, r3
  4034c6:	4b0a      	ldr	r3, [pc, #40]	; (4034f0 <main+0x440>)
  4034c8:	4798      	blx	r3
		wifi_button_flag=false;
  4034ca:	4a10      	ldr	r2, [pc, #64]	; (40350c <main+0x45c>)
  4034cc:	2300      	movs	r3, #0
  4034ce:	7013      	strb	r3, [r2, #0]
		wifi_status_flag = ioport_get_pin_level(NET_PIN);
  4034d0:	2020      	movs	r0, #32
  4034d2:	4b03      	ldr	r3, [pc, #12]	; (4034e0 <main+0x430>)
  4034d4:	4798      	blx	r3
  4034d6:	4603      	mov	r3, r0
  4034d8:	4a02      	ldr	r2, [pc, #8]	; (4034e4 <main+0x434>)
  4034da:	7013      	strb	r3, [r2, #0]
		while(!wifi_status_flag)
  4034dc:	e020      	b.n	403520 <main+0x470>
  4034de:	bf00      	nop
  4034e0:	00403061 	.word	0x00403061
  4034e4:	2001910a 	.word	0x2001910a
  4034e8:	00403019 	.word	0x00403019
  4034ec:	004035f5 	.word	0x004035f5
  4034f0:	20000001 	.word	0x20000001
  4034f4:	00409148 	.word	0x00409148
  4034f8:	40024000 	.word	0x40024000
  4034fc:	00400af5 	.word	0x00400af5
  403500:	00401b2d 	.word	0x00401b2d
  403504:	20000a58 	.word	0x20000a58
  403508:	00402865 	.word	0x00402865
  40350c:	20019109 	.word	0x20019109
  403510:	0040913c 	.word	0x0040913c
		{
		wifi_status_flag = ioport_get_pin_level(NET_PIN);
  403514:	2020      	movs	r0, #32
  403516:	4b31      	ldr	r3, [pc, #196]	; (4035dc <main+0x52c>)
  403518:	4798      	blx	r3
  40351a:	4603      	mov	r3, r0
  40351c:	4a30      	ldr	r2, [pc, #192]	; (4035e0 <main+0x530>)
  40351e:	7013      	strb	r3, [r2, #0]
		while(!wifi_status_flag)
  403520:	4b2f      	ldr	r3, [pc, #188]	; (4035e0 <main+0x530>)
  403522:	781b      	ldrb	r3, [r3, #0]
  403524:	b2db      	uxtb	r3, r3
  403526:	f083 0301 	eor.w	r3, r3, #1
  40352a:	b2db      	uxtb	r3, r3
  40352c:	2b00      	cmp	r3, #0
  40352e:	d1f1      	bne.n	403514 <main+0x464>
		}
	    delay_ms(10000);
  403530:	4b2c      	ldr	r3, [pc, #176]	; (4035e4 <main+0x534>)
  403532:	4798      	blx	r3
  403534:	4603      	mov	r3, r0
  403536:	4619      	mov	r1, r3
  403538:	f04f 0200 	mov.w	r2, #0
  40353c:	460b      	mov	r3, r1
  40353e:	4614      	mov	r4, r2
  403540:	00a0      	lsls	r0, r4, #2
  403542:	61f8      	str	r0, [r7, #28]
  403544:	69f8      	ldr	r0, [r7, #28]
  403546:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  40354a:	61f8      	str	r0, [r7, #28]
  40354c:	009b      	lsls	r3, r3, #2
  40354e:	61bb      	str	r3, [r7, #24]
  403550:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
  403554:	185b      	adds	r3, r3, r1
  403556:	eb44 0402 	adc.w	r4, r4, r2
  40355a:	00e0      	lsls	r0, r4, #3
  40355c:	6178      	str	r0, [r7, #20]
  40355e:	6978      	ldr	r0, [r7, #20]
  403560:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
  403564:	6178      	str	r0, [r7, #20]
  403566:	00db      	lsls	r3, r3, #3
  403568:	613b      	str	r3, [r7, #16]
  40356a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  40356e:	1a5b      	subs	r3, r3, r1
  403570:	eb64 0402 	sbc.w	r4, r4, r2
  403574:	0120      	lsls	r0, r4, #4
  403576:	60f8      	str	r0, [r7, #12]
  403578:	68f8      	ldr	r0, [r7, #12]
  40357a:	ea40 7013 	orr.w	r0, r0, r3, lsr #28
  40357e:	60f8      	str	r0, [r7, #12]
  403580:	011b      	lsls	r3, r3, #4
  403582:	60bb      	str	r3, [r7, #8]
  403584:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  403588:	185b      	adds	r3, r3, r1
  40358a:	eb44 0402 	adc.w	r4, r4, r2
  40358e:	0122      	lsls	r2, r4, #4
  403590:	607a      	str	r2, [r7, #4]
  403592:	687a      	ldr	r2, [r7, #4]
  403594:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
  403598:	607a      	str	r2, [r7, #4]
  40359a:	011b      	lsls	r3, r3, #4
  40359c:	603b      	str	r3, [r7, #0]
  40359e:	e9d7 3400 	ldrd	r3, r4, [r7]
  4035a2:	4619      	mov	r1, r3
  4035a4:	4622      	mov	r2, r4
  4035a6:	f243 63af 	movw	r3, #13999	; 0x36af
  4035aa:	f04f 0400 	mov.w	r4, #0
  4035ae:	18cd      	adds	r5, r1, r3
  4035b0:	eb42 0604 	adc.w	r6, r2, r4
  4035b4:	4628      	mov	r0, r5
  4035b6:	4631      	mov	r1, r6
  4035b8:	4c0b      	ldr	r4, [pc, #44]	; (4035e8 <main+0x538>)
  4035ba:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4035be:	f04f 0300 	mov.w	r3, #0
  4035c2:	47a0      	blx	r4
  4035c4:	4603      	mov	r3, r0
  4035c6:	460c      	mov	r4, r1
  4035c8:	4618      	mov	r0, r3
  4035ca:	4b08      	ldr	r3, [pc, #32]	; (4035ec <main+0x53c>)
  4035cc:	4798      	blx	r3
		while(net_flag)
  4035ce:	4b08      	ldr	r3, [pc, #32]	; (4035f0 <main+0x540>)
  4035d0:	781b      	ldrb	r3, [r3, #0]
  4035d2:	b2db      	uxtb	r3, r3
  4035d4:	2b00      	cmp	r3, #0
  4035d6:	f47f af0b 	bne.w	4033f0 <main+0x340>
	  if(wifi_button_flag)
  4035da:	e5dc      	b.n	403196 <main+0xe6>
  4035dc:	00403061 	.word	0x00403061
  4035e0:	2001910a 	.word	0x2001910a
  4035e4:	00403019 	.word	0x00403019
  4035e8:	004035f5 	.word	0x004035f5
  4035ec:	20000001 	.word	0x20000001
  4035f0:	2001910b 	.word	0x2001910b

004035f4 <__aeabi_uldivmod>:
  4035f4:	b953      	cbnz	r3, 40360c <__aeabi_uldivmod+0x18>
  4035f6:	b94a      	cbnz	r2, 40360c <__aeabi_uldivmod+0x18>
  4035f8:	2900      	cmp	r1, #0
  4035fa:	bf08      	it	eq
  4035fc:	2800      	cmpeq	r0, #0
  4035fe:	bf1c      	itt	ne
  403600:	f04f 31ff 	movne.w	r1, #4294967295
  403604:	f04f 30ff 	movne.w	r0, #4294967295
  403608:	f000 b97a 	b.w	403900 <__aeabi_idiv0>
  40360c:	f1ad 0c08 	sub.w	ip, sp, #8
  403610:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403614:	f000 f806 	bl	403624 <__udivmoddi4>
  403618:	f8dd e004 	ldr.w	lr, [sp, #4]
  40361c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403620:	b004      	add	sp, #16
  403622:	4770      	bx	lr

00403624 <__udivmoddi4>:
  403624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403628:	468c      	mov	ip, r1
  40362a:	460d      	mov	r5, r1
  40362c:	4604      	mov	r4, r0
  40362e:	9e08      	ldr	r6, [sp, #32]
  403630:	2b00      	cmp	r3, #0
  403632:	d151      	bne.n	4036d8 <__udivmoddi4+0xb4>
  403634:	428a      	cmp	r2, r1
  403636:	4617      	mov	r7, r2
  403638:	d96d      	bls.n	403716 <__udivmoddi4+0xf2>
  40363a:	fab2 fe82 	clz	lr, r2
  40363e:	f1be 0f00 	cmp.w	lr, #0
  403642:	d00b      	beq.n	40365c <__udivmoddi4+0x38>
  403644:	f1ce 0c20 	rsb	ip, lr, #32
  403648:	fa01 f50e 	lsl.w	r5, r1, lr
  40364c:	fa20 fc0c 	lsr.w	ip, r0, ip
  403650:	fa02 f70e 	lsl.w	r7, r2, lr
  403654:	ea4c 0c05 	orr.w	ip, ip, r5
  403658:	fa00 f40e 	lsl.w	r4, r0, lr
  40365c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403660:	0c25      	lsrs	r5, r4, #16
  403662:	fbbc f8fa 	udiv	r8, ip, sl
  403666:	fa1f f987 	uxth.w	r9, r7
  40366a:	fb0a cc18 	mls	ip, sl, r8, ip
  40366e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403672:	fb08 f309 	mul.w	r3, r8, r9
  403676:	42ab      	cmp	r3, r5
  403678:	d90a      	bls.n	403690 <__udivmoddi4+0x6c>
  40367a:	19ed      	adds	r5, r5, r7
  40367c:	f108 32ff 	add.w	r2, r8, #4294967295
  403680:	f080 8123 	bcs.w	4038ca <__udivmoddi4+0x2a6>
  403684:	42ab      	cmp	r3, r5
  403686:	f240 8120 	bls.w	4038ca <__udivmoddi4+0x2a6>
  40368a:	f1a8 0802 	sub.w	r8, r8, #2
  40368e:	443d      	add	r5, r7
  403690:	1aed      	subs	r5, r5, r3
  403692:	b2a4      	uxth	r4, r4
  403694:	fbb5 f0fa 	udiv	r0, r5, sl
  403698:	fb0a 5510 	mls	r5, sl, r0, r5
  40369c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4036a0:	fb00 f909 	mul.w	r9, r0, r9
  4036a4:	45a1      	cmp	r9, r4
  4036a6:	d909      	bls.n	4036bc <__udivmoddi4+0x98>
  4036a8:	19e4      	adds	r4, r4, r7
  4036aa:	f100 33ff 	add.w	r3, r0, #4294967295
  4036ae:	f080 810a 	bcs.w	4038c6 <__udivmoddi4+0x2a2>
  4036b2:	45a1      	cmp	r9, r4
  4036b4:	f240 8107 	bls.w	4038c6 <__udivmoddi4+0x2a2>
  4036b8:	3802      	subs	r0, #2
  4036ba:	443c      	add	r4, r7
  4036bc:	eba4 0409 	sub.w	r4, r4, r9
  4036c0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4036c4:	2100      	movs	r1, #0
  4036c6:	2e00      	cmp	r6, #0
  4036c8:	d061      	beq.n	40378e <__udivmoddi4+0x16a>
  4036ca:	fa24 f40e 	lsr.w	r4, r4, lr
  4036ce:	2300      	movs	r3, #0
  4036d0:	6034      	str	r4, [r6, #0]
  4036d2:	6073      	str	r3, [r6, #4]
  4036d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4036d8:	428b      	cmp	r3, r1
  4036da:	d907      	bls.n	4036ec <__udivmoddi4+0xc8>
  4036dc:	2e00      	cmp	r6, #0
  4036de:	d054      	beq.n	40378a <__udivmoddi4+0x166>
  4036e0:	2100      	movs	r1, #0
  4036e2:	e886 0021 	stmia.w	r6, {r0, r5}
  4036e6:	4608      	mov	r0, r1
  4036e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4036ec:	fab3 f183 	clz	r1, r3
  4036f0:	2900      	cmp	r1, #0
  4036f2:	f040 808e 	bne.w	403812 <__udivmoddi4+0x1ee>
  4036f6:	42ab      	cmp	r3, r5
  4036f8:	d302      	bcc.n	403700 <__udivmoddi4+0xdc>
  4036fa:	4282      	cmp	r2, r0
  4036fc:	f200 80fa 	bhi.w	4038f4 <__udivmoddi4+0x2d0>
  403700:	1a84      	subs	r4, r0, r2
  403702:	eb65 0503 	sbc.w	r5, r5, r3
  403706:	2001      	movs	r0, #1
  403708:	46ac      	mov	ip, r5
  40370a:	2e00      	cmp	r6, #0
  40370c:	d03f      	beq.n	40378e <__udivmoddi4+0x16a>
  40370e:	e886 1010 	stmia.w	r6, {r4, ip}
  403712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403716:	b912      	cbnz	r2, 40371e <__udivmoddi4+0xfa>
  403718:	2701      	movs	r7, #1
  40371a:	fbb7 f7f2 	udiv	r7, r7, r2
  40371e:	fab7 fe87 	clz	lr, r7
  403722:	f1be 0f00 	cmp.w	lr, #0
  403726:	d134      	bne.n	403792 <__udivmoddi4+0x16e>
  403728:	1beb      	subs	r3, r5, r7
  40372a:	0c3a      	lsrs	r2, r7, #16
  40372c:	fa1f fc87 	uxth.w	ip, r7
  403730:	2101      	movs	r1, #1
  403732:	fbb3 f8f2 	udiv	r8, r3, r2
  403736:	0c25      	lsrs	r5, r4, #16
  403738:	fb02 3318 	mls	r3, r2, r8, r3
  40373c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403740:	fb0c f308 	mul.w	r3, ip, r8
  403744:	42ab      	cmp	r3, r5
  403746:	d907      	bls.n	403758 <__udivmoddi4+0x134>
  403748:	19ed      	adds	r5, r5, r7
  40374a:	f108 30ff 	add.w	r0, r8, #4294967295
  40374e:	d202      	bcs.n	403756 <__udivmoddi4+0x132>
  403750:	42ab      	cmp	r3, r5
  403752:	f200 80d1 	bhi.w	4038f8 <__udivmoddi4+0x2d4>
  403756:	4680      	mov	r8, r0
  403758:	1aed      	subs	r5, r5, r3
  40375a:	b2a3      	uxth	r3, r4
  40375c:	fbb5 f0f2 	udiv	r0, r5, r2
  403760:	fb02 5510 	mls	r5, r2, r0, r5
  403764:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403768:	fb0c fc00 	mul.w	ip, ip, r0
  40376c:	45a4      	cmp	ip, r4
  40376e:	d907      	bls.n	403780 <__udivmoddi4+0x15c>
  403770:	19e4      	adds	r4, r4, r7
  403772:	f100 33ff 	add.w	r3, r0, #4294967295
  403776:	d202      	bcs.n	40377e <__udivmoddi4+0x15a>
  403778:	45a4      	cmp	ip, r4
  40377a:	f200 80b8 	bhi.w	4038ee <__udivmoddi4+0x2ca>
  40377e:	4618      	mov	r0, r3
  403780:	eba4 040c 	sub.w	r4, r4, ip
  403784:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403788:	e79d      	b.n	4036c6 <__udivmoddi4+0xa2>
  40378a:	4631      	mov	r1, r6
  40378c:	4630      	mov	r0, r6
  40378e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403792:	f1ce 0420 	rsb	r4, lr, #32
  403796:	fa05 f30e 	lsl.w	r3, r5, lr
  40379a:	fa07 f70e 	lsl.w	r7, r7, lr
  40379e:	fa20 f804 	lsr.w	r8, r0, r4
  4037a2:	0c3a      	lsrs	r2, r7, #16
  4037a4:	fa25 f404 	lsr.w	r4, r5, r4
  4037a8:	ea48 0803 	orr.w	r8, r8, r3
  4037ac:	fbb4 f1f2 	udiv	r1, r4, r2
  4037b0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4037b4:	fb02 4411 	mls	r4, r2, r1, r4
  4037b8:	fa1f fc87 	uxth.w	ip, r7
  4037bc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4037c0:	fb01 f30c 	mul.w	r3, r1, ip
  4037c4:	42ab      	cmp	r3, r5
  4037c6:	fa00 f40e 	lsl.w	r4, r0, lr
  4037ca:	d909      	bls.n	4037e0 <__udivmoddi4+0x1bc>
  4037cc:	19ed      	adds	r5, r5, r7
  4037ce:	f101 30ff 	add.w	r0, r1, #4294967295
  4037d2:	f080 808a 	bcs.w	4038ea <__udivmoddi4+0x2c6>
  4037d6:	42ab      	cmp	r3, r5
  4037d8:	f240 8087 	bls.w	4038ea <__udivmoddi4+0x2c6>
  4037dc:	3902      	subs	r1, #2
  4037de:	443d      	add	r5, r7
  4037e0:	1aeb      	subs	r3, r5, r3
  4037e2:	fa1f f588 	uxth.w	r5, r8
  4037e6:	fbb3 f0f2 	udiv	r0, r3, r2
  4037ea:	fb02 3310 	mls	r3, r2, r0, r3
  4037ee:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4037f2:	fb00 f30c 	mul.w	r3, r0, ip
  4037f6:	42ab      	cmp	r3, r5
  4037f8:	d907      	bls.n	40380a <__udivmoddi4+0x1e6>
  4037fa:	19ed      	adds	r5, r5, r7
  4037fc:	f100 38ff 	add.w	r8, r0, #4294967295
  403800:	d26f      	bcs.n	4038e2 <__udivmoddi4+0x2be>
  403802:	42ab      	cmp	r3, r5
  403804:	d96d      	bls.n	4038e2 <__udivmoddi4+0x2be>
  403806:	3802      	subs	r0, #2
  403808:	443d      	add	r5, r7
  40380a:	1aeb      	subs	r3, r5, r3
  40380c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403810:	e78f      	b.n	403732 <__udivmoddi4+0x10e>
  403812:	f1c1 0720 	rsb	r7, r1, #32
  403816:	fa22 f807 	lsr.w	r8, r2, r7
  40381a:	408b      	lsls	r3, r1
  40381c:	fa05 f401 	lsl.w	r4, r5, r1
  403820:	ea48 0303 	orr.w	r3, r8, r3
  403824:	fa20 fe07 	lsr.w	lr, r0, r7
  403828:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40382c:	40fd      	lsrs	r5, r7
  40382e:	ea4e 0e04 	orr.w	lr, lr, r4
  403832:	fbb5 f9fc 	udiv	r9, r5, ip
  403836:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40383a:	fb0c 5519 	mls	r5, ip, r9, r5
  40383e:	fa1f f883 	uxth.w	r8, r3
  403842:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  403846:	fb09 f408 	mul.w	r4, r9, r8
  40384a:	42ac      	cmp	r4, r5
  40384c:	fa02 f201 	lsl.w	r2, r2, r1
  403850:	fa00 fa01 	lsl.w	sl, r0, r1
  403854:	d908      	bls.n	403868 <__udivmoddi4+0x244>
  403856:	18ed      	adds	r5, r5, r3
  403858:	f109 30ff 	add.w	r0, r9, #4294967295
  40385c:	d243      	bcs.n	4038e6 <__udivmoddi4+0x2c2>
  40385e:	42ac      	cmp	r4, r5
  403860:	d941      	bls.n	4038e6 <__udivmoddi4+0x2c2>
  403862:	f1a9 0902 	sub.w	r9, r9, #2
  403866:	441d      	add	r5, r3
  403868:	1b2d      	subs	r5, r5, r4
  40386a:	fa1f fe8e 	uxth.w	lr, lr
  40386e:	fbb5 f0fc 	udiv	r0, r5, ip
  403872:	fb0c 5510 	mls	r5, ip, r0, r5
  403876:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40387a:	fb00 f808 	mul.w	r8, r0, r8
  40387e:	45a0      	cmp	r8, r4
  403880:	d907      	bls.n	403892 <__udivmoddi4+0x26e>
  403882:	18e4      	adds	r4, r4, r3
  403884:	f100 35ff 	add.w	r5, r0, #4294967295
  403888:	d229      	bcs.n	4038de <__udivmoddi4+0x2ba>
  40388a:	45a0      	cmp	r8, r4
  40388c:	d927      	bls.n	4038de <__udivmoddi4+0x2ba>
  40388e:	3802      	subs	r0, #2
  403890:	441c      	add	r4, r3
  403892:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403896:	eba4 0408 	sub.w	r4, r4, r8
  40389a:	fba0 8902 	umull	r8, r9, r0, r2
  40389e:	454c      	cmp	r4, r9
  4038a0:	46c6      	mov	lr, r8
  4038a2:	464d      	mov	r5, r9
  4038a4:	d315      	bcc.n	4038d2 <__udivmoddi4+0x2ae>
  4038a6:	d012      	beq.n	4038ce <__udivmoddi4+0x2aa>
  4038a8:	b156      	cbz	r6, 4038c0 <__udivmoddi4+0x29c>
  4038aa:	ebba 030e 	subs.w	r3, sl, lr
  4038ae:	eb64 0405 	sbc.w	r4, r4, r5
  4038b2:	fa04 f707 	lsl.w	r7, r4, r7
  4038b6:	40cb      	lsrs	r3, r1
  4038b8:	431f      	orrs	r7, r3
  4038ba:	40cc      	lsrs	r4, r1
  4038bc:	6037      	str	r7, [r6, #0]
  4038be:	6074      	str	r4, [r6, #4]
  4038c0:	2100      	movs	r1, #0
  4038c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4038c6:	4618      	mov	r0, r3
  4038c8:	e6f8      	b.n	4036bc <__udivmoddi4+0x98>
  4038ca:	4690      	mov	r8, r2
  4038cc:	e6e0      	b.n	403690 <__udivmoddi4+0x6c>
  4038ce:	45c2      	cmp	sl, r8
  4038d0:	d2ea      	bcs.n	4038a8 <__udivmoddi4+0x284>
  4038d2:	ebb8 0e02 	subs.w	lr, r8, r2
  4038d6:	eb69 0503 	sbc.w	r5, r9, r3
  4038da:	3801      	subs	r0, #1
  4038dc:	e7e4      	b.n	4038a8 <__udivmoddi4+0x284>
  4038de:	4628      	mov	r0, r5
  4038e0:	e7d7      	b.n	403892 <__udivmoddi4+0x26e>
  4038e2:	4640      	mov	r0, r8
  4038e4:	e791      	b.n	40380a <__udivmoddi4+0x1e6>
  4038e6:	4681      	mov	r9, r0
  4038e8:	e7be      	b.n	403868 <__udivmoddi4+0x244>
  4038ea:	4601      	mov	r1, r0
  4038ec:	e778      	b.n	4037e0 <__udivmoddi4+0x1bc>
  4038ee:	3802      	subs	r0, #2
  4038f0:	443c      	add	r4, r7
  4038f2:	e745      	b.n	403780 <__udivmoddi4+0x15c>
  4038f4:	4608      	mov	r0, r1
  4038f6:	e708      	b.n	40370a <__udivmoddi4+0xe6>
  4038f8:	f1a8 0802 	sub.w	r8, r8, #2
  4038fc:	443d      	add	r5, r7
  4038fe:	e72b      	b.n	403758 <__udivmoddi4+0x134>

00403900 <__aeabi_idiv0>:
  403900:	4770      	bx	lr
  403902:	bf00      	nop

00403904 <__libc_init_array>:
  403904:	b570      	push	{r4, r5, r6, lr}
  403906:	4e0f      	ldr	r6, [pc, #60]	; (403944 <__libc_init_array+0x40>)
  403908:	4d0f      	ldr	r5, [pc, #60]	; (403948 <__libc_init_array+0x44>)
  40390a:	1b76      	subs	r6, r6, r5
  40390c:	10b6      	asrs	r6, r6, #2
  40390e:	bf18      	it	ne
  403910:	2400      	movne	r4, #0
  403912:	d005      	beq.n	403920 <__libc_init_array+0x1c>
  403914:	3401      	adds	r4, #1
  403916:	f855 3b04 	ldr.w	r3, [r5], #4
  40391a:	4798      	blx	r3
  40391c:	42a6      	cmp	r6, r4
  40391e:	d1f9      	bne.n	403914 <__libc_init_array+0x10>
  403920:	4e0a      	ldr	r6, [pc, #40]	; (40394c <__libc_init_array+0x48>)
  403922:	4d0b      	ldr	r5, [pc, #44]	; (403950 <__libc_init_array+0x4c>)
  403924:	1b76      	subs	r6, r6, r5
  403926:	f005 fd5b 	bl	4093e0 <_init>
  40392a:	10b6      	asrs	r6, r6, #2
  40392c:	bf18      	it	ne
  40392e:	2400      	movne	r4, #0
  403930:	d006      	beq.n	403940 <__libc_init_array+0x3c>
  403932:	3401      	adds	r4, #1
  403934:	f855 3b04 	ldr.w	r3, [r5], #4
  403938:	4798      	blx	r3
  40393a:	42a6      	cmp	r6, r4
  40393c:	d1f9      	bne.n	403932 <__libc_init_array+0x2e>
  40393e:	bd70      	pop	{r4, r5, r6, pc}
  403940:	bd70      	pop	{r4, r5, r6, pc}
  403942:	bf00      	nop
  403944:	004093ec 	.word	0x004093ec
  403948:	004093ec 	.word	0x004093ec
  40394c:	004093f4 	.word	0x004093f4
  403950:	004093ec 	.word	0x004093ec

00403954 <memset>:
  403954:	b470      	push	{r4, r5, r6}
  403956:	0786      	lsls	r6, r0, #30
  403958:	d046      	beq.n	4039e8 <memset+0x94>
  40395a:	1e54      	subs	r4, r2, #1
  40395c:	2a00      	cmp	r2, #0
  40395e:	d041      	beq.n	4039e4 <memset+0x90>
  403960:	b2ca      	uxtb	r2, r1
  403962:	4603      	mov	r3, r0
  403964:	e002      	b.n	40396c <memset+0x18>
  403966:	f114 34ff 	adds.w	r4, r4, #4294967295
  40396a:	d33b      	bcc.n	4039e4 <memset+0x90>
  40396c:	f803 2b01 	strb.w	r2, [r3], #1
  403970:	079d      	lsls	r5, r3, #30
  403972:	d1f8      	bne.n	403966 <memset+0x12>
  403974:	2c03      	cmp	r4, #3
  403976:	d92e      	bls.n	4039d6 <memset+0x82>
  403978:	b2cd      	uxtb	r5, r1
  40397a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40397e:	2c0f      	cmp	r4, #15
  403980:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403984:	d919      	bls.n	4039ba <memset+0x66>
  403986:	f103 0210 	add.w	r2, r3, #16
  40398a:	4626      	mov	r6, r4
  40398c:	3e10      	subs	r6, #16
  40398e:	2e0f      	cmp	r6, #15
  403990:	f842 5c10 	str.w	r5, [r2, #-16]
  403994:	f842 5c0c 	str.w	r5, [r2, #-12]
  403998:	f842 5c08 	str.w	r5, [r2, #-8]
  40399c:	f842 5c04 	str.w	r5, [r2, #-4]
  4039a0:	f102 0210 	add.w	r2, r2, #16
  4039a4:	d8f2      	bhi.n	40398c <memset+0x38>
  4039a6:	f1a4 0210 	sub.w	r2, r4, #16
  4039aa:	f022 020f 	bic.w	r2, r2, #15
  4039ae:	f004 040f 	and.w	r4, r4, #15
  4039b2:	3210      	adds	r2, #16
  4039b4:	2c03      	cmp	r4, #3
  4039b6:	4413      	add	r3, r2
  4039b8:	d90d      	bls.n	4039d6 <memset+0x82>
  4039ba:	461e      	mov	r6, r3
  4039bc:	4622      	mov	r2, r4
  4039be:	3a04      	subs	r2, #4
  4039c0:	2a03      	cmp	r2, #3
  4039c2:	f846 5b04 	str.w	r5, [r6], #4
  4039c6:	d8fa      	bhi.n	4039be <memset+0x6a>
  4039c8:	1f22      	subs	r2, r4, #4
  4039ca:	f022 0203 	bic.w	r2, r2, #3
  4039ce:	3204      	adds	r2, #4
  4039d0:	4413      	add	r3, r2
  4039d2:	f004 0403 	and.w	r4, r4, #3
  4039d6:	b12c      	cbz	r4, 4039e4 <memset+0x90>
  4039d8:	b2c9      	uxtb	r1, r1
  4039da:	441c      	add	r4, r3
  4039dc:	f803 1b01 	strb.w	r1, [r3], #1
  4039e0:	429c      	cmp	r4, r3
  4039e2:	d1fb      	bne.n	4039dc <memset+0x88>
  4039e4:	bc70      	pop	{r4, r5, r6}
  4039e6:	4770      	bx	lr
  4039e8:	4614      	mov	r4, r2
  4039ea:	4603      	mov	r3, r0
  4039ec:	e7c2      	b.n	403974 <memset+0x20>
  4039ee:	bf00      	nop

004039f0 <sprintf>:
  4039f0:	b40e      	push	{r1, r2, r3}
  4039f2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4039f4:	b09c      	sub	sp, #112	; 0x70
  4039f6:	ab21      	add	r3, sp, #132	; 0x84
  4039f8:	490f      	ldr	r1, [pc, #60]	; (403a38 <sprintf+0x48>)
  4039fa:	f853 2b04 	ldr.w	r2, [r3], #4
  4039fe:	9301      	str	r3, [sp, #4]
  403a00:	4605      	mov	r5, r0
  403a02:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  403a06:	6808      	ldr	r0, [r1, #0]
  403a08:	9502      	str	r5, [sp, #8]
  403a0a:	f44f 7702 	mov.w	r7, #520	; 0x208
  403a0e:	f64f 76ff 	movw	r6, #65535	; 0xffff
  403a12:	a902      	add	r1, sp, #8
  403a14:	9506      	str	r5, [sp, #24]
  403a16:	f8ad 7014 	strh.w	r7, [sp, #20]
  403a1a:	9404      	str	r4, [sp, #16]
  403a1c:	9407      	str	r4, [sp, #28]
  403a1e:	f8ad 6016 	strh.w	r6, [sp, #22]
  403a22:	f000 fa6f 	bl	403f04 <_svfprintf_r>
  403a26:	9b02      	ldr	r3, [sp, #8]
  403a28:	2200      	movs	r2, #0
  403a2a:	701a      	strb	r2, [r3, #0]
  403a2c:	b01c      	add	sp, #112	; 0x70
  403a2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  403a32:	b003      	add	sp, #12
  403a34:	4770      	bx	lr
  403a36:	bf00      	nop
  403a38:	20000010 	.word	0x20000010

00403a3c <critical_factorization>:
  403a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403a40:	f04f 0e01 	mov.w	lr, #1
  403a44:	4674      	mov	r4, lr
  403a46:	2500      	movs	r5, #0
  403a48:	f04f 36ff 	mov.w	r6, #4294967295
  403a4c:	192b      	adds	r3, r5, r4
  403a4e:	428b      	cmp	r3, r1
  403a50:	eb00 0706 	add.w	r7, r0, r6
  403a54:	d20d      	bcs.n	403a72 <critical_factorization+0x36>
  403a56:	5d3f      	ldrb	r7, [r7, r4]
  403a58:	f810 c003 	ldrb.w	ip, [r0, r3]
  403a5c:	45bc      	cmp	ip, r7
  403a5e:	d22d      	bcs.n	403abc <critical_factorization+0x80>
  403a60:	461d      	mov	r5, r3
  403a62:	2401      	movs	r4, #1
  403a64:	eba3 0e06 	sub.w	lr, r3, r6
  403a68:	192b      	adds	r3, r5, r4
  403a6a:	428b      	cmp	r3, r1
  403a6c:	eb00 0706 	add.w	r7, r0, r6
  403a70:	d3f1      	bcc.n	403a56 <critical_factorization+0x1a>
  403a72:	f04f 0801 	mov.w	r8, #1
  403a76:	f8c2 e000 	str.w	lr, [r2]
  403a7a:	4644      	mov	r4, r8
  403a7c:	2500      	movs	r5, #0
  403a7e:	f04f 37ff 	mov.w	r7, #4294967295
  403a82:	192b      	adds	r3, r5, r4
  403a84:	4299      	cmp	r1, r3
  403a86:	eb00 0e07 	add.w	lr, r0, r7
  403a8a:	d90e      	bls.n	403aaa <critical_factorization+0x6e>
  403a8c:	f81e e004 	ldrb.w	lr, [lr, r4]
  403a90:	f810 c003 	ldrb.w	ip, [r0, r3]
  403a94:	45f4      	cmp	ip, lr
  403a96:	d918      	bls.n	403aca <critical_factorization+0x8e>
  403a98:	461d      	mov	r5, r3
  403a9a:	2401      	movs	r4, #1
  403a9c:	eba3 0807 	sub.w	r8, r3, r7
  403aa0:	192b      	adds	r3, r5, r4
  403aa2:	4299      	cmp	r1, r3
  403aa4:	eb00 0e07 	add.w	lr, r0, r7
  403aa8:	d8f0      	bhi.n	403a8c <critical_factorization+0x50>
  403aaa:	3701      	adds	r7, #1
  403aac:	1c70      	adds	r0, r6, #1
  403aae:	4287      	cmp	r7, r0
  403ab0:	bf24      	itt	cs
  403ab2:	f8c2 8000 	strcs.w	r8, [r2]
  403ab6:	4638      	movcs	r0, r7
  403ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403abc:	d00c      	beq.n	403ad8 <critical_factorization+0x9c>
  403abe:	f04f 0e01 	mov.w	lr, #1
  403ac2:	462e      	mov	r6, r5
  403ac4:	4674      	mov	r4, lr
  403ac6:	4475      	add	r5, lr
  403ac8:	e7c0      	b.n	403a4c <critical_factorization+0x10>
  403aca:	d00b      	beq.n	403ae4 <critical_factorization+0xa8>
  403acc:	f04f 0801 	mov.w	r8, #1
  403ad0:	462f      	mov	r7, r5
  403ad2:	4644      	mov	r4, r8
  403ad4:	4445      	add	r5, r8
  403ad6:	e7d4      	b.n	403a82 <critical_factorization+0x46>
  403ad8:	4574      	cmp	r4, lr
  403ada:	bf12      	itee	ne
  403adc:	3401      	addne	r4, #1
  403ade:	461d      	moveq	r5, r3
  403ae0:	2401      	moveq	r4, #1
  403ae2:	e7b3      	b.n	403a4c <critical_factorization+0x10>
  403ae4:	4544      	cmp	r4, r8
  403ae6:	bf12      	itee	ne
  403ae8:	3401      	addne	r4, #1
  403aea:	461d      	moveq	r5, r3
  403aec:	2401      	moveq	r4, #1
  403aee:	e7c8      	b.n	403a82 <critical_factorization+0x46>

00403af0 <two_way_long_needle>:
  403af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403af4:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  403af8:	4616      	mov	r6, r2
  403afa:	4605      	mov	r5, r0
  403afc:	468b      	mov	fp, r1
  403afe:	4610      	mov	r0, r2
  403b00:	4619      	mov	r1, r3
  403b02:	aa03      	add	r2, sp, #12
  403b04:	461c      	mov	r4, r3
  403b06:	f7ff ff99 	bl	403a3c <critical_factorization>
  403b0a:	ab03      	add	r3, sp, #12
  403b0c:	4681      	mov	r9, r0
  403b0e:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  403b12:	f843 4f04 	str.w	r4, [r3, #4]!
  403b16:	4293      	cmp	r3, r2
  403b18:	d1fb      	bne.n	403b12 <two_way_long_needle+0x22>
  403b1a:	b14c      	cbz	r4, 403b30 <two_way_long_needle+0x40>
  403b1c:	1e63      	subs	r3, r4, #1
  403b1e:	1e72      	subs	r2, r6, #1
  403b20:	a804      	add	r0, sp, #16
  403b22:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  403b26:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  403b2a:	f113 33ff 	adds.w	r3, r3, #4294967295
  403b2e:	d2f8      	bcs.n	403b22 <two_way_long_needle+0x32>
  403b30:	9903      	ldr	r1, [sp, #12]
  403b32:	464a      	mov	r2, r9
  403b34:	4431      	add	r1, r6
  403b36:	4630      	mov	r0, r6
  403b38:	f002 ff02 	bl	406940 <memcmp>
  403b3c:	2800      	cmp	r0, #0
  403b3e:	d16f      	bne.n	403c20 <two_way_long_needle+0x130>
  403b40:	f109 33ff 	add.w	r3, r9, #4294967295
  403b44:	9300      	str	r3, [sp, #0]
  403b46:	18f3      	adds	r3, r6, r3
  403b48:	4682      	mov	sl, r0
  403b4a:	9301      	str	r3, [sp, #4]
  403b4c:	4623      	mov	r3, r4
  403b4e:	4680      	mov	r8, r0
  403b50:	4654      	mov	r4, sl
  403b52:	4658      	mov	r0, fp
  403b54:	469a      	mov	sl, r3
  403b56:	eb08 070a 	add.w	r7, r8, sl
  403b5a:	1a3a      	subs	r2, r7, r0
  403b5c:	2100      	movs	r1, #0
  403b5e:	4428      	add	r0, r5
  403b60:	f002 fe9e 	bl	4068a0 <memchr>
  403b64:	2800      	cmp	r0, #0
  403b66:	d156      	bne.n	403c16 <two_way_long_needle+0x126>
  403b68:	2f00      	cmp	r7, #0
  403b6a:	d054      	beq.n	403c16 <two_way_long_needle+0x126>
  403b6c:	19eb      	adds	r3, r5, r7
  403b6e:	aa04      	add	r2, sp, #16
  403b70:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  403b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403b78:	b14b      	cbz	r3, 403b8e <two_way_long_needle+0x9e>
  403b7a:	b124      	cbz	r4, 403b86 <two_way_long_needle+0x96>
  403b7c:	9a03      	ldr	r2, [sp, #12]
  403b7e:	4293      	cmp	r3, r2
  403b80:	d201      	bcs.n	403b86 <two_way_long_needle+0x96>
  403b82:	ebaa 0302 	sub.w	r3, sl, r2
  403b86:	4498      	add	r8, r3
  403b88:	2400      	movs	r4, #0
  403b8a:	4638      	mov	r0, r7
  403b8c:	e7e3      	b.n	403b56 <two_way_long_needle+0x66>
  403b8e:	454c      	cmp	r4, r9
  403b90:	4623      	mov	r3, r4
  403b92:	f10a 3eff 	add.w	lr, sl, #4294967295
  403b96:	bf38      	it	cc
  403b98:	464b      	movcc	r3, r9
  403b9a:	4573      	cmp	r3, lr
  403b9c:	d213      	bcs.n	403bc6 <two_way_long_needle+0xd6>
  403b9e:	eb08 0203 	add.w	r2, r8, r3
  403ba2:	f816 c003 	ldrb.w	ip, [r6, r3]
  403ba6:	5ca8      	ldrb	r0, [r5, r2]
  403ba8:	4584      	cmp	ip, r0
  403baa:	442a      	add	r2, r5
  403bac:	eb06 0103 	add.w	r1, r6, r3
  403bb0:	d006      	beq.n	403bc0 <two_way_long_needle+0xd0>
  403bb2:	e02c      	b.n	403c0e <two_way_long_needle+0x11e>
  403bb4:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  403bb8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  403bbc:	4584      	cmp	ip, r0
  403bbe:	d126      	bne.n	403c0e <two_way_long_needle+0x11e>
  403bc0:	3301      	adds	r3, #1
  403bc2:	4573      	cmp	r3, lr
  403bc4:	d3f6      	bcc.n	403bb4 <two_way_long_needle+0xc4>
  403bc6:	454c      	cmp	r4, r9
  403bc8:	9900      	ldr	r1, [sp, #0]
  403bca:	f080 8089 	bcs.w	403ce0 <two_way_long_needle+0x1f0>
  403bce:	9b00      	ldr	r3, [sp, #0]
  403bd0:	eb08 0203 	add.w	r2, r8, r3
  403bd4:	9b01      	ldr	r3, [sp, #4]
  403bd6:	5ca8      	ldrb	r0, [r5, r2]
  403bd8:	781b      	ldrb	r3, [r3, #0]
  403bda:	4298      	cmp	r0, r3
  403bdc:	442a      	add	r2, r5
  403bde:	d17f      	bne.n	403ce0 <two_way_long_needle+0x1f0>
  403be0:	9801      	ldr	r0, [sp, #4]
  403be2:	f104 3bff 	add.w	fp, r4, #4294967295
  403be6:	e006      	b.n	403bf6 <two_way_long_needle+0x106>
  403be8:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  403bec:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  403bf0:	45f4      	cmp	ip, lr
  403bf2:	d103      	bne.n	403bfc <two_way_long_needle+0x10c>
  403bf4:	4619      	mov	r1, r3
  403bf6:	1e4b      	subs	r3, r1, #1
  403bf8:	459b      	cmp	fp, r3
  403bfa:	d1f5      	bne.n	403be8 <two_way_long_needle+0xf8>
  403bfc:	3401      	adds	r4, #1
  403bfe:	428c      	cmp	r4, r1
  403c00:	d870      	bhi.n	403ce4 <two_way_long_needle+0x1f4>
  403c02:	9c03      	ldr	r4, [sp, #12]
  403c04:	4638      	mov	r0, r7
  403c06:	44a0      	add	r8, r4
  403c08:	ebaa 0404 	sub.w	r4, sl, r4
  403c0c:	e7a3      	b.n	403b56 <two_way_long_needle+0x66>
  403c0e:	f1c9 0201 	rsb	r2, r9, #1
  403c12:	4490      	add	r8, r2
  403c14:	e7b7      	b.n	403b86 <two_way_long_needle+0x96>
  403c16:	2000      	movs	r0, #0
  403c18:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  403c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c20:	eba4 0309 	sub.w	r3, r4, r9
  403c24:	454b      	cmp	r3, r9
  403c26:	bf38      	it	cc
  403c28:	464b      	movcc	r3, r9
  403c2a:	3301      	adds	r3, #1
  403c2c:	f109 38ff 	add.w	r8, r9, #4294967295
  403c30:	9303      	str	r3, [sp, #12]
  403c32:	eb06 0308 	add.w	r3, r6, r8
  403c36:	4658      	mov	r0, fp
  403c38:	f04f 0a00 	mov.w	sl, #0
  403c3c:	46cb      	mov	fp, r9
  403c3e:	4699      	mov	r9, r3
  403c40:	eb0a 0704 	add.w	r7, sl, r4
  403c44:	1a3a      	subs	r2, r7, r0
  403c46:	2100      	movs	r1, #0
  403c48:	4428      	add	r0, r5
  403c4a:	f002 fe29 	bl	4068a0 <memchr>
  403c4e:	2800      	cmp	r0, #0
  403c50:	d1e1      	bne.n	403c16 <two_way_long_needle+0x126>
  403c52:	2f00      	cmp	r7, #0
  403c54:	d0df      	beq.n	403c16 <two_way_long_needle+0x126>
  403c56:	19eb      	adds	r3, r5, r7
  403c58:	aa04      	add	r2, sp, #16
  403c5a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  403c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403c62:	bba3      	cbnz	r3, 403cce <two_way_long_needle+0x1de>
  403c64:	1e61      	subs	r1, r4, #1
  403c66:	458b      	cmp	fp, r1
  403c68:	d215      	bcs.n	403c96 <two_way_long_needle+0x1a6>
  403c6a:	eb0a 020b 	add.w	r2, sl, fp
  403c6e:	f816 300b 	ldrb.w	r3, [r6, fp]
  403c72:	f815 e002 	ldrb.w	lr, [r5, r2]
  403c76:	459e      	cmp	lr, r3
  403c78:	442a      	add	r2, r5
  403c7a:	eb06 000b 	add.w	r0, r6, fp
  403c7e:	465b      	mov	r3, fp
  403c80:	d006      	beq.n	403c90 <two_way_long_needle+0x1a0>
  403c82:	e027      	b.n	403cd4 <two_way_long_needle+0x1e4>
  403c84:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  403c88:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  403c8c:	45f4      	cmp	ip, lr
  403c8e:	d121      	bne.n	403cd4 <two_way_long_needle+0x1e4>
  403c90:	3301      	adds	r3, #1
  403c92:	428b      	cmp	r3, r1
  403c94:	d3f6      	bcc.n	403c84 <two_way_long_needle+0x194>
  403c96:	f1b8 3fff 	cmp.w	r8, #4294967295
  403c9a:	d011      	beq.n	403cc0 <two_way_long_needle+0x1d0>
  403c9c:	eb0a 0208 	add.w	r2, sl, r8
  403ca0:	f899 1000 	ldrb.w	r1, [r9]
  403ca4:	5cab      	ldrb	r3, [r5, r2]
  403ca6:	4299      	cmp	r1, r3
  403ca8:	442a      	add	r2, r5
  403caa:	d10f      	bne.n	403ccc <two_way_long_needle+0x1dc>
  403cac:	464b      	mov	r3, r9
  403cae:	e005      	b.n	403cbc <two_way_long_needle+0x1cc>
  403cb0:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  403cb4:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  403cb8:	4288      	cmp	r0, r1
  403cba:	d107      	bne.n	403ccc <two_way_long_needle+0x1dc>
  403cbc:	42b3      	cmp	r3, r6
  403cbe:	d1f7      	bne.n	403cb0 <two_way_long_needle+0x1c0>
  403cc0:	eb05 000a 	add.w	r0, r5, sl
  403cc4:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  403cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ccc:	9b03      	ldr	r3, [sp, #12]
  403cce:	449a      	add	sl, r3
  403cd0:	4638      	mov	r0, r7
  403cd2:	e7b5      	b.n	403c40 <two_way_long_needle+0x150>
  403cd4:	f1cb 0201 	rsb	r2, fp, #1
  403cd8:	4492      	add	sl, r2
  403cda:	449a      	add	sl, r3
  403cdc:	4638      	mov	r0, r7
  403cde:	e7af      	b.n	403c40 <two_way_long_needle+0x150>
  403ce0:	4649      	mov	r1, r9
  403ce2:	e78b      	b.n	403bfc <two_way_long_needle+0x10c>
  403ce4:	eb05 0008 	add.w	r0, r5, r8
  403ce8:	e796      	b.n	403c18 <two_way_long_needle+0x128>
  403cea:	bf00      	nop

00403cec <strstr>:
  403cec:	7802      	ldrb	r2, [r0, #0]
  403cee:	2a00      	cmp	r2, #0
  403cf0:	f000 8101 	beq.w	403ef6 <strstr+0x20a>
  403cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403cf8:	f891 8000 	ldrb.w	r8, [r1]
  403cfc:	b085      	sub	sp, #20
  403cfe:	4644      	mov	r4, r8
  403d00:	f1b8 0f00 	cmp.w	r8, #0
  403d04:	d016      	beq.n	403d34 <strstr+0x48>
  403d06:	4686      	mov	lr, r0
  403d08:	f101 0c01 	add.w	ip, r1, #1
  403d0c:	2701      	movs	r7, #1
  403d0e:	e003      	b.n	403d18 <strstr+0x2c>
  403d10:	f813 4b01 	ldrb.w	r4, [r3], #1
  403d14:	b16c      	cbz	r4, 403d32 <strstr+0x46>
  403d16:	469c      	mov	ip, r3
  403d18:	42a2      	cmp	r2, r4
  403d1a:	bf14      	ite	ne
  403d1c:	2700      	movne	r7, #0
  403d1e:	f007 0701 	andeq.w	r7, r7, #1
  403d22:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  403d26:	4663      	mov	r3, ip
  403d28:	2a00      	cmp	r2, #0
  403d2a:	d1f1      	bne.n	403d10 <strstr+0x24>
  403d2c:	f89c 3000 	ldrb.w	r3, [ip]
  403d30:	b9fb      	cbnz	r3, 403d72 <strstr+0x86>
  403d32:	b117      	cbz	r7, 403d3a <strstr+0x4e>
  403d34:	b005      	add	sp, #20
  403d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d3a:	460e      	mov	r6, r1
  403d3c:	4605      	mov	r5, r0
  403d3e:	4641      	mov	r1, r8
  403d40:	3001      	adds	r0, #1
  403d42:	ebac 0406 	sub.w	r4, ip, r6
  403d46:	f003 f9d5 	bl	4070f4 <strchr>
  403d4a:	4607      	mov	r7, r0
  403d4c:	b188      	cbz	r0, 403d72 <strstr+0x86>
  403d4e:	2c01      	cmp	r4, #1
  403d50:	d0f0      	beq.n	403d34 <strstr+0x48>
  403d52:	1928      	adds	r0, r5, r4
  403d54:	4287      	cmp	r7, r0
  403d56:	bf94      	ite	ls
  403d58:	1bc1      	subls	r1, r0, r7
  403d5a:	2101      	movhi	r1, #1
  403d5c:	2c1f      	cmp	r4, #31
  403d5e:	468b      	mov	fp, r1
  403d60:	d90b      	bls.n	403d7a <strstr+0x8e>
  403d62:	4623      	mov	r3, r4
  403d64:	4632      	mov	r2, r6
  403d66:	4638      	mov	r0, r7
  403d68:	f7ff fec2 	bl	403af0 <two_way_long_needle>
  403d6c:	b005      	add	sp, #20
  403d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d72:	2000      	movs	r0, #0
  403d74:	b005      	add	sp, #20
  403d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d7a:	aa03      	add	r2, sp, #12
  403d7c:	4621      	mov	r1, r4
  403d7e:	4630      	mov	r0, r6
  403d80:	f7ff fe5c 	bl	403a3c <critical_factorization>
  403d84:	9903      	ldr	r1, [sp, #12]
  403d86:	4680      	mov	r8, r0
  403d88:	4602      	mov	r2, r0
  403d8a:	4431      	add	r1, r6
  403d8c:	4630      	mov	r0, r6
  403d8e:	f002 fdd7 	bl	406940 <memcmp>
  403d92:	2800      	cmp	r0, #0
  403d94:	d157      	bne.n	403e46 <strstr+0x15a>
  403d96:	f108 33ff 	add.w	r3, r8, #4294967295
  403d9a:	9300      	str	r3, [sp, #0]
  403d9c:	18f3      	adds	r3, r6, r3
  403d9e:	4681      	mov	r9, r0
  403da0:	4605      	mov	r5, r0
  403da2:	9301      	str	r3, [sp, #4]
  403da4:	4658      	mov	r0, fp
  403da6:	46b2      	mov	sl, r6
  403da8:	1966      	adds	r6, r4, r5
  403daa:	1a32      	subs	r2, r6, r0
  403dac:	2100      	movs	r1, #0
  403dae:	4438      	add	r0, r7
  403db0:	f002 fd76 	bl	4068a0 <memchr>
  403db4:	2800      	cmp	r0, #0
  403db6:	d1dc      	bne.n	403d72 <strstr+0x86>
  403db8:	2e00      	cmp	r6, #0
  403dba:	d0da      	beq.n	403d72 <strstr+0x86>
  403dbc:	45c8      	cmp	r8, r9
  403dbe:	4643      	mov	r3, r8
  403dc0:	bf38      	it	cc
  403dc2:	464b      	movcc	r3, r9
  403dc4:	429c      	cmp	r4, r3
  403dc6:	d912      	bls.n	403dee <strstr+0x102>
  403dc8:	195a      	adds	r2, r3, r5
  403dca:	f81a 1003 	ldrb.w	r1, [sl, r3]
  403dce:	5cb8      	ldrb	r0, [r7, r2]
  403dd0:	4281      	cmp	r1, r0
  403dd2:	443a      	add	r2, r7
  403dd4:	eb0a 0e03 	add.w	lr, sl, r3
  403dd8:	d006      	beq.n	403de8 <strstr+0xfc>
  403dda:	e02c      	b.n	403e36 <strstr+0x14a>
  403ddc:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  403de0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  403de4:	4288      	cmp	r0, r1
  403de6:	d126      	bne.n	403e36 <strstr+0x14a>
  403de8:	3301      	adds	r3, #1
  403dea:	429c      	cmp	r4, r3
  403dec:	d1f6      	bne.n	403ddc <strstr+0xf0>
  403dee:	45c8      	cmp	r8, r9
  403df0:	9900      	ldr	r1, [sp, #0]
  403df2:	f240 8083 	bls.w	403efc <strstr+0x210>
  403df6:	9b00      	ldr	r3, [sp, #0]
  403df8:	18ea      	adds	r2, r5, r3
  403dfa:	9b01      	ldr	r3, [sp, #4]
  403dfc:	5cb8      	ldrb	r0, [r7, r2]
  403dfe:	781b      	ldrb	r3, [r3, #0]
  403e00:	4298      	cmp	r0, r3
  403e02:	443a      	add	r2, r7
  403e04:	d17a      	bne.n	403efc <strstr+0x210>
  403e06:	9801      	ldr	r0, [sp, #4]
  403e08:	f109 3bff 	add.w	fp, r9, #4294967295
  403e0c:	e006      	b.n	403e1c <strstr+0x130>
  403e0e:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  403e12:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  403e16:	45f4      	cmp	ip, lr
  403e18:	d103      	bne.n	403e22 <strstr+0x136>
  403e1a:	4619      	mov	r1, r3
  403e1c:	1e4b      	subs	r3, r1, #1
  403e1e:	455b      	cmp	r3, fp
  403e20:	d1f5      	bne.n	403e0e <strstr+0x122>
  403e22:	f109 0901 	add.w	r9, r9, #1
  403e26:	4589      	cmp	r9, r1
  403e28:	d857      	bhi.n	403eda <strstr+0x1ee>
  403e2a:	9b03      	ldr	r3, [sp, #12]
  403e2c:	4630      	mov	r0, r6
  403e2e:	441d      	add	r5, r3
  403e30:	eba4 0903 	sub.w	r9, r4, r3
  403e34:	e7b8      	b.n	403da8 <strstr+0xbc>
  403e36:	f1c8 0201 	rsb	r2, r8, #1
  403e3a:	4415      	add	r5, r2
  403e3c:	441d      	add	r5, r3
  403e3e:	f04f 0900 	mov.w	r9, #0
  403e42:	4630      	mov	r0, r6
  403e44:	e7b0      	b.n	403da8 <strstr+0xbc>
  403e46:	eba4 0308 	sub.w	r3, r4, r8
  403e4a:	4543      	cmp	r3, r8
  403e4c:	bf38      	it	cc
  403e4e:	4643      	movcc	r3, r8
  403e50:	3301      	adds	r3, #1
  403e52:	f108 39ff 	add.w	r9, r8, #4294967295
  403e56:	9303      	str	r3, [sp, #12]
  403e58:	eb06 0309 	add.w	r3, r6, r9
  403e5c:	4658      	mov	r0, fp
  403e5e:	2500      	movs	r5, #0
  403e60:	46bb      	mov	fp, r7
  403e62:	469a      	mov	sl, r3
  403e64:	1967      	adds	r7, r4, r5
  403e66:	1a3a      	subs	r2, r7, r0
  403e68:	2100      	movs	r1, #0
  403e6a:	4458      	add	r0, fp
  403e6c:	f002 fd18 	bl	4068a0 <memchr>
  403e70:	2800      	cmp	r0, #0
  403e72:	f47f af7e 	bne.w	403d72 <strstr+0x86>
  403e76:	2f00      	cmp	r7, #0
  403e78:	f43f af7b 	beq.w	403d72 <strstr+0x86>
  403e7c:	4544      	cmp	r4, r8
  403e7e:	d915      	bls.n	403eac <strstr+0x1c0>
  403e80:	eb08 0205 	add.w	r2, r8, r5
  403e84:	f816 3008 	ldrb.w	r3, [r6, r8]
  403e88:	f81b 0002 	ldrb.w	r0, [fp, r2]
  403e8c:	4298      	cmp	r0, r3
  403e8e:	445a      	add	r2, fp
  403e90:	eb06 0108 	add.w	r1, r6, r8
  403e94:	4643      	mov	r3, r8
  403e96:	d006      	beq.n	403ea6 <strstr+0x1ba>
  403e98:	e023      	b.n	403ee2 <strstr+0x1f6>
  403e9a:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  403e9e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  403ea2:	4586      	cmp	lr, r0
  403ea4:	d11d      	bne.n	403ee2 <strstr+0x1f6>
  403ea6:	3301      	adds	r3, #1
  403ea8:	429c      	cmp	r4, r3
  403eaa:	d1f6      	bne.n	403e9a <strstr+0x1ae>
  403eac:	f1b9 3fff 	cmp.w	r9, #4294967295
  403eb0:	d012      	beq.n	403ed8 <strstr+0x1ec>
  403eb2:	eb05 0209 	add.w	r2, r5, r9
  403eb6:	f89a 3000 	ldrb.w	r3, [sl]
  403eba:	f81b 1002 	ldrb.w	r1, [fp, r2]
  403ebe:	4299      	cmp	r1, r3
  403ec0:	445a      	add	r2, fp
  403ec2:	d114      	bne.n	403eee <strstr+0x202>
  403ec4:	4653      	mov	r3, sl
  403ec6:	e005      	b.n	403ed4 <strstr+0x1e8>
  403ec8:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  403ecc:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  403ed0:	4288      	cmp	r0, r1
  403ed2:	d10c      	bne.n	403eee <strstr+0x202>
  403ed4:	42b3      	cmp	r3, r6
  403ed6:	d1f7      	bne.n	403ec8 <strstr+0x1dc>
  403ed8:	465f      	mov	r7, fp
  403eda:	1978      	adds	r0, r7, r5
  403edc:	b005      	add	sp, #20
  403ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ee2:	f1c8 0201 	rsb	r2, r8, #1
  403ee6:	4415      	add	r5, r2
  403ee8:	441d      	add	r5, r3
  403eea:	4638      	mov	r0, r7
  403eec:	e7ba      	b.n	403e64 <strstr+0x178>
  403eee:	9b03      	ldr	r3, [sp, #12]
  403ef0:	4638      	mov	r0, r7
  403ef2:	441d      	add	r5, r3
  403ef4:	e7b6      	b.n	403e64 <strstr+0x178>
  403ef6:	780b      	ldrb	r3, [r1, #0]
  403ef8:	b913      	cbnz	r3, 403f00 <strstr+0x214>
  403efa:	4770      	bx	lr
  403efc:	4641      	mov	r1, r8
  403efe:	e790      	b.n	403e22 <strstr+0x136>
  403f00:	2000      	movs	r0, #0
  403f02:	4770      	bx	lr

00403f04 <_svfprintf_r>:
  403f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403f08:	b0c3      	sub	sp, #268	; 0x10c
  403f0a:	460c      	mov	r4, r1
  403f0c:	910b      	str	r1, [sp, #44]	; 0x2c
  403f0e:	4692      	mov	sl, r2
  403f10:	930f      	str	r3, [sp, #60]	; 0x3c
  403f12:	900c      	str	r0, [sp, #48]	; 0x30
  403f14:	f002 fa04 	bl	406320 <_localeconv_r>
  403f18:	6803      	ldr	r3, [r0, #0]
  403f1a:	931a      	str	r3, [sp, #104]	; 0x68
  403f1c:	4618      	mov	r0, r3
  403f1e:	f003 f96f 	bl	407200 <strlen>
  403f22:	89a3      	ldrh	r3, [r4, #12]
  403f24:	9019      	str	r0, [sp, #100]	; 0x64
  403f26:	0619      	lsls	r1, r3, #24
  403f28:	d503      	bpl.n	403f32 <_svfprintf_r+0x2e>
  403f2a:	6923      	ldr	r3, [r4, #16]
  403f2c:	2b00      	cmp	r3, #0
  403f2e:	f001 8001 	beq.w	404f34 <_svfprintf_r+0x1030>
  403f32:	2300      	movs	r3, #0
  403f34:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  403f38:	9313      	str	r3, [sp, #76]	; 0x4c
  403f3a:	9314      	str	r3, [sp, #80]	; 0x50
  403f3c:	9315      	str	r3, [sp, #84]	; 0x54
  403f3e:	9327      	str	r3, [sp, #156]	; 0x9c
  403f40:	9326      	str	r3, [sp, #152]	; 0x98
  403f42:	9318      	str	r3, [sp, #96]	; 0x60
  403f44:	931b      	str	r3, [sp, #108]	; 0x6c
  403f46:	9309      	str	r3, [sp, #36]	; 0x24
  403f48:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  403f4c:	46c8      	mov	r8, r9
  403f4e:	9316      	str	r3, [sp, #88]	; 0x58
  403f50:	9317      	str	r3, [sp, #92]	; 0x5c
  403f52:	f89a 3000 	ldrb.w	r3, [sl]
  403f56:	4654      	mov	r4, sl
  403f58:	b1e3      	cbz	r3, 403f94 <_svfprintf_r+0x90>
  403f5a:	2b25      	cmp	r3, #37	; 0x25
  403f5c:	d102      	bne.n	403f64 <_svfprintf_r+0x60>
  403f5e:	e019      	b.n	403f94 <_svfprintf_r+0x90>
  403f60:	2b25      	cmp	r3, #37	; 0x25
  403f62:	d003      	beq.n	403f6c <_svfprintf_r+0x68>
  403f64:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403f68:	2b00      	cmp	r3, #0
  403f6a:	d1f9      	bne.n	403f60 <_svfprintf_r+0x5c>
  403f6c:	eba4 050a 	sub.w	r5, r4, sl
  403f70:	b185      	cbz	r5, 403f94 <_svfprintf_r+0x90>
  403f72:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f74:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403f76:	f8c8 a000 	str.w	sl, [r8]
  403f7a:	3301      	adds	r3, #1
  403f7c:	442a      	add	r2, r5
  403f7e:	2b07      	cmp	r3, #7
  403f80:	f8c8 5004 	str.w	r5, [r8, #4]
  403f84:	9227      	str	r2, [sp, #156]	; 0x9c
  403f86:	9326      	str	r3, [sp, #152]	; 0x98
  403f88:	dc7f      	bgt.n	40408a <_svfprintf_r+0x186>
  403f8a:	f108 0808 	add.w	r8, r8, #8
  403f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403f90:	442b      	add	r3, r5
  403f92:	9309      	str	r3, [sp, #36]	; 0x24
  403f94:	7823      	ldrb	r3, [r4, #0]
  403f96:	2b00      	cmp	r3, #0
  403f98:	d07f      	beq.n	40409a <_svfprintf_r+0x196>
  403f9a:	2300      	movs	r3, #0
  403f9c:	461a      	mov	r2, r3
  403f9e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403fa2:	4619      	mov	r1, r3
  403fa4:	930d      	str	r3, [sp, #52]	; 0x34
  403fa6:	469b      	mov	fp, r3
  403fa8:	f04f 30ff 	mov.w	r0, #4294967295
  403fac:	7863      	ldrb	r3, [r4, #1]
  403fae:	900a      	str	r0, [sp, #40]	; 0x28
  403fb0:	f104 0a01 	add.w	sl, r4, #1
  403fb4:	f10a 0a01 	add.w	sl, sl, #1
  403fb8:	f1a3 0020 	sub.w	r0, r3, #32
  403fbc:	2858      	cmp	r0, #88	; 0x58
  403fbe:	f200 83c0 	bhi.w	404742 <_svfprintf_r+0x83e>
  403fc2:	e8df f010 	tbh	[pc, r0, lsl #1]
  403fc6:	0238      	.short	0x0238
  403fc8:	03be03be 	.word	0x03be03be
  403fcc:	03be0240 	.word	0x03be0240
  403fd0:	03be03be 	.word	0x03be03be
  403fd4:	03be03be 	.word	0x03be03be
  403fd8:	024503be 	.word	0x024503be
  403fdc:	03be0203 	.word	0x03be0203
  403fe0:	026b005d 	.word	0x026b005d
  403fe4:	028603be 	.word	0x028603be
  403fe8:	039c039c 	.word	0x039c039c
  403fec:	039c039c 	.word	0x039c039c
  403ff0:	039c039c 	.word	0x039c039c
  403ff4:	039c039c 	.word	0x039c039c
  403ff8:	03be039c 	.word	0x03be039c
  403ffc:	03be03be 	.word	0x03be03be
  404000:	03be03be 	.word	0x03be03be
  404004:	03be03be 	.word	0x03be03be
  404008:	03be03be 	.word	0x03be03be
  40400c:	033703be 	.word	0x033703be
  404010:	03be0357 	.word	0x03be0357
  404014:	03be0357 	.word	0x03be0357
  404018:	03be03be 	.word	0x03be03be
  40401c:	039703be 	.word	0x039703be
  404020:	03be03be 	.word	0x03be03be
  404024:	03be03ac 	.word	0x03be03ac
  404028:	03be03be 	.word	0x03be03be
  40402c:	03be03be 	.word	0x03be03be
  404030:	03be0259 	.word	0x03be0259
  404034:	031e03be 	.word	0x031e03be
  404038:	03be03be 	.word	0x03be03be
  40403c:	03be03be 	.word	0x03be03be
  404040:	03be03be 	.word	0x03be03be
  404044:	03be03be 	.word	0x03be03be
  404048:	03be03be 	.word	0x03be03be
  40404c:	02db02c6 	.word	0x02db02c6
  404050:	03570357 	.word	0x03570357
  404054:	028b0357 	.word	0x028b0357
  404058:	03be02db 	.word	0x03be02db
  40405c:	029003be 	.word	0x029003be
  404060:	029d03be 	.word	0x029d03be
  404064:	02b401cc 	.word	0x02b401cc
  404068:	03be0208 	.word	0x03be0208
  40406c:	03be01e1 	.word	0x03be01e1
  404070:	03be007e 	.word	0x03be007e
  404074:	020d03be 	.word	0x020d03be
  404078:	980d      	ldr	r0, [sp, #52]	; 0x34
  40407a:	930f      	str	r3, [sp, #60]	; 0x3c
  40407c:	4240      	negs	r0, r0
  40407e:	900d      	str	r0, [sp, #52]	; 0x34
  404080:	f04b 0b04 	orr.w	fp, fp, #4
  404084:	f89a 3000 	ldrb.w	r3, [sl]
  404088:	e794      	b.n	403fb4 <_svfprintf_r+0xb0>
  40408a:	aa25      	add	r2, sp, #148	; 0x94
  40408c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40408e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404090:	f003 f924 	bl	4072dc <__ssprint_r>
  404094:	b940      	cbnz	r0, 4040a8 <_svfprintf_r+0x1a4>
  404096:	46c8      	mov	r8, r9
  404098:	e779      	b.n	403f8e <_svfprintf_r+0x8a>
  40409a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40409c:	b123      	cbz	r3, 4040a8 <_svfprintf_r+0x1a4>
  40409e:	980c      	ldr	r0, [sp, #48]	; 0x30
  4040a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4040a2:	aa25      	add	r2, sp, #148	; 0x94
  4040a4:	f003 f91a 	bl	4072dc <__ssprint_r>
  4040a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4040aa:	899b      	ldrh	r3, [r3, #12]
  4040ac:	f013 0f40 	tst.w	r3, #64	; 0x40
  4040b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4040b2:	bf18      	it	ne
  4040b4:	f04f 33ff 	movne.w	r3, #4294967295
  4040b8:	9309      	str	r3, [sp, #36]	; 0x24
  4040ba:	9809      	ldr	r0, [sp, #36]	; 0x24
  4040bc:	b043      	add	sp, #268	; 0x10c
  4040be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040c2:	f01b 0f20 	tst.w	fp, #32
  4040c6:	9311      	str	r3, [sp, #68]	; 0x44
  4040c8:	f040 81dd 	bne.w	404486 <_svfprintf_r+0x582>
  4040cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4040ce:	f01b 0f10 	tst.w	fp, #16
  4040d2:	4613      	mov	r3, r2
  4040d4:	f040 856c 	bne.w	404bb0 <_svfprintf_r+0xcac>
  4040d8:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4040dc:	f000 8568 	beq.w	404bb0 <_svfprintf_r+0xcac>
  4040e0:	8814      	ldrh	r4, [r2, #0]
  4040e2:	3204      	adds	r2, #4
  4040e4:	2500      	movs	r5, #0
  4040e6:	2301      	movs	r3, #1
  4040e8:	920f      	str	r2, [sp, #60]	; 0x3c
  4040ea:	2700      	movs	r7, #0
  4040ec:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4040f0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4040f2:	1c4a      	adds	r2, r1, #1
  4040f4:	f000 8265 	beq.w	4045c2 <_svfprintf_r+0x6be>
  4040f8:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  4040fc:	9207      	str	r2, [sp, #28]
  4040fe:	ea54 0205 	orrs.w	r2, r4, r5
  404102:	f040 8264 	bne.w	4045ce <_svfprintf_r+0x6ca>
  404106:	2900      	cmp	r1, #0
  404108:	f040 8439 	bne.w	40497e <_svfprintf_r+0xa7a>
  40410c:	2b00      	cmp	r3, #0
  40410e:	f040 84d4 	bne.w	404aba <_svfprintf_r+0xbb6>
  404112:	f01b 0301 	ands.w	r3, fp, #1
  404116:	930e      	str	r3, [sp, #56]	; 0x38
  404118:	f000 8602 	beq.w	404d20 <_svfprintf_r+0xe1c>
  40411c:	ae42      	add	r6, sp, #264	; 0x108
  40411e:	2330      	movs	r3, #48	; 0x30
  404120:	f806 3d41 	strb.w	r3, [r6, #-65]!
  404124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404126:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404128:	4293      	cmp	r3, r2
  40412a:	bfb8      	it	lt
  40412c:	4613      	movlt	r3, r2
  40412e:	9308      	str	r3, [sp, #32]
  404130:	2300      	movs	r3, #0
  404132:	9312      	str	r3, [sp, #72]	; 0x48
  404134:	b117      	cbz	r7, 40413c <_svfprintf_r+0x238>
  404136:	9b08      	ldr	r3, [sp, #32]
  404138:	3301      	adds	r3, #1
  40413a:	9308      	str	r3, [sp, #32]
  40413c:	9b07      	ldr	r3, [sp, #28]
  40413e:	f013 0302 	ands.w	r3, r3, #2
  404142:	9310      	str	r3, [sp, #64]	; 0x40
  404144:	d002      	beq.n	40414c <_svfprintf_r+0x248>
  404146:	9b08      	ldr	r3, [sp, #32]
  404148:	3302      	adds	r3, #2
  40414a:	9308      	str	r3, [sp, #32]
  40414c:	9b07      	ldr	r3, [sp, #28]
  40414e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  404152:	f040 830d 	bne.w	404770 <_svfprintf_r+0x86c>
  404156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404158:	9a08      	ldr	r2, [sp, #32]
  40415a:	eba3 0b02 	sub.w	fp, r3, r2
  40415e:	f1bb 0f00 	cmp.w	fp, #0
  404162:	f340 8305 	ble.w	404770 <_svfprintf_r+0x86c>
  404166:	f1bb 0f10 	cmp.w	fp, #16
  40416a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40416c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40416e:	dd29      	ble.n	4041c4 <_svfprintf_r+0x2c0>
  404170:	4643      	mov	r3, r8
  404172:	4621      	mov	r1, r4
  404174:	46a8      	mov	r8, r5
  404176:	2710      	movs	r7, #16
  404178:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40417a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40417c:	e006      	b.n	40418c <_svfprintf_r+0x288>
  40417e:	f1ab 0b10 	sub.w	fp, fp, #16
  404182:	f1bb 0f10 	cmp.w	fp, #16
  404186:	f103 0308 	add.w	r3, r3, #8
  40418a:	dd18      	ble.n	4041be <_svfprintf_r+0x2ba>
  40418c:	3201      	adds	r2, #1
  40418e:	48b7      	ldr	r0, [pc, #732]	; (40446c <_svfprintf_r+0x568>)
  404190:	9226      	str	r2, [sp, #152]	; 0x98
  404192:	3110      	adds	r1, #16
  404194:	2a07      	cmp	r2, #7
  404196:	9127      	str	r1, [sp, #156]	; 0x9c
  404198:	e883 0081 	stmia.w	r3, {r0, r7}
  40419c:	ddef      	ble.n	40417e <_svfprintf_r+0x27a>
  40419e:	aa25      	add	r2, sp, #148	; 0x94
  4041a0:	4629      	mov	r1, r5
  4041a2:	4620      	mov	r0, r4
  4041a4:	f003 f89a 	bl	4072dc <__ssprint_r>
  4041a8:	2800      	cmp	r0, #0
  4041aa:	f47f af7d 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  4041ae:	f1ab 0b10 	sub.w	fp, fp, #16
  4041b2:	f1bb 0f10 	cmp.w	fp, #16
  4041b6:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4041b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4041ba:	464b      	mov	r3, r9
  4041bc:	dce6      	bgt.n	40418c <_svfprintf_r+0x288>
  4041be:	4645      	mov	r5, r8
  4041c0:	460c      	mov	r4, r1
  4041c2:	4698      	mov	r8, r3
  4041c4:	3201      	adds	r2, #1
  4041c6:	4ba9      	ldr	r3, [pc, #676]	; (40446c <_svfprintf_r+0x568>)
  4041c8:	9226      	str	r2, [sp, #152]	; 0x98
  4041ca:	445c      	add	r4, fp
  4041cc:	2a07      	cmp	r2, #7
  4041ce:	9427      	str	r4, [sp, #156]	; 0x9c
  4041d0:	e888 0808 	stmia.w	r8, {r3, fp}
  4041d4:	f300 8495 	bgt.w	404b02 <_svfprintf_r+0xbfe>
  4041d8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4041dc:	f108 0808 	add.w	r8, r8, #8
  4041e0:	b177      	cbz	r7, 404200 <_svfprintf_r+0x2fc>
  4041e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4041e4:	3301      	adds	r3, #1
  4041e6:	3401      	adds	r4, #1
  4041e8:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  4041ec:	2201      	movs	r2, #1
  4041ee:	2b07      	cmp	r3, #7
  4041f0:	9427      	str	r4, [sp, #156]	; 0x9c
  4041f2:	9326      	str	r3, [sp, #152]	; 0x98
  4041f4:	e888 0006 	stmia.w	r8, {r1, r2}
  4041f8:	f300 83d8 	bgt.w	4049ac <_svfprintf_r+0xaa8>
  4041fc:	f108 0808 	add.w	r8, r8, #8
  404200:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404202:	b16b      	cbz	r3, 404220 <_svfprintf_r+0x31c>
  404204:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404206:	3301      	adds	r3, #1
  404208:	3402      	adds	r4, #2
  40420a:	a91e      	add	r1, sp, #120	; 0x78
  40420c:	2202      	movs	r2, #2
  40420e:	2b07      	cmp	r3, #7
  404210:	9427      	str	r4, [sp, #156]	; 0x9c
  404212:	9326      	str	r3, [sp, #152]	; 0x98
  404214:	e888 0006 	stmia.w	r8, {r1, r2}
  404218:	f300 83d3 	bgt.w	4049c2 <_svfprintf_r+0xabe>
  40421c:	f108 0808 	add.w	r8, r8, #8
  404220:	2d80      	cmp	r5, #128	; 0x80
  404222:	f000 8313 	beq.w	40484c <_svfprintf_r+0x948>
  404226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404228:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40422a:	1a9f      	subs	r7, r3, r2
  40422c:	2f00      	cmp	r7, #0
  40422e:	dd36      	ble.n	40429e <_svfprintf_r+0x39a>
  404230:	2f10      	cmp	r7, #16
  404232:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404234:	4d8e      	ldr	r5, [pc, #568]	; (404470 <_svfprintf_r+0x56c>)
  404236:	dd27      	ble.n	404288 <_svfprintf_r+0x384>
  404238:	4642      	mov	r2, r8
  40423a:	4621      	mov	r1, r4
  40423c:	46b0      	mov	r8, r6
  40423e:	f04f 0b10 	mov.w	fp, #16
  404242:	462e      	mov	r6, r5
  404244:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404246:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404248:	e004      	b.n	404254 <_svfprintf_r+0x350>
  40424a:	3f10      	subs	r7, #16
  40424c:	2f10      	cmp	r7, #16
  40424e:	f102 0208 	add.w	r2, r2, #8
  404252:	dd15      	ble.n	404280 <_svfprintf_r+0x37c>
  404254:	3301      	adds	r3, #1
  404256:	3110      	adds	r1, #16
  404258:	2b07      	cmp	r3, #7
  40425a:	9127      	str	r1, [sp, #156]	; 0x9c
  40425c:	9326      	str	r3, [sp, #152]	; 0x98
  40425e:	e882 0840 	stmia.w	r2, {r6, fp}
  404262:	ddf2      	ble.n	40424a <_svfprintf_r+0x346>
  404264:	aa25      	add	r2, sp, #148	; 0x94
  404266:	4629      	mov	r1, r5
  404268:	4620      	mov	r0, r4
  40426a:	f003 f837 	bl	4072dc <__ssprint_r>
  40426e:	2800      	cmp	r0, #0
  404270:	f47f af1a 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  404274:	3f10      	subs	r7, #16
  404276:	2f10      	cmp	r7, #16
  404278:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40427a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40427c:	464a      	mov	r2, r9
  40427e:	dce9      	bgt.n	404254 <_svfprintf_r+0x350>
  404280:	4635      	mov	r5, r6
  404282:	460c      	mov	r4, r1
  404284:	4646      	mov	r6, r8
  404286:	4690      	mov	r8, r2
  404288:	3301      	adds	r3, #1
  40428a:	443c      	add	r4, r7
  40428c:	2b07      	cmp	r3, #7
  40428e:	9427      	str	r4, [sp, #156]	; 0x9c
  404290:	9326      	str	r3, [sp, #152]	; 0x98
  404292:	e888 00a0 	stmia.w	r8, {r5, r7}
  404296:	f300 837e 	bgt.w	404996 <_svfprintf_r+0xa92>
  40429a:	f108 0808 	add.w	r8, r8, #8
  40429e:	9b07      	ldr	r3, [sp, #28]
  4042a0:	05df      	lsls	r7, r3, #23
  4042a2:	f100 8267 	bmi.w	404774 <_svfprintf_r+0x870>
  4042a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4042a8:	990e      	ldr	r1, [sp, #56]	; 0x38
  4042aa:	f8c8 6000 	str.w	r6, [r8]
  4042ae:	3301      	adds	r3, #1
  4042b0:	440c      	add	r4, r1
  4042b2:	2b07      	cmp	r3, #7
  4042b4:	9427      	str	r4, [sp, #156]	; 0x9c
  4042b6:	f8c8 1004 	str.w	r1, [r8, #4]
  4042ba:	9326      	str	r3, [sp, #152]	; 0x98
  4042bc:	f300 834a 	bgt.w	404954 <_svfprintf_r+0xa50>
  4042c0:	f108 0808 	add.w	r8, r8, #8
  4042c4:	9b07      	ldr	r3, [sp, #28]
  4042c6:	075b      	lsls	r3, r3, #29
  4042c8:	d53a      	bpl.n	404340 <_svfprintf_r+0x43c>
  4042ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4042cc:	9a08      	ldr	r2, [sp, #32]
  4042ce:	1a9d      	subs	r5, r3, r2
  4042d0:	2d00      	cmp	r5, #0
  4042d2:	dd35      	ble.n	404340 <_svfprintf_r+0x43c>
  4042d4:	2d10      	cmp	r5, #16
  4042d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4042d8:	dd20      	ble.n	40431c <_svfprintf_r+0x418>
  4042da:	2610      	movs	r6, #16
  4042dc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4042de:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  4042e2:	e004      	b.n	4042ee <_svfprintf_r+0x3ea>
  4042e4:	3d10      	subs	r5, #16
  4042e6:	2d10      	cmp	r5, #16
  4042e8:	f108 0808 	add.w	r8, r8, #8
  4042ec:	dd16      	ble.n	40431c <_svfprintf_r+0x418>
  4042ee:	3301      	adds	r3, #1
  4042f0:	4a5e      	ldr	r2, [pc, #376]	; (40446c <_svfprintf_r+0x568>)
  4042f2:	9326      	str	r3, [sp, #152]	; 0x98
  4042f4:	3410      	adds	r4, #16
  4042f6:	2b07      	cmp	r3, #7
  4042f8:	9427      	str	r4, [sp, #156]	; 0x9c
  4042fa:	e888 0044 	stmia.w	r8, {r2, r6}
  4042fe:	ddf1      	ble.n	4042e4 <_svfprintf_r+0x3e0>
  404300:	aa25      	add	r2, sp, #148	; 0x94
  404302:	4659      	mov	r1, fp
  404304:	4638      	mov	r0, r7
  404306:	f002 ffe9 	bl	4072dc <__ssprint_r>
  40430a:	2800      	cmp	r0, #0
  40430c:	f47f aecc 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  404310:	3d10      	subs	r5, #16
  404312:	2d10      	cmp	r5, #16
  404314:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404316:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404318:	46c8      	mov	r8, r9
  40431a:	dce8      	bgt.n	4042ee <_svfprintf_r+0x3ea>
  40431c:	3301      	adds	r3, #1
  40431e:	4a53      	ldr	r2, [pc, #332]	; (40446c <_svfprintf_r+0x568>)
  404320:	9326      	str	r3, [sp, #152]	; 0x98
  404322:	442c      	add	r4, r5
  404324:	2b07      	cmp	r3, #7
  404326:	9427      	str	r4, [sp, #156]	; 0x9c
  404328:	e888 0024 	stmia.w	r8, {r2, r5}
  40432c:	dd08      	ble.n	404340 <_svfprintf_r+0x43c>
  40432e:	aa25      	add	r2, sp, #148	; 0x94
  404330:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404332:	980c      	ldr	r0, [sp, #48]	; 0x30
  404334:	f002 ffd2 	bl	4072dc <__ssprint_r>
  404338:	2800      	cmp	r0, #0
  40433a:	f47f aeb5 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  40433e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404340:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404342:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404344:	9908      	ldr	r1, [sp, #32]
  404346:	428a      	cmp	r2, r1
  404348:	bfac      	ite	ge
  40434a:	189b      	addge	r3, r3, r2
  40434c:	185b      	addlt	r3, r3, r1
  40434e:	9309      	str	r3, [sp, #36]	; 0x24
  404350:	2c00      	cmp	r4, #0
  404352:	f040 830a 	bne.w	40496a <_svfprintf_r+0xa66>
  404356:	2300      	movs	r3, #0
  404358:	9326      	str	r3, [sp, #152]	; 0x98
  40435a:	46c8      	mov	r8, r9
  40435c:	e5f9      	b.n	403f52 <_svfprintf_r+0x4e>
  40435e:	9311      	str	r3, [sp, #68]	; 0x44
  404360:	f01b 0320 	ands.w	r3, fp, #32
  404364:	f040 81e2 	bne.w	40472c <_svfprintf_r+0x828>
  404368:	f01b 0210 	ands.w	r2, fp, #16
  40436c:	f040 842c 	bne.w	404bc8 <_svfprintf_r+0xcc4>
  404370:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  404374:	f000 8428 	beq.w	404bc8 <_svfprintf_r+0xcc4>
  404378:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40437a:	4613      	mov	r3, r2
  40437c:	460a      	mov	r2, r1
  40437e:	3204      	adds	r2, #4
  404380:	880c      	ldrh	r4, [r1, #0]
  404382:	920f      	str	r2, [sp, #60]	; 0x3c
  404384:	2500      	movs	r5, #0
  404386:	e6b0      	b.n	4040ea <_svfprintf_r+0x1e6>
  404388:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40438a:	9311      	str	r3, [sp, #68]	; 0x44
  40438c:	6816      	ldr	r6, [r2, #0]
  40438e:	2400      	movs	r4, #0
  404390:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  404394:	1d15      	adds	r5, r2, #4
  404396:	2e00      	cmp	r6, #0
  404398:	f000 86a5 	beq.w	4050e6 <_svfprintf_r+0x11e2>
  40439c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40439e:	1c53      	adds	r3, r2, #1
  4043a0:	f000 8607 	beq.w	404fb2 <_svfprintf_r+0x10ae>
  4043a4:	4621      	mov	r1, r4
  4043a6:	4630      	mov	r0, r6
  4043a8:	f002 fa7a 	bl	4068a0 <memchr>
  4043ac:	2800      	cmp	r0, #0
  4043ae:	f000 86df 	beq.w	405170 <_svfprintf_r+0x126c>
  4043b2:	1b83      	subs	r3, r0, r6
  4043b4:	930e      	str	r3, [sp, #56]	; 0x38
  4043b6:	940a      	str	r4, [sp, #40]	; 0x28
  4043b8:	950f      	str	r5, [sp, #60]	; 0x3c
  4043ba:	f8cd b01c 	str.w	fp, [sp, #28]
  4043be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4043c2:	9308      	str	r3, [sp, #32]
  4043c4:	9412      	str	r4, [sp, #72]	; 0x48
  4043c6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4043ca:	e6b3      	b.n	404134 <_svfprintf_r+0x230>
  4043cc:	f89a 3000 	ldrb.w	r3, [sl]
  4043d0:	2201      	movs	r2, #1
  4043d2:	212b      	movs	r1, #43	; 0x2b
  4043d4:	e5ee      	b.n	403fb4 <_svfprintf_r+0xb0>
  4043d6:	f04b 0b20 	orr.w	fp, fp, #32
  4043da:	f89a 3000 	ldrb.w	r3, [sl]
  4043de:	e5e9      	b.n	403fb4 <_svfprintf_r+0xb0>
  4043e0:	9311      	str	r3, [sp, #68]	; 0x44
  4043e2:	2a00      	cmp	r2, #0
  4043e4:	f040 878d 	bne.w	405302 <_svfprintf_r+0x13fe>
  4043e8:	4b22      	ldr	r3, [pc, #136]	; (404474 <_svfprintf_r+0x570>)
  4043ea:	9318      	str	r3, [sp, #96]	; 0x60
  4043ec:	f01b 0f20 	tst.w	fp, #32
  4043f0:	f040 8111 	bne.w	404616 <_svfprintf_r+0x712>
  4043f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4043f6:	f01b 0f10 	tst.w	fp, #16
  4043fa:	4613      	mov	r3, r2
  4043fc:	f040 83df 	bne.w	404bbe <_svfprintf_r+0xcba>
  404400:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404404:	f000 83db 	beq.w	404bbe <_svfprintf_r+0xcba>
  404408:	3304      	adds	r3, #4
  40440a:	8814      	ldrh	r4, [r2, #0]
  40440c:	930f      	str	r3, [sp, #60]	; 0x3c
  40440e:	2500      	movs	r5, #0
  404410:	f01b 0f01 	tst.w	fp, #1
  404414:	f000 810c 	beq.w	404630 <_svfprintf_r+0x72c>
  404418:	ea54 0305 	orrs.w	r3, r4, r5
  40441c:	f000 8108 	beq.w	404630 <_svfprintf_r+0x72c>
  404420:	2330      	movs	r3, #48	; 0x30
  404422:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  404426:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  40442a:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  40442e:	f04b 0b02 	orr.w	fp, fp, #2
  404432:	2302      	movs	r3, #2
  404434:	e659      	b.n	4040ea <_svfprintf_r+0x1e6>
  404436:	f89a 3000 	ldrb.w	r3, [sl]
  40443a:	2900      	cmp	r1, #0
  40443c:	f47f adba 	bne.w	403fb4 <_svfprintf_r+0xb0>
  404440:	2201      	movs	r2, #1
  404442:	2120      	movs	r1, #32
  404444:	e5b6      	b.n	403fb4 <_svfprintf_r+0xb0>
  404446:	f04b 0b01 	orr.w	fp, fp, #1
  40444a:	f89a 3000 	ldrb.w	r3, [sl]
  40444e:	e5b1      	b.n	403fb4 <_svfprintf_r+0xb0>
  404450:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  404452:	6823      	ldr	r3, [r4, #0]
  404454:	930d      	str	r3, [sp, #52]	; 0x34
  404456:	4618      	mov	r0, r3
  404458:	2800      	cmp	r0, #0
  40445a:	4623      	mov	r3, r4
  40445c:	f103 0304 	add.w	r3, r3, #4
  404460:	f6ff ae0a 	blt.w	404078 <_svfprintf_r+0x174>
  404464:	930f      	str	r3, [sp, #60]	; 0x3c
  404466:	f89a 3000 	ldrb.w	r3, [sl]
  40446a:	e5a3      	b.n	403fb4 <_svfprintf_r+0xb0>
  40446c:	0040919c 	.word	0x0040919c
  404470:	004091ac 	.word	0x004091ac
  404474:	0040917c 	.word	0x0040917c
  404478:	f04b 0b10 	orr.w	fp, fp, #16
  40447c:	f01b 0f20 	tst.w	fp, #32
  404480:	9311      	str	r3, [sp, #68]	; 0x44
  404482:	f43f ae23 	beq.w	4040cc <_svfprintf_r+0x1c8>
  404486:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404488:	3507      	adds	r5, #7
  40448a:	f025 0307 	bic.w	r3, r5, #7
  40448e:	f103 0208 	add.w	r2, r3, #8
  404492:	e9d3 4500 	ldrd	r4, r5, [r3]
  404496:	920f      	str	r2, [sp, #60]	; 0x3c
  404498:	2301      	movs	r3, #1
  40449a:	e626      	b.n	4040ea <_svfprintf_r+0x1e6>
  40449c:	f89a 3000 	ldrb.w	r3, [sl]
  4044a0:	2b2a      	cmp	r3, #42	; 0x2a
  4044a2:	f10a 0401 	add.w	r4, sl, #1
  4044a6:	f000 871f 	beq.w	4052e8 <_svfprintf_r+0x13e4>
  4044aa:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4044ae:	2809      	cmp	r0, #9
  4044b0:	46a2      	mov	sl, r4
  4044b2:	f200 86ab 	bhi.w	40520c <_svfprintf_r+0x1308>
  4044b6:	2300      	movs	r3, #0
  4044b8:	461c      	mov	r4, r3
  4044ba:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4044be:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4044c2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4044c6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4044ca:	2809      	cmp	r0, #9
  4044cc:	d9f5      	bls.n	4044ba <_svfprintf_r+0x5b6>
  4044ce:	940a      	str	r4, [sp, #40]	; 0x28
  4044d0:	e572      	b.n	403fb8 <_svfprintf_r+0xb4>
  4044d2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  4044d6:	f89a 3000 	ldrb.w	r3, [sl]
  4044da:	e56b      	b.n	403fb4 <_svfprintf_r+0xb0>
  4044dc:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  4044e0:	f89a 3000 	ldrb.w	r3, [sl]
  4044e4:	e566      	b.n	403fb4 <_svfprintf_r+0xb0>
  4044e6:	f89a 3000 	ldrb.w	r3, [sl]
  4044ea:	2b6c      	cmp	r3, #108	; 0x6c
  4044ec:	bf03      	ittte	eq
  4044ee:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  4044f2:	f04b 0b20 	orreq.w	fp, fp, #32
  4044f6:	f10a 0a01 	addeq.w	sl, sl, #1
  4044fa:	f04b 0b10 	orrne.w	fp, fp, #16
  4044fe:	e559      	b.n	403fb4 <_svfprintf_r+0xb0>
  404500:	2a00      	cmp	r2, #0
  404502:	f040 8709 	bne.w	405318 <_svfprintf_r+0x1414>
  404506:	f01b 0f20 	tst.w	fp, #32
  40450a:	f040 84f7 	bne.w	404efc <_svfprintf_r+0xff8>
  40450e:	f01b 0f10 	tst.w	fp, #16
  404512:	f040 84aa 	bne.w	404e6a <_svfprintf_r+0xf66>
  404516:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40451a:	f000 84a6 	beq.w	404e6a <_svfprintf_r+0xf66>
  40451e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404520:	6813      	ldr	r3, [r2, #0]
  404522:	3204      	adds	r2, #4
  404524:	920f      	str	r2, [sp, #60]	; 0x3c
  404526:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  40452a:	801a      	strh	r2, [r3, #0]
  40452c:	e511      	b.n	403f52 <_svfprintf_r+0x4e>
  40452e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404530:	4bb2      	ldr	r3, [pc, #712]	; (4047fc <_svfprintf_r+0x8f8>)
  404532:	680c      	ldr	r4, [r1, #0]
  404534:	9318      	str	r3, [sp, #96]	; 0x60
  404536:	2230      	movs	r2, #48	; 0x30
  404538:	2378      	movs	r3, #120	; 0x78
  40453a:	3104      	adds	r1, #4
  40453c:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  404540:	9311      	str	r3, [sp, #68]	; 0x44
  404542:	f04b 0b02 	orr.w	fp, fp, #2
  404546:	910f      	str	r1, [sp, #60]	; 0x3c
  404548:	2500      	movs	r5, #0
  40454a:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  40454e:	2302      	movs	r3, #2
  404550:	e5cb      	b.n	4040ea <_svfprintf_r+0x1e6>
  404552:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404554:	9311      	str	r3, [sp, #68]	; 0x44
  404556:	680a      	ldr	r2, [r1, #0]
  404558:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  40455c:	2300      	movs	r3, #0
  40455e:	460a      	mov	r2, r1
  404560:	461f      	mov	r7, r3
  404562:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404566:	3204      	adds	r2, #4
  404568:	2301      	movs	r3, #1
  40456a:	9308      	str	r3, [sp, #32]
  40456c:	f8cd b01c 	str.w	fp, [sp, #28]
  404570:	970a      	str	r7, [sp, #40]	; 0x28
  404572:	9712      	str	r7, [sp, #72]	; 0x48
  404574:	920f      	str	r2, [sp, #60]	; 0x3c
  404576:	930e      	str	r3, [sp, #56]	; 0x38
  404578:	ae28      	add	r6, sp, #160	; 0xa0
  40457a:	e5df      	b.n	40413c <_svfprintf_r+0x238>
  40457c:	9311      	str	r3, [sp, #68]	; 0x44
  40457e:	2a00      	cmp	r2, #0
  404580:	f040 86e2 	bne.w	405348 <_svfprintf_r+0x1444>
  404584:	f01b 0f20 	tst.w	fp, #32
  404588:	d15d      	bne.n	404646 <_svfprintf_r+0x742>
  40458a:	f01b 0f10 	tst.w	fp, #16
  40458e:	f040 8306 	bne.w	404b9e <_svfprintf_r+0xc9a>
  404592:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404596:	f000 8302 	beq.w	404b9e <_svfprintf_r+0xc9a>
  40459a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40459c:	f9b1 4000 	ldrsh.w	r4, [r1]
  4045a0:	3104      	adds	r1, #4
  4045a2:	17e5      	asrs	r5, r4, #31
  4045a4:	4622      	mov	r2, r4
  4045a6:	462b      	mov	r3, r5
  4045a8:	910f      	str	r1, [sp, #60]	; 0x3c
  4045aa:	2a00      	cmp	r2, #0
  4045ac:	f173 0300 	sbcs.w	r3, r3, #0
  4045b0:	db58      	blt.n	404664 <_svfprintf_r+0x760>
  4045b2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4045b4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4045b8:	1c4a      	adds	r2, r1, #1
  4045ba:	f04f 0301 	mov.w	r3, #1
  4045be:	f47f ad9b 	bne.w	4040f8 <_svfprintf_r+0x1f4>
  4045c2:	ea54 0205 	orrs.w	r2, r4, r5
  4045c6:	f000 81dc 	beq.w	404982 <_svfprintf_r+0xa7e>
  4045ca:	f8cd b01c 	str.w	fp, [sp, #28]
  4045ce:	2b01      	cmp	r3, #1
  4045d0:	f000 8278 	beq.w	404ac4 <_svfprintf_r+0xbc0>
  4045d4:	2b02      	cmp	r3, #2
  4045d6:	f040 8203 	bne.w	4049e0 <_svfprintf_r+0xadc>
  4045da:	9818      	ldr	r0, [sp, #96]	; 0x60
  4045dc:	464e      	mov	r6, r9
  4045de:	0923      	lsrs	r3, r4, #4
  4045e0:	f004 010f 	and.w	r1, r4, #15
  4045e4:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4045e8:	092a      	lsrs	r2, r5, #4
  4045ea:	461c      	mov	r4, r3
  4045ec:	4615      	mov	r5, r2
  4045ee:	5c43      	ldrb	r3, [r0, r1]
  4045f0:	f806 3d01 	strb.w	r3, [r6, #-1]!
  4045f4:	ea54 0305 	orrs.w	r3, r4, r5
  4045f8:	d1f1      	bne.n	4045de <_svfprintf_r+0x6da>
  4045fa:	eba9 0306 	sub.w	r3, r9, r6
  4045fe:	930e      	str	r3, [sp, #56]	; 0x38
  404600:	e590      	b.n	404124 <_svfprintf_r+0x220>
  404602:	9311      	str	r3, [sp, #68]	; 0x44
  404604:	2a00      	cmp	r2, #0
  404606:	f040 869b 	bne.w	405340 <_svfprintf_r+0x143c>
  40460a:	4b7d      	ldr	r3, [pc, #500]	; (404800 <_svfprintf_r+0x8fc>)
  40460c:	9318      	str	r3, [sp, #96]	; 0x60
  40460e:	f01b 0f20 	tst.w	fp, #32
  404612:	f43f aeef 	beq.w	4043f4 <_svfprintf_r+0x4f0>
  404616:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404618:	3507      	adds	r5, #7
  40461a:	f025 0307 	bic.w	r3, r5, #7
  40461e:	f103 0208 	add.w	r2, r3, #8
  404622:	f01b 0f01 	tst.w	fp, #1
  404626:	920f      	str	r2, [sp, #60]	; 0x3c
  404628:	e9d3 4500 	ldrd	r4, r5, [r3]
  40462c:	f47f aef4 	bne.w	404418 <_svfprintf_r+0x514>
  404630:	2302      	movs	r3, #2
  404632:	e55a      	b.n	4040ea <_svfprintf_r+0x1e6>
  404634:	9311      	str	r3, [sp, #68]	; 0x44
  404636:	2a00      	cmp	r2, #0
  404638:	f040 867e 	bne.w	405338 <_svfprintf_r+0x1434>
  40463c:	f04b 0b10 	orr.w	fp, fp, #16
  404640:	f01b 0f20 	tst.w	fp, #32
  404644:	d0a1      	beq.n	40458a <_svfprintf_r+0x686>
  404646:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404648:	3507      	adds	r5, #7
  40464a:	f025 0507 	bic.w	r5, r5, #7
  40464e:	e9d5 2300 	ldrd	r2, r3, [r5]
  404652:	2a00      	cmp	r2, #0
  404654:	f105 0108 	add.w	r1, r5, #8
  404658:	461d      	mov	r5, r3
  40465a:	f173 0300 	sbcs.w	r3, r3, #0
  40465e:	910f      	str	r1, [sp, #60]	; 0x3c
  404660:	4614      	mov	r4, r2
  404662:	daa6      	bge.n	4045b2 <_svfprintf_r+0x6ae>
  404664:	272d      	movs	r7, #45	; 0x2d
  404666:	4264      	negs	r4, r4
  404668:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40466c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404670:	2301      	movs	r3, #1
  404672:	e53d      	b.n	4040f0 <_svfprintf_r+0x1ec>
  404674:	9311      	str	r3, [sp, #68]	; 0x44
  404676:	2a00      	cmp	r2, #0
  404678:	f040 865a 	bne.w	405330 <_svfprintf_r+0x142c>
  40467c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40467e:	3507      	adds	r5, #7
  404680:	f025 0307 	bic.w	r3, r5, #7
  404684:	f103 0208 	add.w	r2, r3, #8
  404688:	920f      	str	r2, [sp, #60]	; 0x3c
  40468a:	681a      	ldr	r2, [r3, #0]
  40468c:	9214      	str	r2, [sp, #80]	; 0x50
  40468e:	685b      	ldr	r3, [r3, #4]
  404690:	9315      	str	r3, [sp, #84]	; 0x54
  404692:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404694:	9d14      	ldr	r5, [sp, #80]	; 0x50
  404696:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40469a:	4628      	mov	r0, r5
  40469c:	4621      	mov	r1, r4
  40469e:	f04f 32ff 	mov.w	r2, #4294967295
  4046a2:	4b58      	ldr	r3, [pc, #352]	; (404804 <_svfprintf_r+0x900>)
  4046a4:	f003 fed0 	bl	408448 <__aeabi_dcmpun>
  4046a8:	2800      	cmp	r0, #0
  4046aa:	f040 8348 	bne.w	404d3e <_svfprintf_r+0xe3a>
  4046ae:	4628      	mov	r0, r5
  4046b0:	4621      	mov	r1, r4
  4046b2:	f04f 32ff 	mov.w	r2, #4294967295
  4046b6:	4b53      	ldr	r3, [pc, #332]	; (404804 <_svfprintf_r+0x900>)
  4046b8:	f003 fea8 	bl	40840c <__aeabi_dcmple>
  4046bc:	2800      	cmp	r0, #0
  4046be:	f040 833e 	bne.w	404d3e <_svfprintf_r+0xe3a>
  4046c2:	a814      	add	r0, sp, #80	; 0x50
  4046c4:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  4046c6:	f003 fe97 	bl	4083f8 <__aeabi_dcmplt>
  4046ca:	2800      	cmp	r0, #0
  4046cc:	f040 852f 	bne.w	40512e <_svfprintf_r+0x122a>
  4046d0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4046d4:	4e4c      	ldr	r6, [pc, #304]	; (404808 <_svfprintf_r+0x904>)
  4046d6:	4b4d      	ldr	r3, [pc, #308]	; (40480c <_svfprintf_r+0x908>)
  4046d8:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  4046dc:	9007      	str	r0, [sp, #28]
  4046de:	9811      	ldr	r0, [sp, #68]	; 0x44
  4046e0:	2203      	movs	r2, #3
  4046e2:	2100      	movs	r1, #0
  4046e4:	9208      	str	r2, [sp, #32]
  4046e6:	910a      	str	r1, [sp, #40]	; 0x28
  4046e8:	2847      	cmp	r0, #71	; 0x47
  4046ea:	bfd8      	it	le
  4046ec:	461e      	movle	r6, r3
  4046ee:	920e      	str	r2, [sp, #56]	; 0x38
  4046f0:	9112      	str	r1, [sp, #72]	; 0x48
  4046f2:	e51f      	b.n	404134 <_svfprintf_r+0x230>
  4046f4:	f04b 0b08 	orr.w	fp, fp, #8
  4046f8:	f89a 3000 	ldrb.w	r3, [sl]
  4046fc:	e45a      	b.n	403fb4 <_svfprintf_r+0xb0>
  4046fe:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404702:	2300      	movs	r3, #0
  404704:	461c      	mov	r4, r3
  404706:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40470a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40470e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404712:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404716:	2809      	cmp	r0, #9
  404718:	d9f5      	bls.n	404706 <_svfprintf_r+0x802>
  40471a:	940d      	str	r4, [sp, #52]	; 0x34
  40471c:	e44c      	b.n	403fb8 <_svfprintf_r+0xb4>
  40471e:	f04b 0b10 	orr.w	fp, fp, #16
  404722:	9311      	str	r3, [sp, #68]	; 0x44
  404724:	f01b 0320 	ands.w	r3, fp, #32
  404728:	f43f ae1e 	beq.w	404368 <_svfprintf_r+0x464>
  40472c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40472e:	3507      	adds	r5, #7
  404730:	f025 0307 	bic.w	r3, r5, #7
  404734:	f103 0208 	add.w	r2, r3, #8
  404738:	e9d3 4500 	ldrd	r4, r5, [r3]
  40473c:	920f      	str	r2, [sp, #60]	; 0x3c
  40473e:	2300      	movs	r3, #0
  404740:	e4d3      	b.n	4040ea <_svfprintf_r+0x1e6>
  404742:	9311      	str	r3, [sp, #68]	; 0x44
  404744:	2a00      	cmp	r2, #0
  404746:	f040 85e0 	bne.w	40530a <_svfprintf_r+0x1406>
  40474a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40474c:	2a00      	cmp	r2, #0
  40474e:	f43f aca4 	beq.w	40409a <_svfprintf_r+0x196>
  404752:	2300      	movs	r3, #0
  404754:	2101      	movs	r1, #1
  404756:	461f      	mov	r7, r3
  404758:	9108      	str	r1, [sp, #32]
  40475a:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  40475e:	f8cd b01c 	str.w	fp, [sp, #28]
  404762:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404766:	930a      	str	r3, [sp, #40]	; 0x28
  404768:	9312      	str	r3, [sp, #72]	; 0x48
  40476a:	910e      	str	r1, [sp, #56]	; 0x38
  40476c:	ae28      	add	r6, sp, #160	; 0xa0
  40476e:	e4e5      	b.n	40413c <_svfprintf_r+0x238>
  404770:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404772:	e535      	b.n	4041e0 <_svfprintf_r+0x2dc>
  404774:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404776:	2b65      	cmp	r3, #101	; 0x65
  404778:	f340 80a6 	ble.w	4048c8 <_svfprintf_r+0x9c4>
  40477c:	a814      	add	r0, sp, #80	; 0x50
  40477e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  404780:	f003 fe30 	bl	4083e4 <__aeabi_dcmpeq>
  404784:	2800      	cmp	r0, #0
  404786:	f000 814f 	beq.w	404a28 <_svfprintf_r+0xb24>
  40478a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40478c:	4a20      	ldr	r2, [pc, #128]	; (404810 <_svfprintf_r+0x90c>)
  40478e:	f8c8 2000 	str.w	r2, [r8]
  404792:	3301      	adds	r3, #1
  404794:	3401      	adds	r4, #1
  404796:	2201      	movs	r2, #1
  404798:	2b07      	cmp	r3, #7
  40479a:	9427      	str	r4, [sp, #156]	; 0x9c
  40479c:	9326      	str	r3, [sp, #152]	; 0x98
  40479e:	f8c8 2004 	str.w	r2, [r8, #4]
  4047a2:	f300 836a 	bgt.w	404e7a <_svfprintf_r+0xf76>
  4047a6:	f108 0808 	add.w	r8, r8, #8
  4047aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4047ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4047ae:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4047b0:	4293      	cmp	r3, r2
  4047b2:	db03      	blt.n	4047bc <_svfprintf_r+0x8b8>
  4047b4:	9b07      	ldr	r3, [sp, #28]
  4047b6:	07dd      	lsls	r5, r3, #31
  4047b8:	f57f ad84 	bpl.w	4042c4 <_svfprintf_r+0x3c0>
  4047bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4047be:	9919      	ldr	r1, [sp, #100]	; 0x64
  4047c0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4047c2:	f8c8 2000 	str.w	r2, [r8]
  4047c6:	3301      	adds	r3, #1
  4047c8:	440c      	add	r4, r1
  4047ca:	2b07      	cmp	r3, #7
  4047cc:	f8c8 1004 	str.w	r1, [r8, #4]
  4047d0:	9427      	str	r4, [sp, #156]	; 0x9c
  4047d2:	9326      	str	r3, [sp, #152]	; 0x98
  4047d4:	f300 839e 	bgt.w	404f14 <_svfprintf_r+0x1010>
  4047d8:	f108 0808 	add.w	r8, r8, #8
  4047dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4047de:	1e5e      	subs	r6, r3, #1
  4047e0:	2e00      	cmp	r6, #0
  4047e2:	f77f ad6f 	ble.w	4042c4 <_svfprintf_r+0x3c0>
  4047e6:	2e10      	cmp	r6, #16
  4047e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4047ea:	4d0a      	ldr	r5, [pc, #40]	; (404814 <_svfprintf_r+0x910>)
  4047ec:	f340 81f5 	ble.w	404bda <_svfprintf_r+0xcd6>
  4047f0:	4622      	mov	r2, r4
  4047f2:	2710      	movs	r7, #16
  4047f4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4047f8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4047fa:	e013      	b.n	404824 <_svfprintf_r+0x920>
  4047fc:	0040917c 	.word	0x0040917c
  404800:	00409168 	.word	0x00409168
  404804:	7fefffff 	.word	0x7fefffff
  404808:	0040915c 	.word	0x0040915c
  40480c:	00409158 	.word	0x00409158
  404810:	00409198 	.word	0x00409198
  404814:	004091ac 	.word	0x004091ac
  404818:	f108 0808 	add.w	r8, r8, #8
  40481c:	3e10      	subs	r6, #16
  40481e:	2e10      	cmp	r6, #16
  404820:	f340 81da 	ble.w	404bd8 <_svfprintf_r+0xcd4>
  404824:	3301      	adds	r3, #1
  404826:	3210      	adds	r2, #16
  404828:	2b07      	cmp	r3, #7
  40482a:	9227      	str	r2, [sp, #156]	; 0x9c
  40482c:	9326      	str	r3, [sp, #152]	; 0x98
  40482e:	e888 00a0 	stmia.w	r8, {r5, r7}
  404832:	ddf1      	ble.n	404818 <_svfprintf_r+0x914>
  404834:	aa25      	add	r2, sp, #148	; 0x94
  404836:	4621      	mov	r1, r4
  404838:	4658      	mov	r0, fp
  40483a:	f002 fd4f 	bl	4072dc <__ssprint_r>
  40483e:	2800      	cmp	r0, #0
  404840:	f47f ac32 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  404844:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404846:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404848:	46c8      	mov	r8, r9
  40484a:	e7e7      	b.n	40481c <_svfprintf_r+0x918>
  40484c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40484e:	9a08      	ldr	r2, [sp, #32]
  404850:	1a9f      	subs	r7, r3, r2
  404852:	2f00      	cmp	r7, #0
  404854:	f77f ace7 	ble.w	404226 <_svfprintf_r+0x322>
  404858:	2f10      	cmp	r7, #16
  40485a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40485c:	4db6      	ldr	r5, [pc, #728]	; (404b38 <_svfprintf_r+0xc34>)
  40485e:	dd27      	ble.n	4048b0 <_svfprintf_r+0x9ac>
  404860:	4642      	mov	r2, r8
  404862:	4621      	mov	r1, r4
  404864:	46b0      	mov	r8, r6
  404866:	f04f 0b10 	mov.w	fp, #16
  40486a:	462e      	mov	r6, r5
  40486c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40486e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404870:	e004      	b.n	40487c <_svfprintf_r+0x978>
  404872:	3f10      	subs	r7, #16
  404874:	2f10      	cmp	r7, #16
  404876:	f102 0208 	add.w	r2, r2, #8
  40487a:	dd15      	ble.n	4048a8 <_svfprintf_r+0x9a4>
  40487c:	3301      	adds	r3, #1
  40487e:	3110      	adds	r1, #16
  404880:	2b07      	cmp	r3, #7
  404882:	9127      	str	r1, [sp, #156]	; 0x9c
  404884:	9326      	str	r3, [sp, #152]	; 0x98
  404886:	e882 0840 	stmia.w	r2, {r6, fp}
  40488a:	ddf2      	ble.n	404872 <_svfprintf_r+0x96e>
  40488c:	aa25      	add	r2, sp, #148	; 0x94
  40488e:	4629      	mov	r1, r5
  404890:	4620      	mov	r0, r4
  404892:	f002 fd23 	bl	4072dc <__ssprint_r>
  404896:	2800      	cmp	r0, #0
  404898:	f47f ac06 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  40489c:	3f10      	subs	r7, #16
  40489e:	2f10      	cmp	r7, #16
  4048a0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4048a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048a4:	464a      	mov	r2, r9
  4048a6:	dce9      	bgt.n	40487c <_svfprintf_r+0x978>
  4048a8:	4635      	mov	r5, r6
  4048aa:	460c      	mov	r4, r1
  4048ac:	4646      	mov	r6, r8
  4048ae:	4690      	mov	r8, r2
  4048b0:	3301      	adds	r3, #1
  4048b2:	443c      	add	r4, r7
  4048b4:	2b07      	cmp	r3, #7
  4048b6:	9427      	str	r4, [sp, #156]	; 0x9c
  4048b8:	9326      	str	r3, [sp, #152]	; 0x98
  4048ba:	e888 00a0 	stmia.w	r8, {r5, r7}
  4048be:	f300 8232 	bgt.w	404d26 <_svfprintf_r+0xe22>
  4048c2:	f108 0808 	add.w	r8, r8, #8
  4048c6:	e4ae      	b.n	404226 <_svfprintf_r+0x322>
  4048c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4048ca:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4048cc:	2b01      	cmp	r3, #1
  4048ce:	f340 81fe 	ble.w	404cce <_svfprintf_r+0xdca>
  4048d2:	3701      	adds	r7, #1
  4048d4:	3401      	adds	r4, #1
  4048d6:	2301      	movs	r3, #1
  4048d8:	2f07      	cmp	r7, #7
  4048da:	9427      	str	r4, [sp, #156]	; 0x9c
  4048dc:	9726      	str	r7, [sp, #152]	; 0x98
  4048de:	f8c8 6000 	str.w	r6, [r8]
  4048e2:	f8c8 3004 	str.w	r3, [r8, #4]
  4048e6:	f300 8203 	bgt.w	404cf0 <_svfprintf_r+0xdec>
  4048ea:	f108 0808 	add.w	r8, r8, #8
  4048ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4048f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  4048f2:	f8c8 3000 	str.w	r3, [r8]
  4048f6:	3701      	adds	r7, #1
  4048f8:	4414      	add	r4, r2
  4048fa:	2f07      	cmp	r7, #7
  4048fc:	9427      	str	r4, [sp, #156]	; 0x9c
  4048fe:	9726      	str	r7, [sp, #152]	; 0x98
  404900:	f8c8 2004 	str.w	r2, [r8, #4]
  404904:	f300 8200 	bgt.w	404d08 <_svfprintf_r+0xe04>
  404908:	f108 0808 	add.w	r8, r8, #8
  40490c:	a814      	add	r0, sp, #80	; 0x50
  40490e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  404910:	f003 fd68 	bl	4083e4 <__aeabi_dcmpeq>
  404914:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404916:	2800      	cmp	r0, #0
  404918:	f040 8101 	bne.w	404b1e <_svfprintf_r+0xc1a>
  40491c:	3b01      	subs	r3, #1
  40491e:	3701      	adds	r7, #1
  404920:	3601      	adds	r6, #1
  404922:	441c      	add	r4, r3
  404924:	2f07      	cmp	r7, #7
  404926:	9726      	str	r7, [sp, #152]	; 0x98
  404928:	9427      	str	r4, [sp, #156]	; 0x9c
  40492a:	f8c8 6000 	str.w	r6, [r8]
  40492e:	f8c8 3004 	str.w	r3, [r8, #4]
  404932:	f300 8128 	bgt.w	404b86 <_svfprintf_r+0xc82>
  404936:	f108 0808 	add.w	r8, r8, #8
  40493a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40493c:	f8c8 2004 	str.w	r2, [r8, #4]
  404940:	3701      	adds	r7, #1
  404942:	4414      	add	r4, r2
  404944:	ab21      	add	r3, sp, #132	; 0x84
  404946:	2f07      	cmp	r7, #7
  404948:	9427      	str	r4, [sp, #156]	; 0x9c
  40494a:	9726      	str	r7, [sp, #152]	; 0x98
  40494c:	f8c8 3000 	str.w	r3, [r8]
  404950:	f77f acb6 	ble.w	4042c0 <_svfprintf_r+0x3bc>
  404954:	aa25      	add	r2, sp, #148	; 0x94
  404956:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404958:	980c      	ldr	r0, [sp, #48]	; 0x30
  40495a:	f002 fcbf 	bl	4072dc <__ssprint_r>
  40495e:	2800      	cmp	r0, #0
  404960:	f47f aba2 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  404964:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404966:	46c8      	mov	r8, r9
  404968:	e4ac      	b.n	4042c4 <_svfprintf_r+0x3c0>
  40496a:	aa25      	add	r2, sp, #148	; 0x94
  40496c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40496e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404970:	f002 fcb4 	bl	4072dc <__ssprint_r>
  404974:	2800      	cmp	r0, #0
  404976:	f43f acee 	beq.w	404356 <_svfprintf_r+0x452>
  40497a:	f7ff bb95 	b.w	4040a8 <_svfprintf_r+0x1a4>
  40497e:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404982:	2b01      	cmp	r3, #1
  404984:	f000 8135 	beq.w	404bf2 <_svfprintf_r+0xcee>
  404988:	2b02      	cmp	r3, #2
  40498a:	d125      	bne.n	4049d8 <_svfprintf_r+0xad4>
  40498c:	f8cd b01c 	str.w	fp, [sp, #28]
  404990:	2400      	movs	r4, #0
  404992:	2500      	movs	r5, #0
  404994:	e621      	b.n	4045da <_svfprintf_r+0x6d6>
  404996:	aa25      	add	r2, sp, #148	; 0x94
  404998:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40499a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40499c:	f002 fc9e 	bl	4072dc <__ssprint_r>
  4049a0:	2800      	cmp	r0, #0
  4049a2:	f47f ab81 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  4049a6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4049a8:	46c8      	mov	r8, r9
  4049aa:	e478      	b.n	40429e <_svfprintf_r+0x39a>
  4049ac:	aa25      	add	r2, sp, #148	; 0x94
  4049ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4049b0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4049b2:	f002 fc93 	bl	4072dc <__ssprint_r>
  4049b6:	2800      	cmp	r0, #0
  4049b8:	f47f ab76 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  4049bc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4049be:	46c8      	mov	r8, r9
  4049c0:	e41e      	b.n	404200 <_svfprintf_r+0x2fc>
  4049c2:	aa25      	add	r2, sp, #148	; 0x94
  4049c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4049c6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4049c8:	f002 fc88 	bl	4072dc <__ssprint_r>
  4049cc:	2800      	cmp	r0, #0
  4049ce:	f47f ab6b 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  4049d2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4049d4:	46c8      	mov	r8, r9
  4049d6:	e423      	b.n	404220 <_svfprintf_r+0x31c>
  4049d8:	f8cd b01c 	str.w	fp, [sp, #28]
  4049dc:	2400      	movs	r4, #0
  4049de:	2500      	movs	r5, #0
  4049e0:	4649      	mov	r1, r9
  4049e2:	e000      	b.n	4049e6 <_svfprintf_r+0xae2>
  4049e4:	4631      	mov	r1, r6
  4049e6:	08e2      	lsrs	r2, r4, #3
  4049e8:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4049ec:	08e8      	lsrs	r0, r5, #3
  4049ee:	f004 0307 	and.w	r3, r4, #7
  4049f2:	4605      	mov	r5, r0
  4049f4:	4614      	mov	r4, r2
  4049f6:	3330      	adds	r3, #48	; 0x30
  4049f8:	ea54 0205 	orrs.w	r2, r4, r5
  4049fc:	f801 3c01 	strb.w	r3, [r1, #-1]
  404a00:	f101 36ff 	add.w	r6, r1, #4294967295
  404a04:	d1ee      	bne.n	4049e4 <_svfprintf_r+0xae0>
  404a06:	9a07      	ldr	r2, [sp, #28]
  404a08:	07d2      	lsls	r2, r2, #31
  404a0a:	f57f adf6 	bpl.w	4045fa <_svfprintf_r+0x6f6>
  404a0e:	2b30      	cmp	r3, #48	; 0x30
  404a10:	f43f adf3 	beq.w	4045fa <_svfprintf_r+0x6f6>
  404a14:	3902      	subs	r1, #2
  404a16:	2330      	movs	r3, #48	; 0x30
  404a18:	f806 3c01 	strb.w	r3, [r6, #-1]
  404a1c:	eba9 0301 	sub.w	r3, r9, r1
  404a20:	930e      	str	r3, [sp, #56]	; 0x38
  404a22:	460e      	mov	r6, r1
  404a24:	f7ff bb7e 	b.w	404124 <_svfprintf_r+0x220>
  404a28:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404a2a:	2900      	cmp	r1, #0
  404a2c:	f340 822f 	ble.w	404e8e <_svfprintf_r+0xf8a>
  404a30:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404a32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404a34:	4293      	cmp	r3, r2
  404a36:	bfa8      	it	ge
  404a38:	4613      	movge	r3, r2
  404a3a:	2b00      	cmp	r3, #0
  404a3c:	461f      	mov	r7, r3
  404a3e:	dd0d      	ble.n	404a5c <_svfprintf_r+0xb58>
  404a40:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a42:	f8c8 6000 	str.w	r6, [r8]
  404a46:	3301      	adds	r3, #1
  404a48:	443c      	add	r4, r7
  404a4a:	2b07      	cmp	r3, #7
  404a4c:	9427      	str	r4, [sp, #156]	; 0x9c
  404a4e:	f8c8 7004 	str.w	r7, [r8, #4]
  404a52:	9326      	str	r3, [sp, #152]	; 0x98
  404a54:	f300 8320 	bgt.w	405098 <_svfprintf_r+0x1194>
  404a58:	f108 0808 	add.w	r8, r8, #8
  404a5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404a5e:	2f00      	cmp	r7, #0
  404a60:	bfa8      	it	ge
  404a62:	1bdb      	subge	r3, r3, r7
  404a64:	2b00      	cmp	r3, #0
  404a66:	461f      	mov	r7, r3
  404a68:	f340 80d7 	ble.w	404c1a <_svfprintf_r+0xd16>
  404a6c:	2f10      	cmp	r7, #16
  404a6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a70:	4d31      	ldr	r5, [pc, #196]	; (404b38 <_svfprintf_r+0xc34>)
  404a72:	f340 81ee 	ble.w	404e52 <_svfprintf_r+0xf4e>
  404a76:	4642      	mov	r2, r8
  404a78:	4621      	mov	r1, r4
  404a7a:	46b0      	mov	r8, r6
  404a7c:	f04f 0b10 	mov.w	fp, #16
  404a80:	462e      	mov	r6, r5
  404a82:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404a84:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404a86:	e004      	b.n	404a92 <_svfprintf_r+0xb8e>
  404a88:	3208      	adds	r2, #8
  404a8a:	3f10      	subs	r7, #16
  404a8c:	2f10      	cmp	r7, #16
  404a8e:	f340 81dc 	ble.w	404e4a <_svfprintf_r+0xf46>
  404a92:	3301      	adds	r3, #1
  404a94:	3110      	adds	r1, #16
  404a96:	2b07      	cmp	r3, #7
  404a98:	9127      	str	r1, [sp, #156]	; 0x9c
  404a9a:	9326      	str	r3, [sp, #152]	; 0x98
  404a9c:	e882 0840 	stmia.w	r2, {r6, fp}
  404aa0:	ddf2      	ble.n	404a88 <_svfprintf_r+0xb84>
  404aa2:	aa25      	add	r2, sp, #148	; 0x94
  404aa4:	4629      	mov	r1, r5
  404aa6:	4620      	mov	r0, r4
  404aa8:	f002 fc18 	bl	4072dc <__ssprint_r>
  404aac:	2800      	cmp	r0, #0
  404aae:	f47f aafb 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  404ab2:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404ab4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ab6:	464a      	mov	r2, r9
  404ab8:	e7e7      	b.n	404a8a <_svfprintf_r+0xb86>
  404aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404abc:	930e      	str	r3, [sp, #56]	; 0x38
  404abe:	464e      	mov	r6, r9
  404ac0:	f7ff bb30 	b.w	404124 <_svfprintf_r+0x220>
  404ac4:	2d00      	cmp	r5, #0
  404ac6:	bf08      	it	eq
  404ac8:	2c0a      	cmpeq	r4, #10
  404aca:	f0c0 8090 	bcc.w	404bee <_svfprintf_r+0xcea>
  404ace:	464e      	mov	r6, r9
  404ad0:	4620      	mov	r0, r4
  404ad2:	4629      	mov	r1, r5
  404ad4:	220a      	movs	r2, #10
  404ad6:	2300      	movs	r3, #0
  404ad8:	f7fe fd8c 	bl	4035f4 <__aeabi_uldivmod>
  404adc:	3230      	adds	r2, #48	; 0x30
  404ade:	f806 2d01 	strb.w	r2, [r6, #-1]!
  404ae2:	4620      	mov	r0, r4
  404ae4:	4629      	mov	r1, r5
  404ae6:	2300      	movs	r3, #0
  404ae8:	220a      	movs	r2, #10
  404aea:	f7fe fd83 	bl	4035f4 <__aeabi_uldivmod>
  404aee:	4604      	mov	r4, r0
  404af0:	460d      	mov	r5, r1
  404af2:	ea54 0305 	orrs.w	r3, r4, r5
  404af6:	d1eb      	bne.n	404ad0 <_svfprintf_r+0xbcc>
  404af8:	eba9 0306 	sub.w	r3, r9, r6
  404afc:	930e      	str	r3, [sp, #56]	; 0x38
  404afe:	f7ff bb11 	b.w	404124 <_svfprintf_r+0x220>
  404b02:	aa25      	add	r2, sp, #148	; 0x94
  404b04:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404b06:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b08:	f002 fbe8 	bl	4072dc <__ssprint_r>
  404b0c:	2800      	cmp	r0, #0
  404b0e:	f47f aacb 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  404b12:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404b16:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b18:	46c8      	mov	r8, r9
  404b1a:	f7ff bb61 	b.w	4041e0 <_svfprintf_r+0x2dc>
  404b1e:	1e5e      	subs	r6, r3, #1
  404b20:	2e00      	cmp	r6, #0
  404b22:	f77f af0a 	ble.w	40493a <_svfprintf_r+0xa36>
  404b26:	2e10      	cmp	r6, #16
  404b28:	4d03      	ldr	r5, [pc, #12]	; (404b38 <_svfprintf_r+0xc34>)
  404b2a:	dd23      	ble.n	404b74 <_svfprintf_r+0xc70>
  404b2c:	4622      	mov	r2, r4
  404b2e:	f04f 0b10 	mov.w	fp, #16
  404b32:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404b34:	e007      	b.n	404b46 <_svfprintf_r+0xc42>
  404b36:	bf00      	nop
  404b38:	004091ac 	.word	0x004091ac
  404b3c:	3e10      	subs	r6, #16
  404b3e:	2e10      	cmp	r6, #16
  404b40:	f108 0808 	add.w	r8, r8, #8
  404b44:	dd15      	ble.n	404b72 <_svfprintf_r+0xc6e>
  404b46:	3701      	adds	r7, #1
  404b48:	3210      	adds	r2, #16
  404b4a:	2f07      	cmp	r7, #7
  404b4c:	9227      	str	r2, [sp, #156]	; 0x9c
  404b4e:	9726      	str	r7, [sp, #152]	; 0x98
  404b50:	e888 0820 	stmia.w	r8, {r5, fp}
  404b54:	ddf2      	ble.n	404b3c <_svfprintf_r+0xc38>
  404b56:	aa25      	add	r2, sp, #148	; 0x94
  404b58:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404b5a:	4620      	mov	r0, r4
  404b5c:	f002 fbbe 	bl	4072dc <__ssprint_r>
  404b60:	2800      	cmp	r0, #0
  404b62:	f47f aaa1 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  404b66:	3e10      	subs	r6, #16
  404b68:	2e10      	cmp	r6, #16
  404b6a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404b6c:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404b6e:	46c8      	mov	r8, r9
  404b70:	dce9      	bgt.n	404b46 <_svfprintf_r+0xc42>
  404b72:	4614      	mov	r4, r2
  404b74:	3701      	adds	r7, #1
  404b76:	4434      	add	r4, r6
  404b78:	2f07      	cmp	r7, #7
  404b7a:	9427      	str	r4, [sp, #156]	; 0x9c
  404b7c:	9726      	str	r7, [sp, #152]	; 0x98
  404b7e:	e888 0060 	stmia.w	r8, {r5, r6}
  404b82:	f77f aed8 	ble.w	404936 <_svfprintf_r+0xa32>
  404b86:	aa25      	add	r2, sp, #148	; 0x94
  404b88:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404b8a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b8c:	f002 fba6 	bl	4072dc <__ssprint_r>
  404b90:	2800      	cmp	r0, #0
  404b92:	f47f aa89 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  404b96:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b98:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404b9a:	46c8      	mov	r8, r9
  404b9c:	e6cd      	b.n	40493a <_svfprintf_r+0xa36>
  404b9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404ba0:	6814      	ldr	r4, [r2, #0]
  404ba2:	4613      	mov	r3, r2
  404ba4:	3304      	adds	r3, #4
  404ba6:	17e5      	asrs	r5, r4, #31
  404ba8:	930f      	str	r3, [sp, #60]	; 0x3c
  404baa:	4622      	mov	r2, r4
  404bac:	462b      	mov	r3, r5
  404bae:	e4fc      	b.n	4045aa <_svfprintf_r+0x6a6>
  404bb0:	3204      	adds	r2, #4
  404bb2:	681c      	ldr	r4, [r3, #0]
  404bb4:	920f      	str	r2, [sp, #60]	; 0x3c
  404bb6:	2301      	movs	r3, #1
  404bb8:	2500      	movs	r5, #0
  404bba:	f7ff ba96 	b.w	4040ea <_svfprintf_r+0x1e6>
  404bbe:	681c      	ldr	r4, [r3, #0]
  404bc0:	3304      	adds	r3, #4
  404bc2:	930f      	str	r3, [sp, #60]	; 0x3c
  404bc4:	2500      	movs	r5, #0
  404bc6:	e423      	b.n	404410 <_svfprintf_r+0x50c>
  404bc8:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404bca:	460a      	mov	r2, r1
  404bcc:	3204      	adds	r2, #4
  404bce:	680c      	ldr	r4, [r1, #0]
  404bd0:	920f      	str	r2, [sp, #60]	; 0x3c
  404bd2:	2500      	movs	r5, #0
  404bd4:	f7ff ba89 	b.w	4040ea <_svfprintf_r+0x1e6>
  404bd8:	4614      	mov	r4, r2
  404bda:	3301      	adds	r3, #1
  404bdc:	4434      	add	r4, r6
  404bde:	2b07      	cmp	r3, #7
  404be0:	9427      	str	r4, [sp, #156]	; 0x9c
  404be2:	9326      	str	r3, [sp, #152]	; 0x98
  404be4:	e888 0060 	stmia.w	r8, {r5, r6}
  404be8:	f77f ab6a 	ble.w	4042c0 <_svfprintf_r+0x3bc>
  404bec:	e6b2      	b.n	404954 <_svfprintf_r+0xa50>
  404bee:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404bf2:	f8cd b01c 	str.w	fp, [sp, #28]
  404bf6:	ae42      	add	r6, sp, #264	; 0x108
  404bf8:	3430      	adds	r4, #48	; 0x30
  404bfa:	2301      	movs	r3, #1
  404bfc:	f806 4d41 	strb.w	r4, [r6, #-65]!
  404c00:	930e      	str	r3, [sp, #56]	; 0x38
  404c02:	f7ff ba8f 	b.w	404124 <_svfprintf_r+0x220>
  404c06:	aa25      	add	r2, sp, #148	; 0x94
  404c08:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c0a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c0c:	f002 fb66 	bl	4072dc <__ssprint_r>
  404c10:	2800      	cmp	r0, #0
  404c12:	f47f aa49 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  404c16:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404c18:	46c8      	mov	r8, r9
  404c1a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404c1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404c1e:	429a      	cmp	r2, r3
  404c20:	db44      	blt.n	404cac <_svfprintf_r+0xda8>
  404c22:	9b07      	ldr	r3, [sp, #28]
  404c24:	07d9      	lsls	r1, r3, #31
  404c26:	d441      	bmi.n	404cac <_svfprintf_r+0xda8>
  404c28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404c2a:	9812      	ldr	r0, [sp, #72]	; 0x48
  404c2c:	1a9a      	subs	r2, r3, r2
  404c2e:	1a1d      	subs	r5, r3, r0
  404c30:	4295      	cmp	r5, r2
  404c32:	bfa8      	it	ge
  404c34:	4615      	movge	r5, r2
  404c36:	2d00      	cmp	r5, #0
  404c38:	dd0e      	ble.n	404c58 <_svfprintf_r+0xd54>
  404c3a:	9926      	ldr	r1, [sp, #152]	; 0x98
  404c3c:	f8c8 5004 	str.w	r5, [r8, #4]
  404c40:	3101      	adds	r1, #1
  404c42:	4406      	add	r6, r0
  404c44:	442c      	add	r4, r5
  404c46:	2907      	cmp	r1, #7
  404c48:	f8c8 6000 	str.w	r6, [r8]
  404c4c:	9427      	str	r4, [sp, #156]	; 0x9c
  404c4e:	9126      	str	r1, [sp, #152]	; 0x98
  404c50:	f300 823b 	bgt.w	4050ca <_svfprintf_r+0x11c6>
  404c54:	f108 0808 	add.w	r8, r8, #8
  404c58:	2d00      	cmp	r5, #0
  404c5a:	bfac      	ite	ge
  404c5c:	1b56      	subge	r6, r2, r5
  404c5e:	4616      	movlt	r6, r2
  404c60:	2e00      	cmp	r6, #0
  404c62:	f77f ab2f 	ble.w	4042c4 <_svfprintf_r+0x3c0>
  404c66:	2e10      	cmp	r6, #16
  404c68:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404c6a:	4db0      	ldr	r5, [pc, #704]	; (404f2c <_svfprintf_r+0x1028>)
  404c6c:	ddb5      	ble.n	404bda <_svfprintf_r+0xcd6>
  404c6e:	4622      	mov	r2, r4
  404c70:	2710      	movs	r7, #16
  404c72:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404c76:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404c78:	e004      	b.n	404c84 <_svfprintf_r+0xd80>
  404c7a:	f108 0808 	add.w	r8, r8, #8
  404c7e:	3e10      	subs	r6, #16
  404c80:	2e10      	cmp	r6, #16
  404c82:	dda9      	ble.n	404bd8 <_svfprintf_r+0xcd4>
  404c84:	3301      	adds	r3, #1
  404c86:	3210      	adds	r2, #16
  404c88:	2b07      	cmp	r3, #7
  404c8a:	9227      	str	r2, [sp, #156]	; 0x9c
  404c8c:	9326      	str	r3, [sp, #152]	; 0x98
  404c8e:	e888 00a0 	stmia.w	r8, {r5, r7}
  404c92:	ddf2      	ble.n	404c7a <_svfprintf_r+0xd76>
  404c94:	aa25      	add	r2, sp, #148	; 0x94
  404c96:	4621      	mov	r1, r4
  404c98:	4658      	mov	r0, fp
  404c9a:	f002 fb1f 	bl	4072dc <__ssprint_r>
  404c9e:	2800      	cmp	r0, #0
  404ca0:	f47f aa02 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  404ca4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404ca6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ca8:	46c8      	mov	r8, r9
  404caa:	e7e8      	b.n	404c7e <_svfprintf_r+0xd7a>
  404cac:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404cae:	9819      	ldr	r0, [sp, #100]	; 0x64
  404cb0:	991a      	ldr	r1, [sp, #104]	; 0x68
  404cb2:	f8c8 1000 	str.w	r1, [r8]
  404cb6:	3301      	adds	r3, #1
  404cb8:	4404      	add	r4, r0
  404cba:	2b07      	cmp	r3, #7
  404cbc:	9427      	str	r4, [sp, #156]	; 0x9c
  404cbe:	f8c8 0004 	str.w	r0, [r8, #4]
  404cc2:	9326      	str	r3, [sp, #152]	; 0x98
  404cc4:	f300 81f5 	bgt.w	4050b2 <_svfprintf_r+0x11ae>
  404cc8:	f108 0808 	add.w	r8, r8, #8
  404ccc:	e7ac      	b.n	404c28 <_svfprintf_r+0xd24>
  404cce:	9b07      	ldr	r3, [sp, #28]
  404cd0:	07da      	lsls	r2, r3, #31
  404cd2:	f53f adfe 	bmi.w	4048d2 <_svfprintf_r+0x9ce>
  404cd6:	3701      	adds	r7, #1
  404cd8:	3401      	adds	r4, #1
  404cda:	2301      	movs	r3, #1
  404cdc:	2f07      	cmp	r7, #7
  404cde:	9427      	str	r4, [sp, #156]	; 0x9c
  404ce0:	9726      	str	r7, [sp, #152]	; 0x98
  404ce2:	f8c8 6000 	str.w	r6, [r8]
  404ce6:	f8c8 3004 	str.w	r3, [r8, #4]
  404cea:	f77f ae24 	ble.w	404936 <_svfprintf_r+0xa32>
  404cee:	e74a      	b.n	404b86 <_svfprintf_r+0xc82>
  404cf0:	aa25      	add	r2, sp, #148	; 0x94
  404cf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404cf4:	980c      	ldr	r0, [sp, #48]	; 0x30
  404cf6:	f002 faf1 	bl	4072dc <__ssprint_r>
  404cfa:	2800      	cmp	r0, #0
  404cfc:	f47f a9d4 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  404d00:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d02:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404d04:	46c8      	mov	r8, r9
  404d06:	e5f2      	b.n	4048ee <_svfprintf_r+0x9ea>
  404d08:	aa25      	add	r2, sp, #148	; 0x94
  404d0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d0c:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d0e:	f002 fae5 	bl	4072dc <__ssprint_r>
  404d12:	2800      	cmp	r0, #0
  404d14:	f47f a9c8 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  404d18:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d1a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404d1c:	46c8      	mov	r8, r9
  404d1e:	e5f5      	b.n	40490c <_svfprintf_r+0xa08>
  404d20:	464e      	mov	r6, r9
  404d22:	f7ff b9ff 	b.w	404124 <_svfprintf_r+0x220>
  404d26:	aa25      	add	r2, sp, #148	; 0x94
  404d28:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d2a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d2c:	f002 fad6 	bl	4072dc <__ssprint_r>
  404d30:	2800      	cmp	r0, #0
  404d32:	f47f a9b9 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  404d36:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d38:	46c8      	mov	r8, r9
  404d3a:	f7ff ba74 	b.w	404226 <_svfprintf_r+0x322>
  404d3e:	9c14      	ldr	r4, [sp, #80]	; 0x50
  404d40:	4622      	mov	r2, r4
  404d42:	4620      	mov	r0, r4
  404d44:	9c15      	ldr	r4, [sp, #84]	; 0x54
  404d46:	4623      	mov	r3, r4
  404d48:	4621      	mov	r1, r4
  404d4a:	f003 fb7d 	bl	408448 <__aeabi_dcmpun>
  404d4e:	2800      	cmp	r0, #0
  404d50:	f040 8286 	bne.w	405260 <_svfprintf_r+0x135c>
  404d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404d56:	3301      	adds	r3, #1
  404d58:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d5a:	f023 0320 	bic.w	r3, r3, #32
  404d5e:	930e      	str	r3, [sp, #56]	; 0x38
  404d60:	f000 81e2 	beq.w	405128 <_svfprintf_r+0x1224>
  404d64:	2b47      	cmp	r3, #71	; 0x47
  404d66:	f000 811e 	beq.w	404fa6 <_svfprintf_r+0x10a2>
  404d6a:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  404d6e:	9307      	str	r3, [sp, #28]
  404d70:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404d72:	1e1f      	subs	r7, r3, #0
  404d74:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404d76:	9308      	str	r3, [sp, #32]
  404d78:	bfbb      	ittet	lt
  404d7a:	463b      	movlt	r3, r7
  404d7c:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  404d80:	2300      	movge	r3, #0
  404d82:	232d      	movlt	r3, #45	; 0x2d
  404d84:	9310      	str	r3, [sp, #64]	; 0x40
  404d86:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d88:	2b66      	cmp	r3, #102	; 0x66
  404d8a:	f000 81bb 	beq.w	405104 <_svfprintf_r+0x1200>
  404d8e:	2b46      	cmp	r3, #70	; 0x46
  404d90:	f000 80df 	beq.w	404f52 <_svfprintf_r+0x104e>
  404d94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404d96:	9a08      	ldr	r2, [sp, #32]
  404d98:	2b45      	cmp	r3, #69	; 0x45
  404d9a:	bf0c      	ite	eq
  404d9c:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  404d9e:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  404da0:	a823      	add	r0, sp, #140	; 0x8c
  404da2:	a920      	add	r1, sp, #128	; 0x80
  404da4:	bf08      	it	eq
  404da6:	1c5d      	addeq	r5, r3, #1
  404da8:	9004      	str	r0, [sp, #16]
  404daa:	9103      	str	r1, [sp, #12]
  404dac:	a81f      	add	r0, sp, #124	; 0x7c
  404dae:	2102      	movs	r1, #2
  404db0:	463b      	mov	r3, r7
  404db2:	9002      	str	r0, [sp, #8]
  404db4:	9501      	str	r5, [sp, #4]
  404db6:	9100      	str	r1, [sp, #0]
  404db8:	980c      	ldr	r0, [sp, #48]	; 0x30
  404dba:	f000 fb6d 	bl	405498 <_dtoa_r>
  404dbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404dc0:	2b67      	cmp	r3, #103	; 0x67
  404dc2:	4606      	mov	r6, r0
  404dc4:	f040 81e0 	bne.w	405188 <_svfprintf_r+0x1284>
  404dc8:	f01b 0f01 	tst.w	fp, #1
  404dcc:	f000 8246 	beq.w	40525c <_svfprintf_r+0x1358>
  404dd0:	1974      	adds	r4, r6, r5
  404dd2:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404dd4:	9808      	ldr	r0, [sp, #32]
  404dd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404dd8:	4639      	mov	r1, r7
  404dda:	f003 fb03 	bl	4083e4 <__aeabi_dcmpeq>
  404dde:	2800      	cmp	r0, #0
  404de0:	f040 8165 	bne.w	4050ae <_svfprintf_r+0x11aa>
  404de4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404de6:	42a3      	cmp	r3, r4
  404de8:	d206      	bcs.n	404df8 <_svfprintf_r+0xef4>
  404dea:	2130      	movs	r1, #48	; 0x30
  404dec:	1c5a      	adds	r2, r3, #1
  404dee:	9223      	str	r2, [sp, #140]	; 0x8c
  404df0:	7019      	strb	r1, [r3, #0]
  404df2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404df4:	429c      	cmp	r4, r3
  404df6:	d8f9      	bhi.n	404dec <_svfprintf_r+0xee8>
  404df8:	1b9b      	subs	r3, r3, r6
  404dfa:	9313      	str	r3, [sp, #76]	; 0x4c
  404dfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404dfe:	2b47      	cmp	r3, #71	; 0x47
  404e00:	f000 80e9 	beq.w	404fd6 <_svfprintf_r+0x10d2>
  404e04:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404e06:	2b65      	cmp	r3, #101	; 0x65
  404e08:	f340 81cd 	ble.w	4051a6 <_svfprintf_r+0x12a2>
  404e0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404e0e:	2b66      	cmp	r3, #102	; 0x66
  404e10:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404e12:	9312      	str	r3, [sp, #72]	; 0x48
  404e14:	f000 819e 	beq.w	405154 <_svfprintf_r+0x1250>
  404e18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404e1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404e1c:	4619      	mov	r1, r3
  404e1e:	4291      	cmp	r1, r2
  404e20:	f300 818a 	bgt.w	405138 <_svfprintf_r+0x1234>
  404e24:	f01b 0f01 	tst.w	fp, #1
  404e28:	f040 8213 	bne.w	405252 <_svfprintf_r+0x134e>
  404e2c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404e30:	9308      	str	r3, [sp, #32]
  404e32:	2367      	movs	r3, #103	; 0x67
  404e34:	920e      	str	r2, [sp, #56]	; 0x38
  404e36:	9311      	str	r3, [sp, #68]	; 0x44
  404e38:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404e3a:	2b00      	cmp	r3, #0
  404e3c:	f040 80c4 	bne.w	404fc8 <_svfprintf_r+0x10c4>
  404e40:	930a      	str	r3, [sp, #40]	; 0x28
  404e42:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404e46:	f7ff b975 	b.w	404134 <_svfprintf_r+0x230>
  404e4a:	4635      	mov	r5, r6
  404e4c:	460c      	mov	r4, r1
  404e4e:	4646      	mov	r6, r8
  404e50:	4690      	mov	r8, r2
  404e52:	3301      	adds	r3, #1
  404e54:	443c      	add	r4, r7
  404e56:	2b07      	cmp	r3, #7
  404e58:	9427      	str	r4, [sp, #156]	; 0x9c
  404e5a:	9326      	str	r3, [sp, #152]	; 0x98
  404e5c:	e888 00a0 	stmia.w	r8, {r5, r7}
  404e60:	f73f aed1 	bgt.w	404c06 <_svfprintf_r+0xd02>
  404e64:	f108 0808 	add.w	r8, r8, #8
  404e68:	e6d7      	b.n	404c1a <_svfprintf_r+0xd16>
  404e6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404e6c:	6813      	ldr	r3, [r2, #0]
  404e6e:	3204      	adds	r2, #4
  404e70:	920f      	str	r2, [sp, #60]	; 0x3c
  404e72:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404e74:	601a      	str	r2, [r3, #0]
  404e76:	f7ff b86c 	b.w	403f52 <_svfprintf_r+0x4e>
  404e7a:	aa25      	add	r2, sp, #148	; 0x94
  404e7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404e7e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e80:	f002 fa2c 	bl	4072dc <__ssprint_r>
  404e84:	2800      	cmp	r0, #0
  404e86:	f47f a90f 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  404e8a:	46c8      	mov	r8, r9
  404e8c:	e48d      	b.n	4047aa <_svfprintf_r+0x8a6>
  404e8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e90:	4a27      	ldr	r2, [pc, #156]	; (404f30 <_svfprintf_r+0x102c>)
  404e92:	f8c8 2000 	str.w	r2, [r8]
  404e96:	3301      	adds	r3, #1
  404e98:	3401      	adds	r4, #1
  404e9a:	2201      	movs	r2, #1
  404e9c:	2b07      	cmp	r3, #7
  404e9e:	9427      	str	r4, [sp, #156]	; 0x9c
  404ea0:	9326      	str	r3, [sp, #152]	; 0x98
  404ea2:	f8c8 2004 	str.w	r2, [r8, #4]
  404ea6:	dc72      	bgt.n	404f8e <_svfprintf_r+0x108a>
  404ea8:	f108 0808 	add.w	r8, r8, #8
  404eac:	b929      	cbnz	r1, 404eba <_svfprintf_r+0xfb6>
  404eae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404eb0:	b91b      	cbnz	r3, 404eba <_svfprintf_r+0xfb6>
  404eb2:	9b07      	ldr	r3, [sp, #28]
  404eb4:	07d8      	lsls	r0, r3, #31
  404eb6:	f57f aa05 	bpl.w	4042c4 <_svfprintf_r+0x3c0>
  404eba:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ebc:	9819      	ldr	r0, [sp, #100]	; 0x64
  404ebe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404ec0:	f8c8 2000 	str.w	r2, [r8]
  404ec4:	3301      	adds	r3, #1
  404ec6:	4602      	mov	r2, r0
  404ec8:	4422      	add	r2, r4
  404eca:	2b07      	cmp	r3, #7
  404ecc:	9227      	str	r2, [sp, #156]	; 0x9c
  404ece:	f8c8 0004 	str.w	r0, [r8, #4]
  404ed2:	9326      	str	r3, [sp, #152]	; 0x98
  404ed4:	f300 818d 	bgt.w	4051f2 <_svfprintf_r+0x12ee>
  404ed8:	f108 0808 	add.w	r8, r8, #8
  404edc:	2900      	cmp	r1, #0
  404ede:	f2c0 8165 	blt.w	4051ac <_svfprintf_r+0x12a8>
  404ee2:	9913      	ldr	r1, [sp, #76]	; 0x4c
  404ee4:	f8c8 6000 	str.w	r6, [r8]
  404ee8:	3301      	adds	r3, #1
  404eea:	188c      	adds	r4, r1, r2
  404eec:	2b07      	cmp	r3, #7
  404eee:	9427      	str	r4, [sp, #156]	; 0x9c
  404ef0:	9326      	str	r3, [sp, #152]	; 0x98
  404ef2:	f8c8 1004 	str.w	r1, [r8, #4]
  404ef6:	f77f a9e3 	ble.w	4042c0 <_svfprintf_r+0x3bc>
  404efa:	e52b      	b.n	404954 <_svfprintf_r+0xa50>
  404efc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404efe:	9909      	ldr	r1, [sp, #36]	; 0x24
  404f00:	6813      	ldr	r3, [r2, #0]
  404f02:	17cd      	asrs	r5, r1, #31
  404f04:	4608      	mov	r0, r1
  404f06:	3204      	adds	r2, #4
  404f08:	4629      	mov	r1, r5
  404f0a:	920f      	str	r2, [sp, #60]	; 0x3c
  404f0c:	e9c3 0100 	strd	r0, r1, [r3]
  404f10:	f7ff b81f 	b.w	403f52 <_svfprintf_r+0x4e>
  404f14:	aa25      	add	r2, sp, #148	; 0x94
  404f16:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f18:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f1a:	f002 f9df 	bl	4072dc <__ssprint_r>
  404f1e:	2800      	cmp	r0, #0
  404f20:	f47f a8c2 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  404f24:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404f26:	46c8      	mov	r8, r9
  404f28:	e458      	b.n	4047dc <_svfprintf_r+0x8d8>
  404f2a:	bf00      	nop
  404f2c:	004091ac 	.word	0x004091ac
  404f30:	00409198 	.word	0x00409198
  404f34:	2140      	movs	r1, #64	; 0x40
  404f36:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f38:	f001 fa00 	bl	40633c <_malloc_r>
  404f3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404f3e:	6010      	str	r0, [r2, #0]
  404f40:	6110      	str	r0, [r2, #16]
  404f42:	2800      	cmp	r0, #0
  404f44:	f000 81ec 	beq.w	405320 <_svfprintf_r+0x141c>
  404f48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404f4a:	2340      	movs	r3, #64	; 0x40
  404f4c:	6153      	str	r3, [r2, #20]
  404f4e:	f7fe bff0 	b.w	403f32 <_svfprintf_r+0x2e>
  404f52:	a823      	add	r0, sp, #140	; 0x8c
  404f54:	a920      	add	r1, sp, #128	; 0x80
  404f56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404f58:	9004      	str	r0, [sp, #16]
  404f5a:	9103      	str	r1, [sp, #12]
  404f5c:	a81f      	add	r0, sp, #124	; 0x7c
  404f5e:	2103      	movs	r1, #3
  404f60:	9002      	str	r0, [sp, #8]
  404f62:	9a08      	ldr	r2, [sp, #32]
  404f64:	9401      	str	r4, [sp, #4]
  404f66:	463b      	mov	r3, r7
  404f68:	9100      	str	r1, [sp, #0]
  404f6a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f6c:	f000 fa94 	bl	405498 <_dtoa_r>
  404f70:	4625      	mov	r5, r4
  404f72:	4606      	mov	r6, r0
  404f74:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404f76:	2b46      	cmp	r3, #70	; 0x46
  404f78:	eb06 0405 	add.w	r4, r6, r5
  404f7c:	f47f af29 	bne.w	404dd2 <_svfprintf_r+0xece>
  404f80:	7833      	ldrb	r3, [r6, #0]
  404f82:	2b30      	cmp	r3, #48	; 0x30
  404f84:	f000 8172 	beq.w	40526c <_svfprintf_r+0x1368>
  404f88:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  404f8a:	442c      	add	r4, r5
  404f8c:	e721      	b.n	404dd2 <_svfprintf_r+0xece>
  404f8e:	aa25      	add	r2, sp, #148	; 0x94
  404f90:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f92:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f94:	f002 f9a2 	bl	4072dc <__ssprint_r>
  404f98:	2800      	cmp	r0, #0
  404f9a:	f47f a885 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  404f9e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404fa0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404fa2:	46c8      	mov	r8, r9
  404fa4:	e782      	b.n	404eac <_svfprintf_r+0xfa8>
  404fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404fa8:	2b00      	cmp	r3, #0
  404faa:	bf08      	it	eq
  404fac:	2301      	moveq	r3, #1
  404fae:	930a      	str	r3, [sp, #40]	; 0x28
  404fb0:	e6db      	b.n	404d6a <_svfprintf_r+0xe66>
  404fb2:	4630      	mov	r0, r6
  404fb4:	940a      	str	r4, [sp, #40]	; 0x28
  404fb6:	f002 f923 	bl	407200 <strlen>
  404fba:	950f      	str	r5, [sp, #60]	; 0x3c
  404fbc:	900e      	str	r0, [sp, #56]	; 0x38
  404fbe:	f8cd b01c 	str.w	fp, [sp, #28]
  404fc2:	4603      	mov	r3, r0
  404fc4:	f7ff b9fb 	b.w	4043be <_svfprintf_r+0x4ba>
  404fc8:	272d      	movs	r7, #45	; 0x2d
  404fca:	2300      	movs	r3, #0
  404fcc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404fd0:	930a      	str	r3, [sp, #40]	; 0x28
  404fd2:	f7ff b8b0 	b.w	404136 <_svfprintf_r+0x232>
  404fd6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404fd8:	9312      	str	r3, [sp, #72]	; 0x48
  404fda:	461a      	mov	r2, r3
  404fdc:	3303      	adds	r3, #3
  404fde:	db04      	blt.n	404fea <_svfprintf_r+0x10e6>
  404fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404fe2:	4619      	mov	r1, r3
  404fe4:	4291      	cmp	r1, r2
  404fe6:	f6bf af17 	bge.w	404e18 <_svfprintf_r+0xf14>
  404fea:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404fec:	3b02      	subs	r3, #2
  404fee:	9311      	str	r3, [sp, #68]	; 0x44
  404ff0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  404ff4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  404ff8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404ffa:	3b01      	subs	r3, #1
  404ffc:	2b00      	cmp	r3, #0
  404ffe:	931f      	str	r3, [sp, #124]	; 0x7c
  405000:	bfbd      	ittte	lt
  405002:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  405004:	f1c3 0301 	rsblt	r3, r3, #1
  405008:	222d      	movlt	r2, #45	; 0x2d
  40500a:	222b      	movge	r2, #43	; 0x2b
  40500c:	2b09      	cmp	r3, #9
  40500e:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  405012:	f340 8116 	ble.w	405242 <_svfprintf_r+0x133e>
  405016:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  40501a:	4620      	mov	r0, r4
  40501c:	4dad      	ldr	r5, [pc, #692]	; (4052d4 <_svfprintf_r+0x13d0>)
  40501e:	e000      	b.n	405022 <_svfprintf_r+0x111e>
  405020:	4610      	mov	r0, r2
  405022:	fb85 1203 	smull	r1, r2, r5, r3
  405026:	17d9      	asrs	r1, r3, #31
  405028:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  40502c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  405030:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  405034:	3230      	adds	r2, #48	; 0x30
  405036:	2909      	cmp	r1, #9
  405038:	f800 2c01 	strb.w	r2, [r0, #-1]
  40503c:	460b      	mov	r3, r1
  40503e:	f100 32ff 	add.w	r2, r0, #4294967295
  405042:	dced      	bgt.n	405020 <_svfprintf_r+0x111c>
  405044:	3330      	adds	r3, #48	; 0x30
  405046:	3802      	subs	r0, #2
  405048:	b2d9      	uxtb	r1, r3
  40504a:	4284      	cmp	r4, r0
  40504c:	f802 1c01 	strb.w	r1, [r2, #-1]
  405050:	f240 815f 	bls.w	405312 <_svfprintf_r+0x140e>
  405054:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  405058:	4613      	mov	r3, r2
  40505a:	e001      	b.n	405060 <_svfprintf_r+0x115c>
  40505c:	f813 1b01 	ldrb.w	r1, [r3], #1
  405060:	f800 1b01 	strb.w	r1, [r0], #1
  405064:	42a3      	cmp	r3, r4
  405066:	d1f9      	bne.n	40505c <_svfprintf_r+0x1158>
  405068:	3301      	adds	r3, #1
  40506a:	1a9b      	subs	r3, r3, r2
  40506c:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  405070:	4413      	add	r3, r2
  405072:	aa21      	add	r2, sp, #132	; 0x84
  405074:	1a9b      	subs	r3, r3, r2
  405076:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405078:	931b      	str	r3, [sp, #108]	; 0x6c
  40507a:	2a01      	cmp	r2, #1
  40507c:	4413      	add	r3, r2
  40507e:	930e      	str	r3, [sp, #56]	; 0x38
  405080:	f340 8113 	ble.w	4052aa <_svfprintf_r+0x13a6>
  405084:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405086:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405088:	4413      	add	r3, r2
  40508a:	930e      	str	r3, [sp, #56]	; 0x38
  40508c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405090:	9308      	str	r3, [sp, #32]
  405092:	2300      	movs	r3, #0
  405094:	9312      	str	r3, [sp, #72]	; 0x48
  405096:	e6cf      	b.n	404e38 <_svfprintf_r+0xf34>
  405098:	aa25      	add	r2, sp, #148	; 0x94
  40509a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40509c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40509e:	f002 f91d 	bl	4072dc <__ssprint_r>
  4050a2:	2800      	cmp	r0, #0
  4050a4:	f47f a800 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  4050a8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4050aa:	46c8      	mov	r8, r9
  4050ac:	e4d6      	b.n	404a5c <_svfprintf_r+0xb58>
  4050ae:	4623      	mov	r3, r4
  4050b0:	e6a2      	b.n	404df8 <_svfprintf_r+0xef4>
  4050b2:	aa25      	add	r2, sp, #148	; 0x94
  4050b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4050b6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4050b8:	f002 f910 	bl	4072dc <__ssprint_r>
  4050bc:	2800      	cmp	r0, #0
  4050be:	f47e aff3 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  4050c2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4050c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4050c6:	46c8      	mov	r8, r9
  4050c8:	e5ae      	b.n	404c28 <_svfprintf_r+0xd24>
  4050ca:	aa25      	add	r2, sp, #148	; 0x94
  4050cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4050ce:	980c      	ldr	r0, [sp, #48]	; 0x30
  4050d0:	f002 f904 	bl	4072dc <__ssprint_r>
  4050d4:	2800      	cmp	r0, #0
  4050d6:	f47e afe7 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  4050da:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4050dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4050de:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4050e0:	1a9a      	subs	r2, r3, r2
  4050e2:	46c8      	mov	r8, r9
  4050e4:	e5b8      	b.n	404c58 <_svfprintf_r+0xd54>
  4050e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4050e8:	9612      	str	r6, [sp, #72]	; 0x48
  4050ea:	2b06      	cmp	r3, #6
  4050ec:	bf28      	it	cs
  4050ee:	2306      	movcs	r3, #6
  4050f0:	960a      	str	r6, [sp, #40]	; 0x28
  4050f2:	4637      	mov	r7, r6
  4050f4:	9308      	str	r3, [sp, #32]
  4050f6:	950f      	str	r5, [sp, #60]	; 0x3c
  4050f8:	f8cd b01c 	str.w	fp, [sp, #28]
  4050fc:	930e      	str	r3, [sp, #56]	; 0x38
  4050fe:	4e76      	ldr	r6, [pc, #472]	; (4052d8 <_svfprintf_r+0x13d4>)
  405100:	f7ff b818 	b.w	404134 <_svfprintf_r+0x230>
  405104:	a823      	add	r0, sp, #140	; 0x8c
  405106:	a920      	add	r1, sp, #128	; 0x80
  405108:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40510a:	9004      	str	r0, [sp, #16]
  40510c:	9103      	str	r1, [sp, #12]
  40510e:	a81f      	add	r0, sp, #124	; 0x7c
  405110:	2103      	movs	r1, #3
  405112:	9002      	str	r0, [sp, #8]
  405114:	9a08      	ldr	r2, [sp, #32]
  405116:	9501      	str	r5, [sp, #4]
  405118:	463b      	mov	r3, r7
  40511a:	9100      	str	r1, [sp, #0]
  40511c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40511e:	f000 f9bb 	bl	405498 <_dtoa_r>
  405122:	4606      	mov	r6, r0
  405124:	1944      	adds	r4, r0, r5
  405126:	e72b      	b.n	404f80 <_svfprintf_r+0x107c>
  405128:	2306      	movs	r3, #6
  40512a:	930a      	str	r3, [sp, #40]	; 0x28
  40512c:	e61d      	b.n	404d6a <_svfprintf_r+0xe66>
  40512e:	272d      	movs	r7, #45	; 0x2d
  405130:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405134:	f7ff bace 	b.w	4046d4 <_svfprintf_r+0x7d0>
  405138:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40513a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40513c:	4413      	add	r3, r2
  40513e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405140:	930e      	str	r3, [sp, #56]	; 0x38
  405142:	2a00      	cmp	r2, #0
  405144:	f340 80aa 	ble.w	40529c <_svfprintf_r+0x1398>
  405148:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40514c:	9308      	str	r3, [sp, #32]
  40514e:	2367      	movs	r3, #103	; 0x67
  405150:	9311      	str	r3, [sp, #68]	; 0x44
  405152:	e671      	b.n	404e38 <_svfprintf_r+0xf34>
  405154:	2b00      	cmp	r3, #0
  405156:	f340 80b2 	ble.w	4052be <_svfprintf_r+0x13ba>
  40515a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40515c:	2a00      	cmp	r2, #0
  40515e:	f040 8093 	bne.w	405288 <_svfprintf_r+0x1384>
  405162:	f01b 0f01 	tst.w	fp, #1
  405166:	f040 808f 	bne.w	405288 <_svfprintf_r+0x1384>
  40516a:	9308      	str	r3, [sp, #32]
  40516c:	930e      	str	r3, [sp, #56]	; 0x38
  40516e:	e663      	b.n	404e38 <_svfprintf_r+0xf34>
  405170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405172:	9308      	str	r3, [sp, #32]
  405174:	930e      	str	r3, [sp, #56]	; 0x38
  405176:	900a      	str	r0, [sp, #40]	; 0x28
  405178:	950f      	str	r5, [sp, #60]	; 0x3c
  40517a:	f8cd b01c 	str.w	fp, [sp, #28]
  40517e:	9012      	str	r0, [sp, #72]	; 0x48
  405180:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405184:	f7fe bfd6 	b.w	404134 <_svfprintf_r+0x230>
  405188:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40518a:	2b47      	cmp	r3, #71	; 0x47
  40518c:	f47f ae20 	bne.w	404dd0 <_svfprintf_r+0xecc>
  405190:	f01b 0f01 	tst.w	fp, #1
  405194:	f47f aeee 	bne.w	404f74 <_svfprintf_r+0x1070>
  405198:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40519a:	1b9b      	subs	r3, r3, r6
  40519c:	9313      	str	r3, [sp, #76]	; 0x4c
  40519e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4051a0:	2b47      	cmp	r3, #71	; 0x47
  4051a2:	f43f af18 	beq.w	404fd6 <_svfprintf_r+0x10d2>
  4051a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4051a8:	9312      	str	r3, [sp, #72]	; 0x48
  4051aa:	e721      	b.n	404ff0 <_svfprintf_r+0x10ec>
  4051ac:	424f      	negs	r7, r1
  4051ae:	3110      	adds	r1, #16
  4051b0:	4d4a      	ldr	r5, [pc, #296]	; (4052dc <_svfprintf_r+0x13d8>)
  4051b2:	da2f      	bge.n	405214 <_svfprintf_r+0x1310>
  4051b4:	2410      	movs	r4, #16
  4051b6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4051ba:	e004      	b.n	4051c6 <_svfprintf_r+0x12c2>
  4051bc:	f108 0808 	add.w	r8, r8, #8
  4051c0:	3f10      	subs	r7, #16
  4051c2:	2f10      	cmp	r7, #16
  4051c4:	dd26      	ble.n	405214 <_svfprintf_r+0x1310>
  4051c6:	3301      	adds	r3, #1
  4051c8:	3210      	adds	r2, #16
  4051ca:	2b07      	cmp	r3, #7
  4051cc:	9227      	str	r2, [sp, #156]	; 0x9c
  4051ce:	9326      	str	r3, [sp, #152]	; 0x98
  4051d0:	f8c8 5000 	str.w	r5, [r8]
  4051d4:	f8c8 4004 	str.w	r4, [r8, #4]
  4051d8:	ddf0      	ble.n	4051bc <_svfprintf_r+0x12b8>
  4051da:	aa25      	add	r2, sp, #148	; 0x94
  4051dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4051de:	4658      	mov	r0, fp
  4051e0:	f002 f87c 	bl	4072dc <__ssprint_r>
  4051e4:	2800      	cmp	r0, #0
  4051e6:	f47e af5f 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  4051ea:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4051ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4051ee:	46c8      	mov	r8, r9
  4051f0:	e7e6      	b.n	4051c0 <_svfprintf_r+0x12bc>
  4051f2:	aa25      	add	r2, sp, #148	; 0x94
  4051f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4051f6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4051f8:	f002 f870 	bl	4072dc <__ssprint_r>
  4051fc:	2800      	cmp	r0, #0
  4051fe:	f47e af53 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  405202:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405204:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405206:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405208:	46c8      	mov	r8, r9
  40520a:	e667      	b.n	404edc <_svfprintf_r+0xfd8>
  40520c:	2000      	movs	r0, #0
  40520e:	900a      	str	r0, [sp, #40]	; 0x28
  405210:	f7fe bed2 	b.w	403fb8 <_svfprintf_r+0xb4>
  405214:	3301      	adds	r3, #1
  405216:	443a      	add	r2, r7
  405218:	2b07      	cmp	r3, #7
  40521a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40521e:	9227      	str	r2, [sp, #156]	; 0x9c
  405220:	9326      	str	r3, [sp, #152]	; 0x98
  405222:	f108 0808 	add.w	r8, r8, #8
  405226:	f77f ae5c 	ble.w	404ee2 <_svfprintf_r+0xfde>
  40522a:	aa25      	add	r2, sp, #148	; 0x94
  40522c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40522e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405230:	f002 f854 	bl	4072dc <__ssprint_r>
  405234:	2800      	cmp	r0, #0
  405236:	f47e af37 	bne.w	4040a8 <_svfprintf_r+0x1a4>
  40523a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40523c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40523e:	46c8      	mov	r8, r9
  405240:	e64f      	b.n	404ee2 <_svfprintf_r+0xfde>
  405242:	3330      	adds	r3, #48	; 0x30
  405244:	2230      	movs	r2, #48	; 0x30
  405246:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  40524a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  40524e:	ab22      	add	r3, sp, #136	; 0x88
  405250:	e70f      	b.n	405072 <_svfprintf_r+0x116e>
  405252:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405254:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405256:	4413      	add	r3, r2
  405258:	930e      	str	r3, [sp, #56]	; 0x38
  40525a:	e775      	b.n	405148 <_svfprintf_r+0x1244>
  40525c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40525e:	e5cb      	b.n	404df8 <_svfprintf_r+0xef4>
  405260:	4e1f      	ldr	r6, [pc, #124]	; (4052e0 <_svfprintf_r+0x13dc>)
  405262:	4b20      	ldr	r3, [pc, #128]	; (4052e4 <_svfprintf_r+0x13e0>)
  405264:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405268:	f7ff ba36 	b.w	4046d8 <_svfprintf_r+0x7d4>
  40526c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40526e:	9808      	ldr	r0, [sp, #32]
  405270:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405272:	4639      	mov	r1, r7
  405274:	f003 f8b6 	bl	4083e4 <__aeabi_dcmpeq>
  405278:	2800      	cmp	r0, #0
  40527a:	f47f ae85 	bne.w	404f88 <_svfprintf_r+0x1084>
  40527e:	f1c5 0501 	rsb	r5, r5, #1
  405282:	951f      	str	r5, [sp, #124]	; 0x7c
  405284:	442c      	add	r4, r5
  405286:	e5a4      	b.n	404dd2 <_svfprintf_r+0xece>
  405288:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40528a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40528c:	4413      	add	r3, r2
  40528e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405290:	441a      	add	r2, r3
  405292:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405296:	920e      	str	r2, [sp, #56]	; 0x38
  405298:	9308      	str	r3, [sp, #32]
  40529a:	e5cd      	b.n	404e38 <_svfprintf_r+0xf34>
  40529c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40529e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4052a0:	f1c3 0301 	rsb	r3, r3, #1
  4052a4:	441a      	add	r2, r3
  4052a6:	4613      	mov	r3, r2
  4052a8:	e7d6      	b.n	405258 <_svfprintf_r+0x1354>
  4052aa:	f01b 0301 	ands.w	r3, fp, #1
  4052ae:	9312      	str	r3, [sp, #72]	; 0x48
  4052b0:	f47f aee8 	bne.w	405084 <_svfprintf_r+0x1180>
  4052b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4052b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4052ba:	9308      	str	r3, [sp, #32]
  4052bc:	e5bc      	b.n	404e38 <_svfprintf_r+0xf34>
  4052be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4052c0:	b913      	cbnz	r3, 4052c8 <_svfprintf_r+0x13c4>
  4052c2:	f01b 0f01 	tst.w	fp, #1
  4052c6:	d002      	beq.n	4052ce <_svfprintf_r+0x13ca>
  4052c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4052ca:	3301      	adds	r3, #1
  4052cc:	e7df      	b.n	40528e <_svfprintf_r+0x138a>
  4052ce:	2301      	movs	r3, #1
  4052d0:	e74b      	b.n	40516a <_svfprintf_r+0x1266>
  4052d2:	bf00      	nop
  4052d4:	66666667 	.word	0x66666667
  4052d8:	00409190 	.word	0x00409190
  4052dc:	004091ac 	.word	0x004091ac
  4052e0:	00409164 	.word	0x00409164
  4052e4:	00409160 	.word	0x00409160
  4052e8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4052ea:	f89a 3001 	ldrb.w	r3, [sl, #1]
  4052ee:	6828      	ldr	r0, [r5, #0]
  4052f0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  4052f4:	900a      	str	r0, [sp, #40]	; 0x28
  4052f6:	4628      	mov	r0, r5
  4052f8:	3004      	adds	r0, #4
  4052fa:	46a2      	mov	sl, r4
  4052fc:	900f      	str	r0, [sp, #60]	; 0x3c
  4052fe:	f7fe be59 	b.w	403fb4 <_svfprintf_r+0xb0>
  405302:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405306:	f7ff b86f 	b.w	4043e8 <_svfprintf_r+0x4e4>
  40530a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40530e:	f7ff ba1c 	b.w	40474a <_svfprintf_r+0x846>
  405312:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  405316:	e6ac      	b.n	405072 <_svfprintf_r+0x116e>
  405318:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40531c:	f7ff b8f3 	b.w	404506 <_svfprintf_r+0x602>
  405320:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405322:	230c      	movs	r3, #12
  405324:	6013      	str	r3, [r2, #0]
  405326:	f04f 33ff 	mov.w	r3, #4294967295
  40532a:	9309      	str	r3, [sp, #36]	; 0x24
  40532c:	f7fe bec5 	b.w	4040ba <_svfprintf_r+0x1b6>
  405330:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405334:	f7ff b9a2 	b.w	40467c <_svfprintf_r+0x778>
  405338:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40533c:	f7ff b97e 	b.w	40463c <_svfprintf_r+0x738>
  405340:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405344:	f7ff b961 	b.w	40460a <_svfprintf_r+0x706>
  405348:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40534c:	f7ff b91a 	b.w	404584 <_svfprintf_r+0x680>

00405350 <register_fini>:
  405350:	4b02      	ldr	r3, [pc, #8]	; (40535c <register_fini+0xc>)
  405352:	b113      	cbz	r3, 40535a <register_fini+0xa>
  405354:	4802      	ldr	r0, [pc, #8]	; (405360 <register_fini+0x10>)
  405356:	f000 b805 	b.w	405364 <atexit>
  40535a:	4770      	bx	lr
  40535c:	00000000 	.word	0x00000000
  405360:	004062ed 	.word	0x004062ed

00405364 <atexit>:
  405364:	2300      	movs	r3, #0
  405366:	4601      	mov	r1, r0
  405368:	461a      	mov	r2, r3
  40536a:	4618      	mov	r0, r3
  40536c:	f002 b834 	b.w	4073d8 <__register_exitproc>

00405370 <quorem>:
  405370:	6902      	ldr	r2, [r0, #16]
  405372:	690b      	ldr	r3, [r1, #16]
  405374:	4293      	cmp	r3, r2
  405376:	f300 808d 	bgt.w	405494 <quorem+0x124>
  40537a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40537e:	f103 38ff 	add.w	r8, r3, #4294967295
  405382:	f101 0714 	add.w	r7, r1, #20
  405386:	f100 0b14 	add.w	fp, r0, #20
  40538a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40538e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  405392:	ea4f 0488 	mov.w	r4, r8, lsl #2
  405396:	b083      	sub	sp, #12
  405398:	3201      	adds	r2, #1
  40539a:	fbb3 f9f2 	udiv	r9, r3, r2
  40539e:	eb0b 0304 	add.w	r3, fp, r4
  4053a2:	9400      	str	r4, [sp, #0]
  4053a4:	eb07 0a04 	add.w	sl, r7, r4
  4053a8:	9301      	str	r3, [sp, #4]
  4053aa:	f1b9 0f00 	cmp.w	r9, #0
  4053ae:	d039      	beq.n	405424 <quorem+0xb4>
  4053b0:	2500      	movs	r5, #0
  4053b2:	462e      	mov	r6, r5
  4053b4:	46bc      	mov	ip, r7
  4053b6:	46de      	mov	lr, fp
  4053b8:	f85c 4b04 	ldr.w	r4, [ip], #4
  4053bc:	f8de 3000 	ldr.w	r3, [lr]
  4053c0:	b2a2      	uxth	r2, r4
  4053c2:	fb09 5502 	mla	r5, r9, r2, r5
  4053c6:	0c22      	lsrs	r2, r4, #16
  4053c8:	0c2c      	lsrs	r4, r5, #16
  4053ca:	fb09 4202 	mla	r2, r9, r2, r4
  4053ce:	b2ad      	uxth	r5, r5
  4053d0:	1b75      	subs	r5, r6, r5
  4053d2:	b296      	uxth	r6, r2
  4053d4:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4053d8:	fa15 f383 	uxtah	r3, r5, r3
  4053dc:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4053e0:	b29b      	uxth	r3, r3
  4053e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4053e6:	45e2      	cmp	sl, ip
  4053e8:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4053ec:	f84e 3b04 	str.w	r3, [lr], #4
  4053f0:	ea4f 4626 	mov.w	r6, r6, asr #16
  4053f4:	d2e0      	bcs.n	4053b8 <quorem+0x48>
  4053f6:	9b00      	ldr	r3, [sp, #0]
  4053f8:	f85b 3003 	ldr.w	r3, [fp, r3]
  4053fc:	b993      	cbnz	r3, 405424 <quorem+0xb4>
  4053fe:	9c01      	ldr	r4, [sp, #4]
  405400:	1f23      	subs	r3, r4, #4
  405402:	459b      	cmp	fp, r3
  405404:	d20c      	bcs.n	405420 <quorem+0xb0>
  405406:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40540a:	b94b      	cbnz	r3, 405420 <quorem+0xb0>
  40540c:	f1a4 0308 	sub.w	r3, r4, #8
  405410:	e002      	b.n	405418 <quorem+0xa8>
  405412:	681a      	ldr	r2, [r3, #0]
  405414:	3b04      	subs	r3, #4
  405416:	b91a      	cbnz	r2, 405420 <quorem+0xb0>
  405418:	459b      	cmp	fp, r3
  40541a:	f108 38ff 	add.w	r8, r8, #4294967295
  40541e:	d3f8      	bcc.n	405412 <quorem+0xa2>
  405420:	f8c0 8010 	str.w	r8, [r0, #16]
  405424:	4604      	mov	r4, r0
  405426:	f001 fd57 	bl	406ed8 <__mcmp>
  40542a:	2800      	cmp	r0, #0
  40542c:	db2e      	blt.n	40548c <quorem+0x11c>
  40542e:	f109 0901 	add.w	r9, r9, #1
  405432:	465d      	mov	r5, fp
  405434:	2300      	movs	r3, #0
  405436:	f857 1b04 	ldr.w	r1, [r7], #4
  40543a:	6828      	ldr	r0, [r5, #0]
  40543c:	b28a      	uxth	r2, r1
  40543e:	1a9a      	subs	r2, r3, r2
  405440:	0c0b      	lsrs	r3, r1, #16
  405442:	fa12 f280 	uxtah	r2, r2, r0
  405446:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40544a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40544e:	b292      	uxth	r2, r2
  405450:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405454:	45ba      	cmp	sl, r7
  405456:	f845 2b04 	str.w	r2, [r5], #4
  40545a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40545e:	d2ea      	bcs.n	405436 <quorem+0xc6>
  405460:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405464:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  405468:	b982      	cbnz	r2, 40548c <quorem+0x11c>
  40546a:	1f1a      	subs	r2, r3, #4
  40546c:	4593      	cmp	fp, r2
  40546e:	d20b      	bcs.n	405488 <quorem+0x118>
  405470:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405474:	b942      	cbnz	r2, 405488 <quorem+0x118>
  405476:	3b08      	subs	r3, #8
  405478:	e002      	b.n	405480 <quorem+0x110>
  40547a:	681a      	ldr	r2, [r3, #0]
  40547c:	3b04      	subs	r3, #4
  40547e:	b91a      	cbnz	r2, 405488 <quorem+0x118>
  405480:	459b      	cmp	fp, r3
  405482:	f108 38ff 	add.w	r8, r8, #4294967295
  405486:	d3f8      	bcc.n	40547a <quorem+0x10a>
  405488:	f8c4 8010 	str.w	r8, [r4, #16]
  40548c:	4648      	mov	r0, r9
  40548e:	b003      	add	sp, #12
  405490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405494:	2000      	movs	r0, #0
  405496:	4770      	bx	lr

00405498 <_dtoa_r>:
  405498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40549c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40549e:	b09b      	sub	sp, #108	; 0x6c
  4054a0:	4604      	mov	r4, r0
  4054a2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  4054a4:	4692      	mov	sl, r2
  4054a6:	469b      	mov	fp, r3
  4054a8:	b141      	cbz	r1, 4054bc <_dtoa_r+0x24>
  4054aa:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4054ac:	604a      	str	r2, [r1, #4]
  4054ae:	2301      	movs	r3, #1
  4054b0:	4093      	lsls	r3, r2
  4054b2:	608b      	str	r3, [r1, #8]
  4054b4:	f001 fb38 	bl	406b28 <_Bfree>
  4054b8:	2300      	movs	r3, #0
  4054ba:	6423      	str	r3, [r4, #64]	; 0x40
  4054bc:	f1bb 0f00 	cmp.w	fp, #0
  4054c0:	465d      	mov	r5, fp
  4054c2:	db35      	blt.n	405530 <_dtoa_r+0x98>
  4054c4:	2300      	movs	r3, #0
  4054c6:	6033      	str	r3, [r6, #0]
  4054c8:	4b9d      	ldr	r3, [pc, #628]	; (405740 <_dtoa_r+0x2a8>)
  4054ca:	43ab      	bics	r3, r5
  4054cc:	d015      	beq.n	4054fa <_dtoa_r+0x62>
  4054ce:	4650      	mov	r0, sl
  4054d0:	4659      	mov	r1, fp
  4054d2:	2200      	movs	r2, #0
  4054d4:	2300      	movs	r3, #0
  4054d6:	f002 ff85 	bl	4083e4 <__aeabi_dcmpeq>
  4054da:	4680      	mov	r8, r0
  4054dc:	2800      	cmp	r0, #0
  4054de:	d02d      	beq.n	40553c <_dtoa_r+0xa4>
  4054e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4054e2:	2301      	movs	r3, #1
  4054e4:	6013      	str	r3, [r2, #0]
  4054e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4054e8:	2b00      	cmp	r3, #0
  4054ea:	f000 80bd 	beq.w	405668 <_dtoa_r+0x1d0>
  4054ee:	4895      	ldr	r0, [pc, #596]	; (405744 <_dtoa_r+0x2ac>)
  4054f0:	6018      	str	r0, [r3, #0]
  4054f2:	3801      	subs	r0, #1
  4054f4:	b01b      	add	sp, #108	; 0x6c
  4054f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054fa:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4054fc:	f242 730f 	movw	r3, #9999	; 0x270f
  405500:	6013      	str	r3, [r2, #0]
  405502:	f1ba 0f00 	cmp.w	sl, #0
  405506:	d10d      	bne.n	405524 <_dtoa_r+0x8c>
  405508:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40550c:	b955      	cbnz	r5, 405524 <_dtoa_r+0x8c>
  40550e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405510:	488d      	ldr	r0, [pc, #564]	; (405748 <_dtoa_r+0x2b0>)
  405512:	2b00      	cmp	r3, #0
  405514:	d0ee      	beq.n	4054f4 <_dtoa_r+0x5c>
  405516:	f100 0308 	add.w	r3, r0, #8
  40551a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40551c:	6013      	str	r3, [r2, #0]
  40551e:	b01b      	add	sp, #108	; 0x6c
  405520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405524:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405526:	4889      	ldr	r0, [pc, #548]	; (40574c <_dtoa_r+0x2b4>)
  405528:	2b00      	cmp	r3, #0
  40552a:	d0e3      	beq.n	4054f4 <_dtoa_r+0x5c>
  40552c:	1cc3      	adds	r3, r0, #3
  40552e:	e7f4      	b.n	40551a <_dtoa_r+0x82>
  405530:	2301      	movs	r3, #1
  405532:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  405536:	6033      	str	r3, [r6, #0]
  405538:	46ab      	mov	fp, r5
  40553a:	e7c5      	b.n	4054c8 <_dtoa_r+0x30>
  40553c:	aa18      	add	r2, sp, #96	; 0x60
  40553e:	ab19      	add	r3, sp, #100	; 0x64
  405540:	9201      	str	r2, [sp, #4]
  405542:	9300      	str	r3, [sp, #0]
  405544:	4652      	mov	r2, sl
  405546:	465b      	mov	r3, fp
  405548:	4620      	mov	r0, r4
  40554a:	f001 fd65 	bl	407018 <__d2b>
  40554e:	0d2b      	lsrs	r3, r5, #20
  405550:	4681      	mov	r9, r0
  405552:	d071      	beq.n	405638 <_dtoa_r+0x1a0>
  405554:	f3cb 0213 	ubfx	r2, fp, #0, #20
  405558:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  40555c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40555e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  405562:	4650      	mov	r0, sl
  405564:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405568:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40556c:	2200      	movs	r2, #0
  40556e:	4b78      	ldr	r3, [pc, #480]	; (405750 <_dtoa_r+0x2b8>)
  405570:	f002 fb1c 	bl	407bac <__aeabi_dsub>
  405574:	a36c      	add	r3, pc, #432	; (adr r3, 405728 <_dtoa_r+0x290>)
  405576:	e9d3 2300 	ldrd	r2, r3, [r3]
  40557a:	f002 fccb 	bl	407f14 <__aeabi_dmul>
  40557e:	a36c      	add	r3, pc, #432	; (adr r3, 405730 <_dtoa_r+0x298>)
  405580:	e9d3 2300 	ldrd	r2, r3, [r3]
  405584:	f002 fb14 	bl	407bb0 <__adddf3>
  405588:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40558c:	4630      	mov	r0, r6
  40558e:	f002 fc5b 	bl	407e48 <__aeabi_i2d>
  405592:	a369      	add	r3, pc, #420	; (adr r3, 405738 <_dtoa_r+0x2a0>)
  405594:	e9d3 2300 	ldrd	r2, r3, [r3]
  405598:	f002 fcbc 	bl	407f14 <__aeabi_dmul>
  40559c:	4602      	mov	r2, r0
  40559e:	460b      	mov	r3, r1
  4055a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4055a4:	f002 fb04 	bl	407bb0 <__adddf3>
  4055a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4055ac:	f002 ff62 	bl	408474 <__aeabi_d2iz>
  4055b0:	2200      	movs	r2, #0
  4055b2:	9002      	str	r0, [sp, #8]
  4055b4:	2300      	movs	r3, #0
  4055b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4055ba:	f002 ff1d 	bl	4083f8 <__aeabi_dcmplt>
  4055be:	2800      	cmp	r0, #0
  4055c0:	f040 8173 	bne.w	4058aa <_dtoa_r+0x412>
  4055c4:	9d02      	ldr	r5, [sp, #8]
  4055c6:	2d16      	cmp	r5, #22
  4055c8:	f200 815d 	bhi.w	405886 <_dtoa_r+0x3ee>
  4055cc:	4b61      	ldr	r3, [pc, #388]	; (405754 <_dtoa_r+0x2bc>)
  4055ce:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4055d2:	e9d3 0100 	ldrd	r0, r1, [r3]
  4055d6:	4652      	mov	r2, sl
  4055d8:	465b      	mov	r3, fp
  4055da:	f002 ff2b 	bl	408434 <__aeabi_dcmpgt>
  4055de:	2800      	cmp	r0, #0
  4055e0:	f000 81c5 	beq.w	40596e <_dtoa_r+0x4d6>
  4055e4:	1e6b      	subs	r3, r5, #1
  4055e6:	9302      	str	r3, [sp, #8]
  4055e8:	2300      	movs	r3, #0
  4055ea:	930e      	str	r3, [sp, #56]	; 0x38
  4055ec:	1bbf      	subs	r7, r7, r6
  4055ee:	1e7b      	subs	r3, r7, #1
  4055f0:	9306      	str	r3, [sp, #24]
  4055f2:	f100 8154 	bmi.w	40589e <_dtoa_r+0x406>
  4055f6:	2300      	movs	r3, #0
  4055f8:	9308      	str	r3, [sp, #32]
  4055fa:	9b02      	ldr	r3, [sp, #8]
  4055fc:	2b00      	cmp	r3, #0
  4055fe:	f2c0 8145 	blt.w	40588c <_dtoa_r+0x3f4>
  405602:	9a06      	ldr	r2, [sp, #24]
  405604:	930d      	str	r3, [sp, #52]	; 0x34
  405606:	4611      	mov	r1, r2
  405608:	4419      	add	r1, r3
  40560a:	2300      	movs	r3, #0
  40560c:	9106      	str	r1, [sp, #24]
  40560e:	930c      	str	r3, [sp, #48]	; 0x30
  405610:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405612:	2b09      	cmp	r3, #9
  405614:	d82a      	bhi.n	40566c <_dtoa_r+0x1d4>
  405616:	2b05      	cmp	r3, #5
  405618:	f340 865b 	ble.w	4062d2 <_dtoa_r+0xe3a>
  40561c:	3b04      	subs	r3, #4
  40561e:	9324      	str	r3, [sp, #144]	; 0x90
  405620:	2500      	movs	r5, #0
  405622:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405624:	3b02      	subs	r3, #2
  405626:	2b03      	cmp	r3, #3
  405628:	f200 8642 	bhi.w	4062b0 <_dtoa_r+0xe18>
  40562c:	e8df f013 	tbh	[pc, r3, lsl #1]
  405630:	02c903d4 	.word	0x02c903d4
  405634:	046103df 	.word	0x046103df
  405638:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40563a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40563c:	443e      	add	r6, r7
  40563e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  405642:	2b20      	cmp	r3, #32
  405644:	f340 818e 	ble.w	405964 <_dtoa_r+0x4cc>
  405648:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40564c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  405650:	409d      	lsls	r5, r3
  405652:	fa2a f000 	lsr.w	r0, sl, r0
  405656:	4328      	orrs	r0, r5
  405658:	f002 fbe6 	bl	407e28 <__aeabi_ui2d>
  40565c:	2301      	movs	r3, #1
  40565e:	3e01      	subs	r6, #1
  405660:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405664:	9314      	str	r3, [sp, #80]	; 0x50
  405666:	e781      	b.n	40556c <_dtoa_r+0xd4>
  405668:	483b      	ldr	r0, [pc, #236]	; (405758 <_dtoa_r+0x2c0>)
  40566a:	e743      	b.n	4054f4 <_dtoa_r+0x5c>
  40566c:	2100      	movs	r1, #0
  40566e:	6461      	str	r1, [r4, #68]	; 0x44
  405670:	4620      	mov	r0, r4
  405672:	9125      	str	r1, [sp, #148]	; 0x94
  405674:	f001 fa32 	bl	406adc <_Balloc>
  405678:	f04f 33ff 	mov.w	r3, #4294967295
  40567c:	930a      	str	r3, [sp, #40]	; 0x28
  40567e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405680:	930f      	str	r3, [sp, #60]	; 0x3c
  405682:	2301      	movs	r3, #1
  405684:	9004      	str	r0, [sp, #16]
  405686:	6420      	str	r0, [r4, #64]	; 0x40
  405688:	9224      	str	r2, [sp, #144]	; 0x90
  40568a:	930b      	str	r3, [sp, #44]	; 0x2c
  40568c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40568e:	2b00      	cmp	r3, #0
  405690:	f2c0 80d9 	blt.w	405846 <_dtoa_r+0x3ae>
  405694:	9a02      	ldr	r2, [sp, #8]
  405696:	2a0e      	cmp	r2, #14
  405698:	f300 80d5 	bgt.w	405846 <_dtoa_r+0x3ae>
  40569c:	4b2d      	ldr	r3, [pc, #180]	; (405754 <_dtoa_r+0x2bc>)
  40569e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4056a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4056aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4056ac:	2b00      	cmp	r3, #0
  4056ae:	f2c0 83ba 	blt.w	405e26 <_dtoa_r+0x98e>
  4056b2:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4056b6:	4650      	mov	r0, sl
  4056b8:	462a      	mov	r2, r5
  4056ba:	4633      	mov	r3, r6
  4056bc:	4659      	mov	r1, fp
  4056be:	f002 fd53 	bl	408168 <__aeabi_ddiv>
  4056c2:	f002 fed7 	bl	408474 <__aeabi_d2iz>
  4056c6:	4680      	mov	r8, r0
  4056c8:	f002 fbbe 	bl	407e48 <__aeabi_i2d>
  4056cc:	462a      	mov	r2, r5
  4056ce:	4633      	mov	r3, r6
  4056d0:	f002 fc20 	bl	407f14 <__aeabi_dmul>
  4056d4:	460b      	mov	r3, r1
  4056d6:	4602      	mov	r2, r0
  4056d8:	4659      	mov	r1, fp
  4056da:	4650      	mov	r0, sl
  4056dc:	f002 fa66 	bl	407bac <__aeabi_dsub>
  4056e0:	9d04      	ldr	r5, [sp, #16]
  4056e2:	f108 0330 	add.w	r3, r8, #48	; 0x30
  4056e6:	702b      	strb	r3, [r5, #0]
  4056e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4056ea:	2b01      	cmp	r3, #1
  4056ec:	4606      	mov	r6, r0
  4056ee:	460f      	mov	r7, r1
  4056f0:	f105 0501 	add.w	r5, r5, #1
  4056f4:	d068      	beq.n	4057c8 <_dtoa_r+0x330>
  4056f6:	2200      	movs	r2, #0
  4056f8:	4b18      	ldr	r3, [pc, #96]	; (40575c <_dtoa_r+0x2c4>)
  4056fa:	f002 fc0b 	bl	407f14 <__aeabi_dmul>
  4056fe:	2200      	movs	r2, #0
  405700:	2300      	movs	r3, #0
  405702:	4606      	mov	r6, r0
  405704:	460f      	mov	r7, r1
  405706:	f002 fe6d 	bl	4083e4 <__aeabi_dcmpeq>
  40570a:	2800      	cmp	r0, #0
  40570c:	f040 8088 	bne.w	405820 <_dtoa_r+0x388>
  405710:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  405714:	f04f 0a00 	mov.w	sl, #0
  405718:	f8df b040 	ldr.w	fp, [pc, #64]	; 40575c <_dtoa_r+0x2c4>
  40571c:	940c      	str	r4, [sp, #48]	; 0x30
  40571e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  405722:	e028      	b.n	405776 <_dtoa_r+0x2de>
  405724:	f3af 8000 	nop.w
  405728:	636f4361 	.word	0x636f4361
  40572c:	3fd287a7 	.word	0x3fd287a7
  405730:	8b60c8b3 	.word	0x8b60c8b3
  405734:	3fc68a28 	.word	0x3fc68a28
  405738:	509f79fb 	.word	0x509f79fb
  40573c:	3fd34413 	.word	0x3fd34413
  405740:	7ff00000 	.word	0x7ff00000
  405744:	00409199 	.word	0x00409199
  405748:	004091bc 	.word	0x004091bc
  40574c:	004091c8 	.word	0x004091c8
  405750:	3ff80000 	.word	0x3ff80000
  405754:	004091f8 	.word	0x004091f8
  405758:	00409198 	.word	0x00409198
  40575c:	40240000 	.word	0x40240000
  405760:	f002 fbd8 	bl	407f14 <__aeabi_dmul>
  405764:	2200      	movs	r2, #0
  405766:	2300      	movs	r3, #0
  405768:	4606      	mov	r6, r0
  40576a:	460f      	mov	r7, r1
  40576c:	f002 fe3a 	bl	4083e4 <__aeabi_dcmpeq>
  405770:	2800      	cmp	r0, #0
  405772:	f040 83c1 	bne.w	405ef8 <_dtoa_r+0xa60>
  405776:	4642      	mov	r2, r8
  405778:	464b      	mov	r3, r9
  40577a:	4630      	mov	r0, r6
  40577c:	4639      	mov	r1, r7
  40577e:	f002 fcf3 	bl	408168 <__aeabi_ddiv>
  405782:	f002 fe77 	bl	408474 <__aeabi_d2iz>
  405786:	4604      	mov	r4, r0
  405788:	f002 fb5e 	bl	407e48 <__aeabi_i2d>
  40578c:	4642      	mov	r2, r8
  40578e:	464b      	mov	r3, r9
  405790:	f002 fbc0 	bl	407f14 <__aeabi_dmul>
  405794:	4602      	mov	r2, r0
  405796:	460b      	mov	r3, r1
  405798:	4630      	mov	r0, r6
  40579a:	4639      	mov	r1, r7
  40579c:	f002 fa06 	bl	407bac <__aeabi_dsub>
  4057a0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  4057a4:	9e04      	ldr	r6, [sp, #16]
  4057a6:	f805 eb01 	strb.w	lr, [r5], #1
  4057aa:	eba5 0e06 	sub.w	lr, r5, r6
  4057ae:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4057b0:	45b6      	cmp	lr, r6
  4057b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4057b6:	4652      	mov	r2, sl
  4057b8:	465b      	mov	r3, fp
  4057ba:	d1d1      	bne.n	405760 <_dtoa_r+0x2c8>
  4057bc:	46a0      	mov	r8, r4
  4057be:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4057c2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4057c4:	4606      	mov	r6, r0
  4057c6:	460f      	mov	r7, r1
  4057c8:	4632      	mov	r2, r6
  4057ca:	463b      	mov	r3, r7
  4057cc:	4630      	mov	r0, r6
  4057ce:	4639      	mov	r1, r7
  4057d0:	f002 f9ee 	bl	407bb0 <__adddf3>
  4057d4:	4606      	mov	r6, r0
  4057d6:	460f      	mov	r7, r1
  4057d8:	4602      	mov	r2, r0
  4057da:	460b      	mov	r3, r1
  4057dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4057e0:	f002 fe0a 	bl	4083f8 <__aeabi_dcmplt>
  4057e4:	b948      	cbnz	r0, 4057fa <_dtoa_r+0x362>
  4057e6:	4632      	mov	r2, r6
  4057e8:	463b      	mov	r3, r7
  4057ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4057ee:	f002 fdf9 	bl	4083e4 <__aeabi_dcmpeq>
  4057f2:	b1a8      	cbz	r0, 405820 <_dtoa_r+0x388>
  4057f4:	f018 0f01 	tst.w	r8, #1
  4057f8:	d012      	beq.n	405820 <_dtoa_r+0x388>
  4057fa:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4057fe:	9a04      	ldr	r2, [sp, #16]
  405800:	1e6b      	subs	r3, r5, #1
  405802:	e004      	b.n	40580e <_dtoa_r+0x376>
  405804:	429a      	cmp	r2, r3
  405806:	f000 8401 	beq.w	40600c <_dtoa_r+0xb74>
  40580a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40580e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  405812:	f103 0501 	add.w	r5, r3, #1
  405816:	d0f5      	beq.n	405804 <_dtoa_r+0x36c>
  405818:	f108 0801 	add.w	r8, r8, #1
  40581c:	f883 8000 	strb.w	r8, [r3]
  405820:	4649      	mov	r1, r9
  405822:	4620      	mov	r0, r4
  405824:	f001 f980 	bl	406b28 <_Bfree>
  405828:	2200      	movs	r2, #0
  40582a:	9b02      	ldr	r3, [sp, #8]
  40582c:	702a      	strb	r2, [r5, #0]
  40582e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405830:	3301      	adds	r3, #1
  405832:	6013      	str	r3, [r2, #0]
  405834:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405836:	2b00      	cmp	r3, #0
  405838:	f000 839e 	beq.w	405f78 <_dtoa_r+0xae0>
  40583c:	9804      	ldr	r0, [sp, #16]
  40583e:	601d      	str	r5, [r3, #0]
  405840:	b01b      	add	sp, #108	; 0x6c
  405842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405846:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405848:	2a00      	cmp	r2, #0
  40584a:	d03e      	beq.n	4058ca <_dtoa_r+0x432>
  40584c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40584e:	2a01      	cmp	r2, #1
  405850:	f340 8311 	ble.w	405e76 <_dtoa_r+0x9de>
  405854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405856:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405858:	1e5f      	subs	r7, r3, #1
  40585a:	42ba      	cmp	r2, r7
  40585c:	f2c0 838f 	blt.w	405f7e <_dtoa_r+0xae6>
  405860:	1bd7      	subs	r7, r2, r7
  405862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405864:	2b00      	cmp	r3, #0
  405866:	f2c0 848b 	blt.w	406180 <_dtoa_r+0xce8>
  40586a:	9d08      	ldr	r5, [sp, #32]
  40586c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40586e:	9a08      	ldr	r2, [sp, #32]
  405870:	441a      	add	r2, r3
  405872:	9208      	str	r2, [sp, #32]
  405874:	9a06      	ldr	r2, [sp, #24]
  405876:	2101      	movs	r1, #1
  405878:	441a      	add	r2, r3
  40587a:	4620      	mov	r0, r4
  40587c:	9206      	str	r2, [sp, #24]
  40587e:	f001 f9ed 	bl	406c5c <__i2b>
  405882:	4606      	mov	r6, r0
  405884:	e024      	b.n	4058d0 <_dtoa_r+0x438>
  405886:	2301      	movs	r3, #1
  405888:	930e      	str	r3, [sp, #56]	; 0x38
  40588a:	e6af      	b.n	4055ec <_dtoa_r+0x154>
  40588c:	9a08      	ldr	r2, [sp, #32]
  40588e:	9b02      	ldr	r3, [sp, #8]
  405890:	1ad2      	subs	r2, r2, r3
  405892:	425b      	negs	r3, r3
  405894:	930c      	str	r3, [sp, #48]	; 0x30
  405896:	2300      	movs	r3, #0
  405898:	9208      	str	r2, [sp, #32]
  40589a:	930d      	str	r3, [sp, #52]	; 0x34
  40589c:	e6b8      	b.n	405610 <_dtoa_r+0x178>
  40589e:	f1c7 0301 	rsb	r3, r7, #1
  4058a2:	9308      	str	r3, [sp, #32]
  4058a4:	2300      	movs	r3, #0
  4058a6:	9306      	str	r3, [sp, #24]
  4058a8:	e6a7      	b.n	4055fa <_dtoa_r+0x162>
  4058aa:	9d02      	ldr	r5, [sp, #8]
  4058ac:	4628      	mov	r0, r5
  4058ae:	f002 facb 	bl	407e48 <__aeabi_i2d>
  4058b2:	4602      	mov	r2, r0
  4058b4:	460b      	mov	r3, r1
  4058b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4058ba:	f002 fd93 	bl	4083e4 <__aeabi_dcmpeq>
  4058be:	2800      	cmp	r0, #0
  4058c0:	f47f ae80 	bne.w	4055c4 <_dtoa_r+0x12c>
  4058c4:	1e6b      	subs	r3, r5, #1
  4058c6:	9302      	str	r3, [sp, #8]
  4058c8:	e67c      	b.n	4055c4 <_dtoa_r+0x12c>
  4058ca:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4058cc:	9d08      	ldr	r5, [sp, #32]
  4058ce:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4058d0:	2d00      	cmp	r5, #0
  4058d2:	dd0c      	ble.n	4058ee <_dtoa_r+0x456>
  4058d4:	9906      	ldr	r1, [sp, #24]
  4058d6:	2900      	cmp	r1, #0
  4058d8:	460b      	mov	r3, r1
  4058da:	dd08      	ble.n	4058ee <_dtoa_r+0x456>
  4058dc:	42a9      	cmp	r1, r5
  4058de:	9a08      	ldr	r2, [sp, #32]
  4058e0:	bfa8      	it	ge
  4058e2:	462b      	movge	r3, r5
  4058e4:	1ad2      	subs	r2, r2, r3
  4058e6:	1aed      	subs	r5, r5, r3
  4058e8:	1acb      	subs	r3, r1, r3
  4058ea:	9208      	str	r2, [sp, #32]
  4058ec:	9306      	str	r3, [sp, #24]
  4058ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4058f0:	b1d3      	cbz	r3, 405928 <_dtoa_r+0x490>
  4058f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4058f4:	2b00      	cmp	r3, #0
  4058f6:	f000 82b7 	beq.w	405e68 <_dtoa_r+0x9d0>
  4058fa:	2f00      	cmp	r7, #0
  4058fc:	dd10      	ble.n	405920 <_dtoa_r+0x488>
  4058fe:	4631      	mov	r1, r6
  405900:	463a      	mov	r2, r7
  405902:	4620      	mov	r0, r4
  405904:	f001 fa46 	bl	406d94 <__pow5mult>
  405908:	464a      	mov	r2, r9
  40590a:	4601      	mov	r1, r0
  40590c:	4606      	mov	r6, r0
  40590e:	4620      	mov	r0, r4
  405910:	f001 f9ae 	bl	406c70 <__multiply>
  405914:	4649      	mov	r1, r9
  405916:	4680      	mov	r8, r0
  405918:	4620      	mov	r0, r4
  40591a:	f001 f905 	bl	406b28 <_Bfree>
  40591e:	46c1      	mov	r9, r8
  405920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405922:	1bda      	subs	r2, r3, r7
  405924:	f040 82a1 	bne.w	405e6a <_dtoa_r+0x9d2>
  405928:	2101      	movs	r1, #1
  40592a:	4620      	mov	r0, r4
  40592c:	f001 f996 	bl	406c5c <__i2b>
  405930:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405932:	2b00      	cmp	r3, #0
  405934:	4680      	mov	r8, r0
  405936:	dd1c      	ble.n	405972 <_dtoa_r+0x4da>
  405938:	4601      	mov	r1, r0
  40593a:	461a      	mov	r2, r3
  40593c:	4620      	mov	r0, r4
  40593e:	f001 fa29 	bl	406d94 <__pow5mult>
  405942:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405944:	2b01      	cmp	r3, #1
  405946:	4680      	mov	r8, r0
  405948:	f340 8254 	ble.w	405df4 <_dtoa_r+0x95c>
  40594c:	2300      	movs	r3, #0
  40594e:	930c      	str	r3, [sp, #48]	; 0x30
  405950:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405954:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405958:	6918      	ldr	r0, [r3, #16]
  40595a:	f001 f92f 	bl	406bbc <__hi0bits>
  40595e:	f1c0 0020 	rsb	r0, r0, #32
  405962:	e010      	b.n	405986 <_dtoa_r+0x4ee>
  405964:	f1c3 0520 	rsb	r5, r3, #32
  405968:	fa0a f005 	lsl.w	r0, sl, r5
  40596c:	e674      	b.n	405658 <_dtoa_r+0x1c0>
  40596e:	900e      	str	r0, [sp, #56]	; 0x38
  405970:	e63c      	b.n	4055ec <_dtoa_r+0x154>
  405972:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405974:	2b01      	cmp	r3, #1
  405976:	f340 8287 	ble.w	405e88 <_dtoa_r+0x9f0>
  40597a:	2300      	movs	r3, #0
  40597c:	930c      	str	r3, [sp, #48]	; 0x30
  40597e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405980:	2001      	movs	r0, #1
  405982:	2b00      	cmp	r3, #0
  405984:	d1e4      	bne.n	405950 <_dtoa_r+0x4b8>
  405986:	9a06      	ldr	r2, [sp, #24]
  405988:	4410      	add	r0, r2
  40598a:	f010 001f 	ands.w	r0, r0, #31
  40598e:	f000 80a1 	beq.w	405ad4 <_dtoa_r+0x63c>
  405992:	f1c0 0320 	rsb	r3, r0, #32
  405996:	2b04      	cmp	r3, #4
  405998:	f340 849e 	ble.w	4062d8 <_dtoa_r+0xe40>
  40599c:	9b08      	ldr	r3, [sp, #32]
  40599e:	f1c0 001c 	rsb	r0, r0, #28
  4059a2:	4403      	add	r3, r0
  4059a4:	9308      	str	r3, [sp, #32]
  4059a6:	4613      	mov	r3, r2
  4059a8:	4403      	add	r3, r0
  4059aa:	4405      	add	r5, r0
  4059ac:	9306      	str	r3, [sp, #24]
  4059ae:	9b08      	ldr	r3, [sp, #32]
  4059b0:	2b00      	cmp	r3, #0
  4059b2:	dd05      	ble.n	4059c0 <_dtoa_r+0x528>
  4059b4:	4649      	mov	r1, r9
  4059b6:	461a      	mov	r2, r3
  4059b8:	4620      	mov	r0, r4
  4059ba:	f001 fa3b 	bl	406e34 <__lshift>
  4059be:	4681      	mov	r9, r0
  4059c0:	9b06      	ldr	r3, [sp, #24]
  4059c2:	2b00      	cmp	r3, #0
  4059c4:	dd05      	ble.n	4059d2 <_dtoa_r+0x53a>
  4059c6:	4641      	mov	r1, r8
  4059c8:	461a      	mov	r2, r3
  4059ca:	4620      	mov	r0, r4
  4059cc:	f001 fa32 	bl	406e34 <__lshift>
  4059d0:	4680      	mov	r8, r0
  4059d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4059d4:	2b00      	cmp	r3, #0
  4059d6:	f040 8086 	bne.w	405ae6 <_dtoa_r+0x64e>
  4059da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4059dc:	2b00      	cmp	r3, #0
  4059de:	f340 8266 	ble.w	405eae <_dtoa_r+0xa16>
  4059e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4059e4:	2b00      	cmp	r3, #0
  4059e6:	f000 8098 	beq.w	405b1a <_dtoa_r+0x682>
  4059ea:	2d00      	cmp	r5, #0
  4059ec:	dd05      	ble.n	4059fa <_dtoa_r+0x562>
  4059ee:	4631      	mov	r1, r6
  4059f0:	462a      	mov	r2, r5
  4059f2:	4620      	mov	r0, r4
  4059f4:	f001 fa1e 	bl	406e34 <__lshift>
  4059f8:	4606      	mov	r6, r0
  4059fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4059fc:	2b00      	cmp	r3, #0
  4059fe:	f040 8337 	bne.w	406070 <_dtoa_r+0xbd8>
  405a02:	9606      	str	r6, [sp, #24]
  405a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405a06:	9a04      	ldr	r2, [sp, #16]
  405a08:	f8dd b018 	ldr.w	fp, [sp, #24]
  405a0c:	3b01      	subs	r3, #1
  405a0e:	18d3      	adds	r3, r2, r3
  405a10:	930b      	str	r3, [sp, #44]	; 0x2c
  405a12:	f00a 0301 	and.w	r3, sl, #1
  405a16:	930c      	str	r3, [sp, #48]	; 0x30
  405a18:	4617      	mov	r7, r2
  405a1a:	46c2      	mov	sl, r8
  405a1c:	4651      	mov	r1, sl
  405a1e:	4648      	mov	r0, r9
  405a20:	f7ff fca6 	bl	405370 <quorem>
  405a24:	4631      	mov	r1, r6
  405a26:	4605      	mov	r5, r0
  405a28:	4648      	mov	r0, r9
  405a2a:	f001 fa55 	bl	406ed8 <__mcmp>
  405a2e:	465a      	mov	r2, fp
  405a30:	900a      	str	r0, [sp, #40]	; 0x28
  405a32:	4651      	mov	r1, sl
  405a34:	4620      	mov	r0, r4
  405a36:	f001 fa6b 	bl	406f10 <__mdiff>
  405a3a:	68c2      	ldr	r2, [r0, #12]
  405a3c:	4680      	mov	r8, r0
  405a3e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  405a42:	2a00      	cmp	r2, #0
  405a44:	f040 822b 	bne.w	405e9e <_dtoa_r+0xa06>
  405a48:	4601      	mov	r1, r0
  405a4a:	4648      	mov	r0, r9
  405a4c:	9308      	str	r3, [sp, #32]
  405a4e:	f001 fa43 	bl	406ed8 <__mcmp>
  405a52:	4641      	mov	r1, r8
  405a54:	9006      	str	r0, [sp, #24]
  405a56:	4620      	mov	r0, r4
  405a58:	f001 f866 	bl	406b28 <_Bfree>
  405a5c:	9a06      	ldr	r2, [sp, #24]
  405a5e:	9b08      	ldr	r3, [sp, #32]
  405a60:	b932      	cbnz	r2, 405a70 <_dtoa_r+0x5d8>
  405a62:	9924      	ldr	r1, [sp, #144]	; 0x90
  405a64:	b921      	cbnz	r1, 405a70 <_dtoa_r+0x5d8>
  405a66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405a68:	2a00      	cmp	r2, #0
  405a6a:	f000 83ef 	beq.w	40624c <_dtoa_r+0xdb4>
  405a6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405a70:	990a      	ldr	r1, [sp, #40]	; 0x28
  405a72:	2900      	cmp	r1, #0
  405a74:	f2c0 829f 	blt.w	405fb6 <_dtoa_r+0xb1e>
  405a78:	d105      	bne.n	405a86 <_dtoa_r+0x5ee>
  405a7a:	9924      	ldr	r1, [sp, #144]	; 0x90
  405a7c:	b919      	cbnz	r1, 405a86 <_dtoa_r+0x5ee>
  405a7e:	990c      	ldr	r1, [sp, #48]	; 0x30
  405a80:	2900      	cmp	r1, #0
  405a82:	f000 8298 	beq.w	405fb6 <_dtoa_r+0xb1e>
  405a86:	2a00      	cmp	r2, #0
  405a88:	f300 8306 	bgt.w	406098 <_dtoa_r+0xc00>
  405a8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405a8e:	703b      	strb	r3, [r7, #0]
  405a90:	f107 0801 	add.w	r8, r7, #1
  405a94:	4297      	cmp	r7, r2
  405a96:	4645      	mov	r5, r8
  405a98:	f000 830c 	beq.w	4060b4 <_dtoa_r+0xc1c>
  405a9c:	4649      	mov	r1, r9
  405a9e:	2300      	movs	r3, #0
  405aa0:	220a      	movs	r2, #10
  405aa2:	4620      	mov	r0, r4
  405aa4:	f001 f84a 	bl	406b3c <__multadd>
  405aa8:	455e      	cmp	r6, fp
  405aaa:	4681      	mov	r9, r0
  405aac:	4631      	mov	r1, r6
  405aae:	f04f 0300 	mov.w	r3, #0
  405ab2:	f04f 020a 	mov.w	r2, #10
  405ab6:	4620      	mov	r0, r4
  405ab8:	f000 81eb 	beq.w	405e92 <_dtoa_r+0x9fa>
  405abc:	f001 f83e 	bl	406b3c <__multadd>
  405ac0:	4659      	mov	r1, fp
  405ac2:	4606      	mov	r6, r0
  405ac4:	2300      	movs	r3, #0
  405ac6:	220a      	movs	r2, #10
  405ac8:	4620      	mov	r0, r4
  405aca:	f001 f837 	bl	406b3c <__multadd>
  405ace:	4647      	mov	r7, r8
  405ad0:	4683      	mov	fp, r0
  405ad2:	e7a3      	b.n	405a1c <_dtoa_r+0x584>
  405ad4:	201c      	movs	r0, #28
  405ad6:	9b08      	ldr	r3, [sp, #32]
  405ad8:	4403      	add	r3, r0
  405ada:	9308      	str	r3, [sp, #32]
  405adc:	9b06      	ldr	r3, [sp, #24]
  405ade:	4403      	add	r3, r0
  405ae0:	4405      	add	r5, r0
  405ae2:	9306      	str	r3, [sp, #24]
  405ae4:	e763      	b.n	4059ae <_dtoa_r+0x516>
  405ae6:	4641      	mov	r1, r8
  405ae8:	4648      	mov	r0, r9
  405aea:	f001 f9f5 	bl	406ed8 <__mcmp>
  405aee:	2800      	cmp	r0, #0
  405af0:	f6bf af73 	bge.w	4059da <_dtoa_r+0x542>
  405af4:	9f02      	ldr	r7, [sp, #8]
  405af6:	4649      	mov	r1, r9
  405af8:	2300      	movs	r3, #0
  405afa:	220a      	movs	r2, #10
  405afc:	4620      	mov	r0, r4
  405afe:	3f01      	subs	r7, #1
  405b00:	9702      	str	r7, [sp, #8]
  405b02:	f001 f81b 	bl	406b3c <__multadd>
  405b06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405b08:	4681      	mov	r9, r0
  405b0a:	2b00      	cmp	r3, #0
  405b0c:	f040 83b6 	bne.w	40627c <_dtoa_r+0xde4>
  405b10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405b12:	2b00      	cmp	r3, #0
  405b14:	f340 83bf 	ble.w	406296 <_dtoa_r+0xdfe>
  405b18:	930a      	str	r3, [sp, #40]	; 0x28
  405b1a:	f8dd b010 	ldr.w	fp, [sp, #16]
  405b1e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405b20:	465d      	mov	r5, fp
  405b22:	e002      	b.n	405b2a <_dtoa_r+0x692>
  405b24:	f001 f80a 	bl	406b3c <__multadd>
  405b28:	4681      	mov	r9, r0
  405b2a:	4641      	mov	r1, r8
  405b2c:	4648      	mov	r0, r9
  405b2e:	f7ff fc1f 	bl	405370 <quorem>
  405b32:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  405b36:	f805 ab01 	strb.w	sl, [r5], #1
  405b3a:	eba5 030b 	sub.w	r3, r5, fp
  405b3e:	42bb      	cmp	r3, r7
  405b40:	f04f 020a 	mov.w	r2, #10
  405b44:	f04f 0300 	mov.w	r3, #0
  405b48:	4649      	mov	r1, r9
  405b4a:	4620      	mov	r0, r4
  405b4c:	dbea      	blt.n	405b24 <_dtoa_r+0x68c>
  405b4e:	9b04      	ldr	r3, [sp, #16]
  405b50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405b52:	2a01      	cmp	r2, #1
  405b54:	bfac      	ite	ge
  405b56:	189b      	addge	r3, r3, r2
  405b58:	3301      	addlt	r3, #1
  405b5a:	461d      	mov	r5, r3
  405b5c:	f04f 0b00 	mov.w	fp, #0
  405b60:	4649      	mov	r1, r9
  405b62:	2201      	movs	r2, #1
  405b64:	4620      	mov	r0, r4
  405b66:	f001 f965 	bl	406e34 <__lshift>
  405b6a:	4641      	mov	r1, r8
  405b6c:	4681      	mov	r9, r0
  405b6e:	f001 f9b3 	bl	406ed8 <__mcmp>
  405b72:	2800      	cmp	r0, #0
  405b74:	f340 823d 	ble.w	405ff2 <_dtoa_r+0xb5a>
  405b78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  405b7c:	9904      	ldr	r1, [sp, #16]
  405b7e:	1e6b      	subs	r3, r5, #1
  405b80:	e004      	b.n	405b8c <_dtoa_r+0x6f4>
  405b82:	428b      	cmp	r3, r1
  405b84:	f000 81ae 	beq.w	405ee4 <_dtoa_r+0xa4c>
  405b88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  405b8c:	2a39      	cmp	r2, #57	; 0x39
  405b8e:	f103 0501 	add.w	r5, r3, #1
  405b92:	d0f6      	beq.n	405b82 <_dtoa_r+0x6ea>
  405b94:	3201      	adds	r2, #1
  405b96:	701a      	strb	r2, [r3, #0]
  405b98:	4641      	mov	r1, r8
  405b9a:	4620      	mov	r0, r4
  405b9c:	f000 ffc4 	bl	406b28 <_Bfree>
  405ba0:	2e00      	cmp	r6, #0
  405ba2:	f43f ae3d 	beq.w	405820 <_dtoa_r+0x388>
  405ba6:	f1bb 0f00 	cmp.w	fp, #0
  405baa:	d005      	beq.n	405bb8 <_dtoa_r+0x720>
  405bac:	45b3      	cmp	fp, r6
  405bae:	d003      	beq.n	405bb8 <_dtoa_r+0x720>
  405bb0:	4659      	mov	r1, fp
  405bb2:	4620      	mov	r0, r4
  405bb4:	f000 ffb8 	bl	406b28 <_Bfree>
  405bb8:	4631      	mov	r1, r6
  405bba:	4620      	mov	r0, r4
  405bbc:	f000 ffb4 	bl	406b28 <_Bfree>
  405bc0:	e62e      	b.n	405820 <_dtoa_r+0x388>
  405bc2:	2300      	movs	r3, #0
  405bc4:	930b      	str	r3, [sp, #44]	; 0x2c
  405bc6:	9b02      	ldr	r3, [sp, #8]
  405bc8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405bca:	4413      	add	r3, r2
  405bcc:	930f      	str	r3, [sp, #60]	; 0x3c
  405bce:	3301      	adds	r3, #1
  405bd0:	2b01      	cmp	r3, #1
  405bd2:	461f      	mov	r7, r3
  405bd4:	461e      	mov	r6, r3
  405bd6:	930a      	str	r3, [sp, #40]	; 0x28
  405bd8:	bfb8      	it	lt
  405bda:	2701      	movlt	r7, #1
  405bdc:	2100      	movs	r1, #0
  405bde:	2f17      	cmp	r7, #23
  405be0:	6461      	str	r1, [r4, #68]	; 0x44
  405be2:	d90a      	bls.n	405bfa <_dtoa_r+0x762>
  405be4:	2201      	movs	r2, #1
  405be6:	2304      	movs	r3, #4
  405be8:	005b      	lsls	r3, r3, #1
  405bea:	f103 0014 	add.w	r0, r3, #20
  405bee:	4287      	cmp	r7, r0
  405bf0:	4611      	mov	r1, r2
  405bf2:	f102 0201 	add.w	r2, r2, #1
  405bf6:	d2f7      	bcs.n	405be8 <_dtoa_r+0x750>
  405bf8:	6461      	str	r1, [r4, #68]	; 0x44
  405bfa:	4620      	mov	r0, r4
  405bfc:	f000 ff6e 	bl	406adc <_Balloc>
  405c00:	2e0e      	cmp	r6, #14
  405c02:	9004      	str	r0, [sp, #16]
  405c04:	6420      	str	r0, [r4, #64]	; 0x40
  405c06:	f63f ad41 	bhi.w	40568c <_dtoa_r+0x1f4>
  405c0a:	2d00      	cmp	r5, #0
  405c0c:	f43f ad3e 	beq.w	40568c <_dtoa_r+0x1f4>
  405c10:	9902      	ldr	r1, [sp, #8]
  405c12:	2900      	cmp	r1, #0
  405c14:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  405c18:	f340 8202 	ble.w	406020 <_dtoa_r+0xb88>
  405c1c:	4bb8      	ldr	r3, [pc, #736]	; (405f00 <_dtoa_r+0xa68>)
  405c1e:	f001 020f 	and.w	r2, r1, #15
  405c22:	110d      	asrs	r5, r1, #4
  405c24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405c28:	06e9      	lsls	r1, r5, #27
  405c2a:	e9d3 6700 	ldrd	r6, r7, [r3]
  405c2e:	f140 81ae 	bpl.w	405f8e <_dtoa_r+0xaf6>
  405c32:	4bb4      	ldr	r3, [pc, #720]	; (405f04 <_dtoa_r+0xa6c>)
  405c34:	4650      	mov	r0, sl
  405c36:	4659      	mov	r1, fp
  405c38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405c3c:	f002 fa94 	bl	408168 <__aeabi_ddiv>
  405c40:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  405c44:	f005 050f 	and.w	r5, r5, #15
  405c48:	f04f 0a03 	mov.w	sl, #3
  405c4c:	b18d      	cbz	r5, 405c72 <_dtoa_r+0x7da>
  405c4e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 405f04 <_dtoa_r+0xa6c>
  405c52:	07ea      	lsls	r2, r5, #31
  405c54:	d509      	bpl.n	405c6a <_dtoa_r+0x7d2>
  405c56:	4630      	mov	r0, r6
  405c58:	4639      	mov	r1, r7
  405c5a:	e9d8 2300 	ldrd	r2, r3, [r8]
  405c5e:	f002 f959 	bl	407f14 <__aeabi_dmul>
  405c62:	f10a 0a01 	add.w	sl, sl, #1
  405c66:	4606      	mov	r6, r0
  405c68:	460f      	mov	r7, r1
  405c6a:	106d      	asrs	r5, r5, #1
  405c6c:	f108 0808 	add.w	r8, r8, #8
  405c70:	d1ef      	bne.n	405c52 <_dtoa_r+0x7ba>
  405c72:	463b      	mov	r3, r7
  405c74:	4632      	mov	r2, r6
  405c76:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  405c7a:	f002 fa75 	bl	408168 <__aeabi_ddiv>
  405c7e:	4607      	mov	r7, r0
  405c80:	4688      	mov	r8, r1
  405c82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405c84:	b143      	cbz	r3, 405c98 <_dtoa_r+0x800>
  405c86:	2200      	movs	r2, #0
  405c88:	4b9f      	ldr	r3, [pc, #636]	; (405f08 <_dtoa_r+0xa70>)
  405c8a:	4638      	mov	r0, r7
  405c8c:	4641      	mov	r1, r8
  405c8e:	f002 fbb3 	bl	4083f8 <__aeabi_dcmplt>
  405c92:	2800      	cmp	r0, #0
  405c94:	f040 8286 	bne.w	4061a4 <_dtoa_r+0xd0c>
  405c98:	4650      	mov	r0, sl
  405c9a:	f002 f8d5 	bl	407e48 <__aeabi_i2d>
  405c9e:	463a      	mov	r2, r7
  405ca0:	4643      	mov	r3, r8
  405ca2:	f002 f937 	bl	407f14 <__aeabi_dmul>
  405ca6:	4b99      	ldr	r3, [pc, #612]	; (405f0c <_dtoa_r+0xa74>)
  405ca8:	2200      	movs	r2, #0
  405caa:	f001 ff81 	bl	407bb0 <__adddf3>
  405cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405cb0:	4605      	mov	r5, r0
  405cb2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405cb6:	2b00      	cmp	r3, #0
  405cb8:	f000 813e 	beq.w	405f38 <_dtoa_r+0xaa0>
  405cbc:	9b02      	ldr	r3, [sp, #8]
  405cbe:	9315      	str	r3, [sp, #84]	; 0x54
  405cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405cc2:	9312      	str	r3, [sp, #72]	; 0x48
  405cc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405cc6:	2b00      	cmp	r3, #0
  405cc8:	f000 81fa 	beq.w	4060c0 <_dtoa_r+0xc28>
  405ccc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405cce:	4b8c      	ldr	r3, [pc, #560]	; (405f00 <_dtoa_r+0xa68>)
  405cd0:	498f      	ldr	r1, [pc, #572]	; (405f10 <_dtoa_r+0xa78>)
  405cd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405cd6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  405cda:	2000      	movs	r0, #0
  405cdc:	f002 fa44 	bl	408168 <__aeabi_ddiv>
  405ce0:	462a      	mov	r2, r5
  405ce2:	4633      	mov	r3, r6
  405ce4:	f001 ff62 	bl	407bac <__aeabi_dsub>
  405ce8:	4682      	mov	sl, r0
  405cea:	468b      	mov	fp, r1
  405cec:	4638      	mov	r0, r7
  405cee:	4641      	mov	r1, r8
  405cf0:	f002 fbc0 	bl	408474 <__aeabi_d2iz>
  405cf4:	4605      	mov	r5, r0
  405cf6:	f002 f8a7 	bl	407e48 <__aeabi_i2d>
  405cfa:	4602      	mov	r2, r0
  405cfc:	460b      	mov	r3, r1
  405cfe:	4638      	mov	r0, r7
  405d00:	4641      	mov	r1, r8
  405d02:	f001 ff53 	bl	407bac <__aeabi_dsub>
  405d06:	3530      	adds	r5, #48	; 0x30
  405d08:	fa5f f885 	uxtb.w	r8, r5
  405d0c:	9d04      	ldr	r5, [sp, #16]
  405d0e:	4606      	mov	r6, r0
  405d10:	460f      	mov	r7, r1
  405d12:	f885 8000 	strb.w	r8, [r5]
  405d16:	4602      	mov	r2, r0
  405d18:	460b      	mov	r3, r1
  405d1a:	4650      	mov	r0, sl
  405d1c:	4659      	mov	r1, fp
  405d1e:	3501      	adds	r5, #1
  405d20:	f002 fb88 	bl	408434 <__aeabi_dcmpgt>
  405d24:	2800      	cmp	r0, #0
  405d26:	d154      	bne.n	405dd2 <_dtoa_r+0x93a>
  405d28:	4632      	mov	r2, r6
  405d2a:	463b      	mov	r3, r7
  405d2c:	2000      	movs	r0, #0
  405d2e:	4976      	ldr	r1, [pc, #472]	; (405f08 <_dtoa_r+0xa70>)
  405d30:	f001 ff3c 	bl	407bac <__aeabi_dsub>
  405d34:	4602      	mov	r2, r0
  405d36:	460b      	mov	r3, r1
  405d38:	4650      	mov	r0, sl
  405d3a:	4659      	mov	r1, fp
  405d3c:	f002 fb7a 	bl	408434 <__aeabi_dcmpgt>
  405d40:	2800      	cmp	r0, #0
  405d42:	f040 8270 	bne.w	406226 <_dtoa_r+0xd8e>
  405d46:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405d48:	2a01      	cmp	r2, #1
  405d4a:	f000 8111 	beq.w	405f70 <_dtoa_r+0xad8>
  405d4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405d50:	9a04      	ldr	r2, [sp, #16]
  405d52:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405d56:	4413      	add	r3, r2
  405d58:	4699      	mov	r9, r3
  405d5a:	e00d      	b.n	405d78 <_dtoa_r+0x8e0>
  405d5c:	2000      	movs	r0, #0
  405d5e:	496a      	ldr	r1, [pc, #424]	; (405f08 <_dtoa_r+0xa70>)
  405d60:	f001 ff24 	bl	407bac <__aeabi_dsub>
  405d64:	4652      	mov	r2, sl
  405d66:	465b      	mov	r3, fp
  405d68:	f002 fb46 	bl	4083f8 <__aeabi_dcmplt>
  405d6c:	2800      	cmp	r0, #0
  405d6e:	f040 8258 	bne.w	406222 <_dtoa_r+0xd8a>
  405d72:	454d      	cmp	r5, r9
  405d74:	f000 80fa 	beq.w	405f6c <_dtoa_r+0xad4>
  405d78:	4650      	mov	r0, sl
  405d7a:	4659      	mov	r1, fp
  405d7c:	2200      	movs	r2, #0
  405d7e:	4b65      	ldr	r3, [pc, #404]	; (405f14 <_dtoa_r+0xa7c>)
  405d80:	f002 f8c8 	bl	407f14 <__aeabi_dmul>
  405d84:	2200      	movs	r2, #0
  405d86:	4b63      	ldr	r3, [pc, #396]	; (405f14 <_dtoa_r+0xa7c>)
  405d88:	4682      	mov	sl, r0
  405d8a:	468b      	mov	fp, r1
  405d8c:	4630      	mov	r0, r6
  405d8e:	4639      	mov	r1, r7
  405d90:	f002 f8c0 	bl	407f14 <__aeabi_dmul>
  405d94:	460f      	mov	r7, r1
  405d96:	4606      	mov	r6, r0
  405d98:	f002 fb6c 	bl	408474 <__aeabi_d2iz>
  405d9c:	4680      	mov	r8, r0
  405d9e:	f002 f853 	bl	407e48 <__aeabi_i2d>
  405da2:	4602      	mov	r2, r0
  405da4:	460b      	mov	r3, r1
  405da6:	4630      	mov	r0, r6
  405da8:	4639      	mov	r1, r7
  405daa:	f001 feff 	bl	407bac <__aeabi_dsub>
  405dae:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405db2:	fa5f f888 	uxtb.w	r8, r8
  405db6:	4652      	mov	r2, sl
  405db8:	465b      	mov	r3, fp
  405dba:	f805 8b01 	strb.w	r8, [r5], #1
  405dbe:	4606      	mov	r6, r0
  405dc0:	460f      	mov	r7, r1
  405dc2:	f002 fb19 	bl	4083f8 <__aeabi_dcmplt>
  405dc6:	4632      	mov	r2, r6
  405dc8:	463b      	mov	r3, r7
  405dca:	2800      	cmp	r0, #0
  405dcc:	d0c6      	beq.n	405d5c <_dtoa_r+0x8c4>
  405dce:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405dd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405dd4:	9302      	str	r3, [sp, #8]
  405dd6:	e523      	b.n	405820 <_dtoa_r+0x388>
  405dd8:	2300      	movs	r3, #0
  405dda:	930b      	str	r3, [sp, #44]	; 0x2c
  405ddc:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405dde:	2b00      	cmp	r3, #0
  405de0:	f340 80dc 	ble.w	405f9c <_dtoa_r+0xb04>
  405de4:	461f      	mov	r7, r3
  405de6:	461e      	mov	r6, r3
  405de8:	930f      	str	r3, [sp, #60]	; 0x3c
  405dea:	930a      	str	r3, [sp, #40]	; 0x28
  405dec:	e6f6      	b.n	405bdc <_dtoa_r+0x744>
  405dee:	2301      	movs	r3, #1
  405df0:	930b      	str	r3, [sp, #44]	; 0x2c
  405df2:	e7f3      	b.n	405ddc <_dtoa_r+0x944>
  405df4:	f1ba 0f00 	cmp.w	sl, #0
  405df8:	f47f ada8 	bne.w	40594c <_dtoa_r+0x4b4>
  405dfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405e00:	2b00      	cmp	r3, #0
  405e02:	f47f adba 	bne.w	40597a <_dtoa_r+0x4e2>
  405e06:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  405e0a:	0d3f      	lsrs	r7, r7, #20
  405e0c:	053f      	lsls	r7, r7, #20
  405e0e:	2f00      	cmp	r7, #0
  405e10:	f000 820d 	beq.w	40622e <_dtoa_r+0xd96>
  405e14:	9b08      	ldr	r3, [sp, #32]
  405e16:	3301      	adds	r3, #1
  405e18:	9308      	str	r3, [sp, #32]
  405e1a:	9b06      	ldr	r3, [sp, #24]
  405e1c:	3301      	adds	r3, #1
  405e1e:	9306      	str	r3, [sp, #24]
  405e20:	2301      	movs	r3, #1
  405e22:	930c      	str	r3, [sp, #48]	; 0x30
  405e24:	e5ab      	b.n	40597e <_dtoa_r+0x4e6>
  405e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e28:	2b00      	cmp	r3, #0
  405e2a:	f73f ac42 	bgt.w	4056b2 <_dtoa_r+0x21a>
  405e2e:	f040 8221 	bne.w	406274 <_dtoa_r+0xddc>
  405e32:	2200      	movs	r2, #0
  405e34:	4b38      	ldr	r3, [pc, #224]	; (405f18 <_dtoa_r+0xa80>)
  405e36:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405e3a:	f002 f86b 	bl	407f14 <__aeabi_dmul>
  405e3e:	4652      	mov	r2, sl
  405e40:	465b      	mov	r3, fp
  405e42:	f002 faed 	bl	408420 <__aeabi_dcmpge>
  405e46:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  405e4a:	4646      	mov	r6, r8
  405e4c:	2800      	cmp	r0, #0
  405e4e:	d041      	beq.n	405ed4 <_dtoa_r+0xa3c>
  405e50:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405e52:	9d04      	ldr	r5, [sp, #16]
  405e54:	43db      	mvns	r3, r3
  405e56:	9302      	str	r3, [sp, #8]
  405e58:	4641      	mov	r1, r8
  405e5a:	4620      	mov	r0, r4
  405e5c:	f000 fe64 	bl	406b28 <_Bfree>
  405e60:	2e00      	cmp	r6, #0
  405e62:	f43f acdd 	beq.w	405820 <_dtoa_r+0x388>
  405e66:	e6a7      	b.n	405bb8 <_dtoa_r+0x720>
  405e68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405e6a:	4649      	mov	r1, r9
  405e6c:	4620      	mov	r0, r4
  405e6e:	f000 ff91 	bl	406d94 <__pow5mult>
  405e72:	4681      	mov	r9, r0
  405e74:	e558      	b.n	405928 <_dtoa_r+0x490>
  405e76:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405e78:	2a00      	cmp	r2, #0
  405e7a:	f000 8187 	beq.w	40618c <_dtoa_r+0xcf4>
  405e7e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405e82:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405e84:	9d08      	ldr	r5, [sp, #32]
  405e86:	e4f2      	b.n	40586e <_dtoa_r+0x3d6>
  405e88:	f1ba 0f00 	cmp.w	sl, #0
  405e8c:	f47f ad75 	bne.w	40597a <_dtoa_r+0x4e2>
  405e90:	e7b4      	b.n	405dfc <_dtoa_r+0x964>
  405e92:	f000 fe53 	bl	406b3c <__multadd>
  405e96:	4647      	mov	r7, r8
  405e98:	4606      	mov	r6, r0
  405e9a:	4683      	mov	fp, r0
  405e9c:	e5be      	b.n	405a1c <_dtoa_r+0x584>
  405e9e:	4601      	mov	r1, r0
  405ea0:	4620      	mov	r0, r4
  405ea2:	9306      	str	r3, [sp, #24]
  405ea4:	f000 fe40 	bl	406b28 <_Bfree>
  405ea8:	2201      	movs	r2, #1
  405eaa:	9b06      	ldr	r3, [sp, #24]
  405eac:	e5e0      	b.n	405a70 <_dtoa_r+0x5d8>
  405eae:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405eb0:	2b02      	cmp	r3, #2
  405eb2:	f77f ad96 	ble.w	4059e2 <_dtoa_r+0x54a>
  405eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405eb8:	2b00      	cmp	r3, #0
  405eba:	d1c9      	bne.n	405e50 <_dtoa_r+0x9b8>
  405ebc:	4641      	mov	r1, r8
  405ebe:	2205      	movs	r2, #5
  405ec0:	4620      	mov	r0, r4
  405ec2:	f000 fe3b 	bl	406b3c <__multadd>
  405ec6:	4601      	mov	r1, r0
  405ec8:	4680      	mov	r8, r0
  405eca:	4648      	mov	r0, r9
  405ecc:	f001 f804 	bl	406ed8 <__mcmp>
  405ed0:	2800      	cmp	r0, #0
  405ed2:	ddbd      	ble.n	405e50 <_dtoa_r+0x9b8>
  405ed4:	9a02      	ldr	r2, [sp, #8]
  405ed6:	9904      	ldr	r1, [sp, #16]
  405ed8:	2331      	movs	r3, #49	; 0x31
  405eda:	3201      	adds	r2, #1
  405edc:	9202      	str	r2, [sp, #8]
  405ede:	700b      	strb	r3, [r1, #0]
  405ee0:	1c4d      	adds	r5, r1, #1
  405ee2:	e7b9      	b.n	405e58 <_dtoa_r+0x9c0>
  405ee4:	9a02      	ldr	r2, [sp, #8]
  405ee6:	3201      	adds	r2, #1
  405ee8:	9202      	str	r2, [sp, #8]
  405eea:	9a04      	ldr	r2, [sp, #16]
  405eec:	2331      	movs	r3, #49	; 0x31
  405eee:	7013      	strb	r3, [r2, #0]
  405ef0:	e652      	b.n	405b98 <_dtoa_r+0x700>
  405ef2:	2301      	movs	r3, #1
  405ef4:	930b      	str	r3, [sp, #44]	; 0x2c
  405ef6:	e666      	b.n	405bc6 <_dtoa_r+0x72e>
  405ef8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405efc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405efe:	e48f      	b.n	405820 <_dtoa_r+0x388>
  405f00:	004091f8 	.word	0x004091f8
  405f04:	004091d0 	.word	0x004091d0
  405f08:	3ff00000 	.word	0x3ff00000
  405f0c:	401c0000 	.word	0x401c0000
  405f10:	3fe00000 	.word	0x3fe00000
  405f14:	40240000 	.word	0x40240000
  405f18:	40140000 	.word	0x40140000
  405f1c:	4650      	mov	r0, sl
  405f1e:	f001 ff93 	bl	407e48 <__aeabi_i2d>
  405f22:	463a      	mov	r2, r7
  405f24:	4643      	mov	r3, r8
  405f26:	f001 fff5 	bl	407f14 <__aeabi_dmul>
  405f2a:	2200      	movs	r2, #0
  405f2c:	4bc1      	ldr	r3, [pc, #772]	; (406234 <_dtoa_r+0xd9c>)
  405f2e:	f001 fe3f 	bl	407bb0 <__adddf3>
  405f32:	4605      	mov	r5, r0
  405f34:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405f38:	4641      	mov	r1, r8
  405f3a:	2200      	movs	r2, #0
  405f3c:	4bbe      	ldr	r3, [pc, #760]	; (406238 <_dtoa_r+0xda0>)
  405f3e:	4638      	mov	r0, r7
  405f40:	f001 fe34 	bl	407bac <__aeabi_dsub>
  405f44:	462a      	mov	r2, r5
  405f46:	4633      	mov	r3, r6
  405f48:	4682      	mov	sl, r0
  405f4a:	468b      	mov	fp, r1
  405f4c:	f002 fa72 	bl	408434 <__aeabi_dcmpgt>
  405f50:	4680      	mov	r8, r0
  405f52:	2800      	cmp	r0, #0
  405f54:	f040 8110 	bne.w	406178 <_dtoa_r+0xce0>
  405f58:	462a      	mov	r2, r5
  405f5a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  405f5e:	4650      	mov	r0, sl
  405f60:	4659      	mov	r1, fp
  405f62:	f002 fa49 	bl	4083f8 <__aeabi_dcmplt>
  405f66:	b118      	cbz	r0, 405f70 <_dtoa_r+0xad8>
  405f68:	4646      	mov	r6, r8
  405f6a:	e771      	b.n	405e50 <_dtoa_r+0x9b8>
  405f6c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405f70:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  405f74:	f7ff bb8a 	b.w	40568c <_dtoa_r+0x1f4>
  405f78:	9804      	ldr	r0, [sp, #16]
  405f7a:	f7ff babb 	b.w	4054f4 <_dtoa_r+0x5c>
  405f7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405f80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405f82:	970c      	str	r7, [sp, #48]	; 0x30
  405f84:	1afb      	subs	r3, r7, r3
  405f86:	441a      	add	r2, r3
  405f88:	920d      	str	r2, [sp, #52]	; 0x34
  405f8a:	2700      	movs	r7, #0
  405f8c:	e469      	b.n	405862 <_dtoa_r+0x3ca>
  405f8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  405f92:	f04f 0a02 	mov.w	sl, #2
  405f96:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  405f9a:	e657      	b.n	405c4c <_dtoa_r+0x7b4>
  405f9c:	2100      	movs	r1, #0
  405f9e:	2301      	movs	r3, #1
  405fa0:	6461      	str	r1, [r4, #68]	; 0x44
  405fa2:	4620      	mov	r0, r4
  405fa4:	9325      	str	r3, [sp, #148]	; 0x94
  405fa6:	f000 fd99 	bl	406adc <_Balloc>
  405faa:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405fac:	9004      	str	r0, [sp, #16]
  405fae:	6420      	str	r0, [r4, #64]	; 0x40
  405fb0:	930a      	str	r3, [sp, #40]	; 0x28
  405fb2:	930f      	str	r3, [sp, #60]	; 0x3c
  405fb4:	e629      	b.n	405c0a <_dtoa_r+0x772>
  405fb6:	2a00      	cmp	r2, #0
  405fb8:	46d0      	mov	r8, sl
  405fba:	f8cd b018 	str.w	fp, [sp, #24]
  405fbe:	469a      	mov	sl, r3
  405fc0:	dd11      	ble.n	405fe6 <_dtoa_r+0xb4e>
  405fc2:	4649      	mov	r1, r9
  405fc4:	2201      	movs	r2, #1
  405fc6:	4620      	mov	r0, r4
  405fc8:	f000 ff34 	bl	406e34 <__lshift>
  405fcc:	4641      	mov	r1, r8
  405fce:	4681      	mov	r9, r0
  405fd0:	f000 ff82 	bl	406ed8 <__mcmp>
  405fd4:	2800      	cmp	r0, #0
  405fd6:	f340 8146 	ble.w	406266 <_dtoa_r+0xdce>
  405fda:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  405fde:	f000 8106 	beq.w	4061ee <_dtoa_r+0xd56>
  405fe2:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  405fe6:	46b3      	mov	fp, r6
  405fe8:	f887 a000 	strb.w	sl, [r7]
  405fec:	1c7d      	adds	r5, r7, #1
  405fee:	9e06      	ldr	r6, [sp, #24]
  405ff0:	e5d2      	b.n	405b98 <_dtoa_r+0x700>
  405ff2:	d104      	bne.n	405ffe <_dtoa_r+0xb66>
  405ff4:	f01a 0f01 	tst.w	sl, #1
  405ff8:	d001      	beq.n	405ffe <_dtoa_r+0xb66>
  405ffa:	e5bd      	b.n	405b78 <_dtoa_r+0x6e0>
  405ffc:	4615      	mov	r5, r2
  405ffe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406002:	2b30      	cmp	r3, #48	; 0x30
  406004:	f105 32ff 	add.w	r2, r5, #4294967295
  406008:	d0f8      	beq.n	405ffc <_dtoa_r+0xb64>
  40600a:	e5c5      	b.n	405b98 <_dtoa_r+0x700>
  40600c:	9904      	ldr	r1, [sp, #16]
  40600e:	2230      	movs	r2, #48	; 0x30
  406010:	700a      	strb	r2, [r1, #0]
  406012:	9a02      	ldr	r2, [sp, #8]
  406014:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406018:	3201      	adds	r2, #1
  40601a:	9202      	str	r2, [sp, #8]
  40601c:	f7ff bbfc 	b.w	405818 <_dtoa_r+0x380>
  406020:	f000 80bb 	beq.w	40619a <_dtoa_r+0xd02>
  406024:	9b02      	ldr	r3, [sp, #8]
  406026:	425d      	negs	r5, r3
  406028:	4b84      	ldr	r3, [pc, #528]	; (40623c <_dtoa_r+0xda4>)
  40602a:	f005 020f 	and.w	r2, r5, #15
  40602e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406032:	e9d3 2300 	ldrd	r2, r3, [r3]
  406036:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40603a:	f001 ff6b 	bl	407f14 <__aeabi_dmul>
  40603e:	112d      	asrs	r5, r5, #4
  406040:	4607      	mov	r7, r0
  406042:	4688      	mov	r8, r1
  406044:	f000 812c 	beq.w	4062a0 <_dtoa_r+0xe08>
  406048:	4e7d      	ldr	r6, [pc, #500]	; (406240 <_dtoa_r+0xda8>)
  40604a:	f04f 0a02 	mov.w	sl, #2
  40604e:	07eb      	lsls	r3, r5, #31
  406050:	d509      	bpl.n	406066 <_dtoa_r+0xbce>
  406052:	4638      	mov	r0, r7
  406054:	4641      	mov	r1, r8
  406056:	e9d6 2300 	ldrd	r2, r3, [r6]
  40605a:	f001 ff5b 	bl	407f14 <__aeabi_dmul>
  40605e:	f10a 0a01 	add.w	sl, sl, #1
  406062:	4607      	mov	r7, r0
  406064:	4688      	mov	r8, r1
  406066:	106d      	asrs	r5, r5, #1
  406068:	f106 0608 	add.w	r6, r6, #8
  40606c:	d1ef      	bne.n	40604e <_dtoa_r+0xbb6>
  40606e:	e608      	b.n	405c82 <_dtoa_r+0x7ea>
  406070:	6871      	ldr	r1, [r6, #4]
  406072:	4620      	mov	r0, r4
  406074:	f000 fd32 	bl	406adc <_Balloc>
  406078:	6933      	ldr	r3, [r6, #16]
  40607a:	3302      	adds	r3, #2
  40607c:	009a      	lsls	r2, r3, #2
  40607e:	4605      	mov	r5, r0
  406080:	f106 010c 	add.w	r1, r6, #12
  406084:	300c      	adds	r0, #12
  406086:	f000 fc8b 	bl	4069a0 <memcpy>
  40608a:	4629      	mov	r1, r5
  40608c:	2201      	movs	r2, #1
  40608e:	4620      	mov	r0, r4
  406090:	f000 fed0 	bl	406e34 <__lshift>
  406094:	9006      	str	r0, [sp, #24]
  406096:	e4b5      	b.n	405a04 <_dtoa_r+0x56c>
  406098:	2b39      	cmp	r3, #57	; 0x39
  40609a:	f8cd b018 	str.w	fp, [sp, #24]
  40609e:	46d0      	mov	r8, sl
  4060a0:	f000 80a5 	beq.w	4061ee <_dtoa_r+0xd56>
  4060a4:	f103 0a01 	add.w	sl, r3, #1
  4060a8:	46b3      	mov	fp, r6
  4060aa:	f887 a000 	strb.w	sl, [r7]
  4060ae:	1c7d      	adds	r5, r7, #1
  4060b0:	9e06      	ldr	r6, [sp, #24]
  4060b2:	e571      	b.n	405b98 <_dtoa_r+0x700>
  4060b4:	465a      	mov	r2, fp
  4060b6:	46d0      	mov	r8, sl
  4060b8:	46b3      	mov	fp, r6
  4060ba:	469a      	mov	sl, r3
  4060bc:	4616      	mov	r6, r2
  4060be:	e54f      	b.n	405b60 <_dtoa_r+0x6c8>
  4060c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4060c2:	495e      	ldr	r1, [pc, #376]	; (40623c <_dtoa_r+0xda4>)
  4060c4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4060c8:	462a      	mov	r2, r5
  4060ca:	4633      	mov	r3, r6
  4060cc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4060d0:	f001 ff20 	bl	407f14 <__aeabi_dmul>
  4060d4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4060d8:	4638      	mov	r0, r7
  4060da:	4641      	mov	r1, r8
  4060dc:	f002 f9ca 	bl	408474 <__aeabi_d2iz>
  4060e0:	4605      	mov	r5, r0
  4060e2:	f001 feb1 	bl	407e48 <__aeabi_i2d>
  4060e6:	460b      	mov	r3, r1
  4060e8:	4602      	mov	r2, r0
  4060ea:	4641      	mov	r1, r8
  4060ec:	4638      	mov	r0, r7
  4060ee:	f001 fd5d 	bl	407bac <__aeabi_dsub>
  4060f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4060f4:	460f      	mov	r7, r1
  4060f6:	9904      	ldr	r1, [sp, #16]
  4060f8:	3530      	adds	r5, #48	; 0x30
  4060fa:	2b01      	cmp	r3, #1
  4060fc:	700d      	strb	r5, [r1, #0]
  4060fe:	4606      	mov	r6, r0
  406100:	f101 0501 	add.w	r5, r1, #1
  406104:	d026      	beq.n	406154 <_dtoa_r+0xcbc>
  406106:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406108:	9a04      	ldr	r2, [sp, #16]
  40610a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 406248 <_dtoa_r+0xdb0>
  40610e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  406112:	4413      	add	r3, r2
  406114:	f04f 0a00 	mov.w	sl, #0
  406118:	4699      	mov	r9, r3
  40611a:	4652      	mov	r2, sl
  40611c:	465b      	mov	r3, fp
  40611e:	4630      	mov	r0, r6
  406120:	4639      	mov	r1, r7
  406122:	f001 fef7 	bl	407f14 <__aeabi_dmul>
  406126:	460f      	mov	r7, r1
  406128:	4606      	mov	r6, r0
  40612a:	f002 f9a3 	bl	408474 <__aeabi_d2iz>
  40612e:	4680      	mov	r8, r0
  406130:	f001 fe8a 	bl	407e48 <__aeabi_i2d>
  406134:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406138:	4602      	mov	r2, r0
  40613a:	460b      	mov	r3, r1
  40613c:	4630      	mov	r0, r6
  40613e:	4639      	mov	r1, r7
  406140:	f001 fd34 	bl	407bac <__aeabi_dsub>
  406144:	f805 8b01 	strb.w	r8, [r5], #1
  406148:	454d      	cmp	r5, r9
  40614a:	4606      	mov	r6, r0
  40614c:	460f      	mov	r7, r1
  40614e:	d1e4      	bne.n	40611a <_dtoa_r+0xc82>
  406150:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406154:	4b3b      	ldr	r3, [pc, #236]	; (406244 <_dtoa_r+0xdac>)
  406156:	2200      	movs	r2, #0
  406158:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40615c:	f001 fd28 	bl	407bb0 <__adddf3>
  406160:	4632      	mov	r2, r6
  406162:	463b      	mov	r3, r7
  406164:	f002 f948 	bl	4083f8 <__aeabi_dcmplt>
  406168:	2800      	cmp	r0, #0
  40616a:	d046      	beq.n	4061fa <_dtoa_r+0xd62>
  40616c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40616e:	9302      	str	r3, [sp, #8]
  406170:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406174:	f7ff bb43 	b.w	4057fe <_dtoa_r+0x366>
  406178:	f04f 0800 	mov.w	r8, #0
  40617c:	4646      	mov	r6, r8
  40617e:	e6a9      	b.n	405ed4 <_dtoa_r+0xa3c>
  406180:	9b08      	ldr	r3, [sp, #32]
  406182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406184:	1a9d      	subs	r5, r3, r2
  406186:	2300      	movs	r3, #0
  406188:	f7ff bb71 	b.w	40586e <_dtoa_r+0x3d6>
  40618c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40618e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406190:	9d08      	ldr	r5, [sp, #32]
  406192:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  406196:	f7ff bb6a 	b.w	40586e <_dtoa_r+0x3d6>
  40619a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40619e:	f04f 0a02 	mov.w	sl, #2
  4061a2:	e56e      	b.n	405c82 <_dtoa_r+0x7ea>
  4061a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4061a6:	2b00      	cmp	r3, #0
  4061a8:	f43f aeb8 	beq.w	405f1c <_dtoa_r+0xa84>
  4061ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4061ae:	2b00      	cmp	r3, #0
  4061b0:	f77f aede 	ble.w	405f70 <_dtoa_r+0xad8>
  4061b4:	2200      	movs	r2, #0
  4061b6:	4b24      	ldr	r3, [pc, #144]	; (406248 <_dtoa_r+0xdb0>)
  4061b8:	4638      	mov	r0, r7
  4061ba:	4641      	mov	r1, r8
  4061bc:	f001 feaa 	bl	407f14 <__aeabi_dmul>
  4061c0:	4607      	mov	r7, r0
  4061c2:	4688      	mov	r8, r1
  4061c4:	f10a 0001 	add.w	r0, sl, #1
  4061c8:	f001 fe3e 	bl	407e48 <__aeabi_i2d>
  4061cc:	463a      	mov	r2, r7
  4061ce:	4643      	mov	r3, r8
  4061d0:	f001 fea0 	bl	407f14 <__aeabi_dmul>
  4061d4:	2200      	movs	r2, #0
  4061d6:	4b17      	ldr	r3, [pc, #92]	; (406234 <_dtoa_r+0xd9c>)
  4061d8:	f001 fcea 	bl	407bb0 <__adddf3>
  4061dc:	9a02      	ldr	r2, [sp, #8]
  4061de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4061e0:	9312      	str	r3, [sp, #72]	; 0x48
  4061e2:	3a01      	subs	r2, #1
  4061e4:	4605      	mov	r5, r0
  4061e6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4061ea:	9215      	str	r2, [sp, #84]	; 0x54
  4061ec:	e56a      	b.n	405cc4 <_dtoa_r+0x82c>
  4061ee:	2239      	movs	r2, #57	; 0x39
  4061f0:	46b3      	mov	fp, r6
  4061f2:	703a      	strb	r2, [r7, #0]
  4061f4:	9e06      	ldr	r6, [sp, #24]
  4061f6:	1c7d      	adds	r5, r7, #1
  4061f8:	e4c0      	b.n	405b7c <_dtoa_r+0x6e4>
  4061fa:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4061fe:	2000      	movs	r0, #0
  406200:	4910      	ldr	r1, [pc, #64]	; (406244 <_dtoa_r+0xdac>)
  406202:	f001 fcd3 	bl	407bac <__aeabi_dsub>
  406206:	4632      	mov	r2, r6
  406208:	463b      	mov	r3, r7
  40620a:	f002 f913 	bl	408434 <__aeabi_dcmpgt>
  40620e:	b908      	cbnz	r0, 406214 <_dtoa_r+0xd7c>
  406210:	e6ae      	b.n	405f70 <_dtoa_r+0xad8>
  406212:	4615      	mov	r5, r2
  406214:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406218:	2b30      	cmp	r3, #48	; 0x30
  40621a:	f105 32ff 	add.w	r2, r5, #4294967295
  40621e:	d0f8      	beq.n	406212 <_dtoa_r+0xd7a>
  406220:	e5d7      	b.n	405dd2 <_dtoa_r+0x93a>
  406222:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406226:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406228:	9302      	str	r3, [sp, #8]
  40622a:	f7ff bae8 	b.w	4057fe <_dtoa_r+0x366>
  40622e:	970c      	str	r7, [sp, #48]	; 0x30
  406230:	f7ff bba5 	b.w	40597e <_dtoa_r+0x4e6>
  406234:	401c0000 	.word	0x401c0000
  406238:	40140000 	.word	0x40140000
  40623c:	004091f8 	.word	0x004091f8
  406240:	004091d0 	.word	0x004091d0
  406244:	3fe00000 	.word	0x3fe00000
  406248:	40240000 	.word	0x40240000
  40624c:	2b39      	cmp	r3, #57	; 0x39
  40624e:	f8cd b018 	str.w	fp, [sp, #24]
  406252:	46d0      	mov	r8, sl
  406254:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406258:	469a      	mov	sl, r3
  40625a:	d0c8      	beq.n	4061ee <_dtoa_r+0xd56>
  40625c:	f1bb 0f00 	cmp.w	fp, #0
  406260:	f73f aebf 	bgt.w	405fe2 <_dtoa_r+0xb4a>
  406264:	e6bf      	b.n	405fe6 <_dtoa_r+0xb4e>
  406266:	f47f aebe 	bne.w	405fe6 <_dtoa_r+0xb4e>
  40626a:	f01a 0f01 	tst.w	sl, #1
  40626e:	f43f aeba 	beq.w	405fe6 <_dtoa_r+0xb4e>
  406272:	e6b2      	b.n	405fda <_dtoa_r+0xb42>
  406274:	f04f 0800 	mov.w	r8, #0
  406278:	4646      	mov	r6, r8
  40627a:	e5e9      	b.n	405e50 <_dtoa_r+0x9b8>
  40627c:	4631      	mov	r1, r6
  40627e:	2300      	movs	r3, #0
  406280:	220a      	movs	r2, #10
  406282:	4620      	mov	r0, r4
  406284:	f000 fc5a 	bl	406b3c <__multadd>
  406288:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40628a:	2b00      	cmp	r3, #0
  40628c:	4606      	mov	r6, r0
  40628e:	dd0a      	ble.n	4062a6 <_dtoa_r+0xe0e>
  406290:	930a      	str	r3, [sp, #40]	; 0x28
  406292:	f7ff bbaa 	b.w	4059ea <_dtoa_r+0x552>
  406296:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406298:	2b02      	cmp	r3, #2
  40629a:	dc23      	bgt.n	4062e4 <_dtoa_r+0xe4c>
  40629c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40629e:	e43b      	b.n	405b18 <_dtoa_r+0x680>
  4062a0:	f04f 0a02 	mov.w	sl, #2
  4062a4:	e4ed      	b.n	405c82 <_dtoa_r+0x7ea>
  4062a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4062a8:	2b02      	cmp	r3, #2
  4062aa:	dc1b      	bgt.n	4062e4 <_dtoa_r+0xe4c>
  4062ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4062ae:	e7ef      	b.n	406290 <_dtoa_r+0xdf8>
  4062b0:	2500      	movs	r5, #0
  4062b2:	6465      	str	r5, [r4, #68]	; 0x44
  4062b4:	4629      	mov	r1, r5
  4062b6:	4620      	mov	r0, r4
  4062b8:	f000 fc10 	bl	406adc <_Balloc>
  4062bc:	f04f 33ff 	mov.w	r3, #4294967295
  4062c0:	930a      	str	r3, [sp, #40]	; 0x28
  4062c2:	930f      	str	r3, [sp, #60]	; 0x3c
  4062c4:	2301      	movs	r3, #1
  4062c6:	9004      	str	r0, [sp, #16]
  4062c8:	9525      	str	r5, [sp, #148]	; 0x94
  4062ca:	6420      	str	r0, [r4, #64]	; 0x40
  4062cc:	930b      	str	r3, [sp, #44]	; 0x2c
  4062ce:	f7ff b9dd 	b.w	40568c <_dtoa_r+0x1f4>
  4062d2:	2501      	movs	r5, #1
  4062d4:	f7ff b9a5 	b.w	405622 <_dtoa_r+0x18a>
  4062d8:	f43f ab69 	beq.w	4059ae <_dtoa_r+0x516>
  4062dc:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4062e0:	f7ff bbf9 	b.w	405ad6 <_dtoa_r+0x63e>
  4062e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4062e6:	930a      	str	r3, [sp, #40]	; 0x28
  4062e8:	e5e5      	b.n	405eb6 <_dtoa_r+0xa1e>
  4062ea:	bf00      	nop

004062ec <__libc_fini_array>:
  4062ec:	b538      	push	{r3, r4, r5, lr}
  4062ee:	4c0a      	ldr	r4, [pc, #40]	; (406318 <__libc_fini_array+0x2c>)
  4062f0:	4d0a      	ldr	r5, [pc, #40]	; (40631c <__libc_fini_array+0x30>)
  4062f2:	1b64      	subs	r4, r4, r5
  4062f4:	10a4      	asrs	r4, r4, #2
  4062f6:	d00a      	beq.n	40630e <__libc_fini_array+0x22>
  4062f8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4062fc:	3b01      	subs	r3, #1
  4062fe:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  406302:	3c01      	subs	r4, #1
  406304:	f855 3904 	ldr.w	r3, [r5], #-4
  406308:	4798      	blx	r3
  40630a:	2c00      	cmp	r4, #0
  40630c:	d1f9      	bne.n	406302 <__libc_fini_array+0x16>
  40630e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406312:	f003 b86f 	b.w	4093f4 <_fini>
  406316:	bf00      	nop
  406318:	00409404 	.word	0x00409404
  40631c:	00409400 	.word	0x00409400

00406320 <_localeconv_r>:
  406320:	4a04      	ldr	r2, [pc, #16]	; (406334 <_localeconv_r+0x14>)
  406322:	4b05      	ldr	r3, [pc, #20]	; (406338 <_localeconv_r+0x18>)
  406324:	6812      	ldr	r2, [r2, #0]
  406326:	6b50      	ldr	r0, [r2, #52]	; 0x34
  406328:	2800      	cmp	r0, #0
  40632a:	bf08      	it	eq
  40632c:	4618      	moveq	r0, r3
  40632e:	30f0      	adds	r0, #240	; 0xf0
  406330:	4770      	bx	lr
  406332:	bf00      	nop
  406334:	20000010 	.word	0x20000010
  406338:	20000850 	.word	0x20000850

0040633c <_malloc_r>:
  40633c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406340:	f101 060b 	add.w	r6, r1, #11
  406344:	2e16      	cmp	r6, #22
  406346:	b083      	sub	sp, #12
  406348:	4605      	mov	r5, r0
  40634a:	f240 809e 	bls.w	40648a <_malloc_r+0x14e>
  40634e:	f036 0607 	bics.w	r6, r6, #7
  406352:	f100 80bd 	bmi.w	4064d0 <_malloc_r+0x194>
  406356:	42b1      	cmp	r1, r6
  406358:	f200 80ba 	bhi.w	4064d0 <_malloc_r+0x194>
  40635c:	f000 fbba 	bl	406ad4 <__malloc_lock>
  406360:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  406364:	f0c0 8293 	bcc.w	40688e <_malloc_r+0x552>
  406368:	0a73      	lsrs	r3, r6, #9
  40636a:	f000 80b8 	beq.w	4064de <_malloc_r+0x1a2>
  40636e:	2b04      	cmp	r3, #4
  406370:	f200 8179 	bhi.w	406666 <_malloc_r+0x32a>
  406374:	09b3      	lsrs	r3, r6, #6
  406376:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40637a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40637e:	00c3      	lsls	r3, r0, #3
  406380:	4fbf      	ldr	r7, [pc, #764]	; (406680 <_malloc_r+0x344>)
  406382:	443b      	add	r3, r7
  406384:	f1a3 0108 	sub.w	r1, r3, #8
  406388:	685c      	ldr	r4, [r3, #4]
  40638a:	42a1      	cmp	r1, r4
  40638c:	d106      	bne.n	40639c <_malloc_r+0x60>
  40638e:	e00c      	b.n	4063aa <_malloc_r+0x6e>
  406390:	2a00      	cmp	r2, #0
  406392:	f280 80aa 	bge.w	4064ea <_malloc_r+0x1ae>
  406396:	68e4      	ldr	r4, [r4, #12]
  406398:	42a1      	cmp	r1, r4
  40639a:	d006      	beq.n	4063aa <_malloc_r+0x6e>
  40639c:	6863      	ldr	r3, [r4, #4]
  40639e:	f023 0303 	bic.w	r3, r3, #3
  4063a2:	1b9a      	subs	r2, r3, r6
  4063a4:	2a0f      	cmp	r2, #15
  4063a6:	ddf3      	ble.n	406390 <_malloc_r+0x54>
  4063a8:	4670      	mov	r0, lr
  4063aa:	693c      	ldr	r4, [r7, #16]
  4063ac:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 406694 <_malloc_r+0x358>
  4063b0:	4574      	cmp	r4, lr
  4063b2:	f000 81ab 	beq.w	40670c <_malloc_r+0x3d0>
  4063b6:	6863      	ldr	r3, [r4, #4]
  4063b8:	f023 0303 	bic.w	r3, r3, #3
  4063bc:	1b9a      	subs	r2, r3, r6
  4063be:	2a0f      	cmp	r2, #15
  4063c0:	f300 8190 	bgt.w	4066e4 <_malloc_r+0x3a8>
  4063c4:	2a00      	cmp	r2, #0
  4063c6:	f8c7 e014 	str.w	lr, [r7, #20]
  4063ca:	f8c7 e010 	str.w	lr, [r7, #16]
  4063ce:	f280 809d 	bge.w	40650c <_malloc_r+0x1d0>
  4063d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4063d6:	f080 8161 	bcs.w	40669c <_malloc_r+0x360>
  4063da:	08db      	lsrs	r3, r3, #3
  4063dc:	f103 0c01 	add.w	ip, r3, #1
  4063e0:	1099      	asrs	r1, r3, #2
  4063e2:	687a      	ldr	r2, [r7, #4]
  4063e4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4063e8:	f8c4 8008 	str.w	r8, [r4, #8]
  4063ec:	2301      	movs	r3, #1
  4063ee:	408b      	lsls	r3, r1
  4063f0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4063f4:	4313      	orrs	r3, r2
  4063f6:	3908      	subs	r1, #8
  4063f8:	60e1      	str	r1, [r4, #12]
  4063fa:	607b      	str	r3, [r7, #4]
  4063fc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  406400:	f8c8 400c 	str.w	r4, [r8, #12]
  406404:	1082      	asrs	r2, r0, #2
  406406:	2401      	movs	r4, #1
  406408:	4094      	lsls	r4, r2
  40640a:	429c      	cmp	r4, r3
  40640c:	f200 808b 	bhi.w	406526 <_malloc_r+0x1ea>
  406410:	421c      	tst	r4, r3
  406412:	d106      	bne.n	406422 <_malloc_r+0xe6>
  406414:	f020 0003 	bic.w	r0, r0, #3
  406418:	0064      	lsls	r4, r4, #1
  40641a:	421c      	tst	r4, r3
  40641c:	f100 0004 	add.w	r0, r0, #4
  406420:	d0fa      	beq.n	406418 <_malloc_r+0xdc>
  406422:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  406426:	46cc      	mov	ip, r9
  406428:	4680      	mov	r8, r0
  40642a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40642e:	459c      	cmp	ip, r3
  406430:	d107      	bne.n	406442 <_malloc_r+0x106>
  406432:	e16d      	b.n	406710 <_malloc_r+0x3d4>
  406434:	2a00      	cmp	r2, #0
  406436:	f280 817b 	bge.w	406730 <_malloc_r+0x3f4>
  40643a:	68db      	ldr	r3, [r3, #12]
  40643c:	459c      	cmp	ip, r3
  40643e:	f000 8167 	beq.w	406710 <_malloc_r+0x3d4>
  406442:	6859      	ldr	r1, [r3, #4]
  406444:	f021 0103 	bic.w	r1, r1, #3
  406448:	1b8a      	subs	r2, r1, r6
  40644a:	2a0f      	cmp	r2, #15
  40644c:	ddf2      	ble.n	406434 <_malloc_r+0xf8>
  40644e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  406452:	f8d3 8008 	ldr.w	r8, [r3, #8]
  406456:	9300      	str	r3, [sp, #0]
  406458:	199c      	adds	r4, r3, r6
  40645a:	4628      	mov	r0, r5
  40645c:	f046 0601 	orr.w	r6, r6, #1
  406460:	f042 0501 	orr.w	r5, r2, #1
  406464:	605e      	str	r6, [r3, #4]
  406466:	f8c8 c00c 	str.w	ip, [r8, #12]
  40646a:	f8cc 8008 	str.w	r8, [ip, #8]
  40646e:	617c      	str	r4, [r7, #20]
  406470:	613c      	str	r4, [r7, #16]
  406472:	f8c4 e00c 	str.w	lr, [r4, #12]
  406476:	f8c4 e008 	str.w	lr, [r4, #8]
  40647a:	6065      	str	r5, [r4, #4]
  40647c:	505a      	str	r2, [r3, r1]
  40647e:	f000 fb2b 	bl	406ad8 <__malloc_unlock>
  406482:	9b00      	ldr	r3, [sp, #0]
  406484:	f103 0408 	add.w	r4, r3, #8
  406488:	e01e      	b.n	4064c8 <_malloc_r+0x18c>
  40648a:	2910      	cmp	r1, #16
  40648c:	d820      	bhi.n	4064d0 <_malloc_r+0x194>
  40648e:	f000 fb21 	bl	406ad4 <__malloc_lock>
  406492:	2610      	movs	r6, #16
  406494:	2318      	movs	r3, #24
  406496:	2002      	movs	r0, #2
  406498:	4f79      	ldr	r7, [pc, #484]	; (406680 <_malloc_r+0x344>)
  40649a:	443b      	add	r3, r7
  40649c:	f1a3 0208 	sub.w	r2, r3, #8
  4064a0:	685c      	ldr	r4, [r3, #4]
  4064a2:	4294      	cmp	r4, r2
  4064a4:	f000 813d 	beq.w	406722 <_malloc_r+0x3e6>
  4064a8:	6863      	ldr	r3, [r4, #4]
  4064aa:	68e1      	ldr	r1, [r4, #12]
  4064ac:	68a6      	ldr	r6, [r4, #8]
  4064ae:	f023 0303 	bic.w	r3, r3, #3
  4064b2:	4423      	add	r3, r4
  4064b4:	4628      	mov	r0, r5
  4064b6:	685a      	ldr	r2, [r3, #4]
  4064b8:	60f1      	str	r1, [r6, #12]
  4064ba:	f042 0201 	orr.w	r2, r2, #1
  4064be:	608e      	str	r6, [r1, #8]
  4064c0:	605a      	str	r2, [r3, #4]
  4064c2:	f000 fb09 	bl	406ad8 <__malloc_unlock>
  4064c6:	3408      	adds	r4, #8
  4064c8:	4620      	mov	r0, r4
  4064ca:	b003      	add	sp, #12
  4064cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064d0:	2400      	movs	r4, #0
  4064d2:	230c      	movs	r3, #12
  4064d4:	4620      	mov	r0, r4
  4064d6:	602b      	str	r3, [r5, #0]
  4064d8:	b003      	add	sp, #12
  4064da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064de:	2040      	movs	r0, #64	; 0x40
  4064e0:	f44f 7300 	mov.w	r3, #512	; 0x200
  4064e4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4064e8:	e74a      	b.n	406380 <_malloc_r+0x44>
  4064ea:	4423      	add	r3, r4
  4064ec:	68e1      	ldr	r1, [r4, #12]
  4064ee:	685a      	ldr	r2, [r3, #4]
  4064f0:	68a6      	ldr	r6, [r4, #8]
  4064f2:	f042 0201 	orr.w	r2, r2, #1
  4064f6:	60f1      	str	r1, [r6, #12]
  4064f8:	4628      	mov	r0, r5
  4064fa:	608e      	str	r6, [r1, #8]
  4064fc:	605a      	str	r2, [r3, #4]
  4064fe:	f000 faeb 	bl	406ad8 <__malloc_unlock>
  406502:	3408      	adds	r4, #8
  406504:	4620      	mov	r0, r4
  406506:	b003      	add	sp, #12
  406508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40650c:	4423      	add	r3, r4
  40650e:	4628      	mov	r0, r5
  406510:	685a      	ldr	r2, [r3, #4]
  406512:	f042 0201 	orr.w	r2, r2, #1
  406516:	605a      	str	r2, [r3, #4]
  406518:	f000 fade 	bl	406ad8 <__malloc_unlock>
  40651c:	3408      	adds	r4, #8
  40651e:	4620      	mov	r0, r4
  406520:	b003      	add	sp, #12
  406522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406526:	68bc      	ldr	r4, [r7, #8]
  406528:	6863      	ldr	r3, [r4, #4]
  40652a:	f023 0803 	bic.w	r8, r3, #3
  40652e:	45b0      	cmp	r8, r6
  406530:	d304      	bcc.n	40653c <_malloc_r+0x200>
  406532:	eba8 0306 	sub.w	r3, r8, r6
  406536:	2b0f      	cmp	r3, #15
  406538:	f300 8085 	bgt.w	406646 <_malloc_r+0x30a>
  40653c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 406698 <_malloc_r+0x35c>
  406540:	4b50      	ldr	r3, [pc, #320]	; (406684 <_malloc_r+0x348>)
  406542:	f8d9 2000 	ldr.w	r2, [r9]
  406546:	681b      	ldr	r3, [r3, #0]
  406548:	3201      	adds	r2, #1
  40654a:	4433      	add	r3, r6
  40654c:	eb04 0a08 	add.w	sl, r4, r8
  406550:	f000 8155 	beq.w	4067fe <_malloc_r+0x4c2>
  406554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  406558:	330f      	adds	r3, #15
  40655a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40655e:	f02b 0b0f 	bic.w	fp, fp, #15
  406562:	4659      	mov	r1, fp
  406564:	4628      	mov	r0, r5
  406566:	f000 fdb3 	bl	4070d0 <_sbrk_r>
  40656a:	1c41      	adds	r1, r0, #1
  40656c:	4602      	mov	r2, r0
  40656e:	f000 80fc 	beq.w	40676a <_malloc_r+0x42e>
  406572:	4582      	cmp	sl, r0
  406574:	f200 80f7 	bhi.w	406766 <_malloc_r+0x42a>
  406578:	4b43      	ldr	r3, [pc, #268]	; (406688 <_malloc_r+0x34c>)
  40657a:	6819      	ldr	r1, [r3, #0]
  40657c:	4459      	add	r1, fp
  40657e:	6019      	str	r1, [r3, #0]
  406580:	f000 814d 	beq.w	40681e <_malloc_r+0x4e2>
  406584:	f8d9 0000 	ldr.w	r0, [r9]
  406588:	3001      	adds	r0, #1
  40658a:	bf1b      	ittet	ne
  40658c:	eba2 0a0a 	subne.w	sl, r2, sl
  406590:	4451      	addne	r1, sl
  406592:	f8c9 2000 	streq.w	r2, [r9]
  406596:	6019      	strne	r1, [r3, #0]
  406598:	f012 0107 	ands.w	r1, r2, #7
  40659c:	f000 8115 	beq.w	4067ca <_malloc_r+0x48e>
  4065a0:	f1c1 0008 	rsb	r0, r1, #8
  4065a4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4065a8:	4402      	add	r2, r0
  4065aa:	3108      	adds	r1, #8
  4065ac:	eb02 090b 	add.w	r9, r2, fp
  4065b0:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4065b4:	eba1 0909 	sub.w	r9, r1, r9
  4065b8:	4649      	mov	r1, r9
  4065ba:	4628      	mov	r0, r5
  4065bc:	9301      	str	r3, [sp, #4]
  4065be:	9200      	str	r2, [sp, #0]
  4065c0:	f000 fd86 	bl	4070d0 <_sbrk_r>
  4065c4:	1c43      	adds	r3, r0, #1
  4065c6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4065ca:	f000 8143 	beq.w	406854 <_malloc_r+0x518>
  4065ce:	1a80      	subs	r0, r0, r2
  4065d0:	4448      	add	r0, r9
  4065d2:	f040 0001 	orr.w	r0, r0, #1
  4065d6:	6819      	ldr	r1, [r3, #0]
  4065d8:	60ba      	str	r2, [r7, #8]
  4065da:	4449      	add	r1, r9
  4065dc:	42bc      	cmp	r4, r7
  4065de:	6050      	str	r0, [r2, #4]
  4065e0:	6019      	str	r1, [r3, #0]
  4065e2:	d017      	beq.n	406614 <_malloc_r+0x2d8>
  4065e4:	f1b8 0f0f 	cmp.w	r8, #15
  4065e8:	f240 80fb 	bls.w	4067e2 <_malloc_r+0x4a6>
  4065ec:	6860      	ldr	r0, [r4, #4]
  4065ee:	f1a8 020c 	sub.w	r2, r8, #12
  4065f2:	f022 0207 	bic.w	r2, r2, #7
  4065f6:	eb04 0e02 	add.w	lr, r4, r2
  4065fa:	f000 0001 	and.w	r0, r0, #1
  4065fe:	f04f 0c05 	mov.w	ip, #5
  406602:	4310      	orrs	r0, r2
  406604:	2a0f      	cmp	r2, #15
  406606:	6060      	str	r0, [r4, #4]
  406608:	f8ce c004 	str.w	ip, [lr, #4]
  40660c:	f8ce c008 	str.w	ip, [lr, #8]
  406610:	f200 8117 	bhi.w	406842 <_malloc_r+0x506>
  406614:	4b1d      	ldr	r3, [pc, #116]	; (40668c <_malloc_r+0x350>)
  406616:	68bc      	ldr	r4, [r7, #8]
  406618:	681a      	ldr	r2, [r3, #0]
  40661a:	4291      	cmp	r1, r2
  40661c:	bf88      	it	hi
  40661e:	6019      	strhi	r1, [r3, #0]
  406620:	4b1b      	ldr	r3, [pc, #108]	; (406690 <_malloc_r+0x354>)
  406622:	681a      	ldr	r2, [r3, #0]
  406624:	4291      	cmp	r1, r2
  406626:	6862      	ldr	r2, [r4, #4]
  406628:	bf88      	it	hi
  40662a:	6019      	strhi	r1, [r3, #0]
  40662c:	f022 0203 	bic.w	r2, r2, #3
  406630:	4296      	cmp	r6, r2
  406632:	eba2 0306 	sub.w	r3, r2, r6
  406636:	d801      	bhi.n	40663c <_malloc_r+0x300>
  406638:	2b0f      	cmp	r3, #15
  40663a:	dc04      	bgt.n	406646 <_malloc_r+0x30a>
  40663c:	4628      	mov	r0, r5
  40663e:	f000 fa4b 	bl	406ad8 <__malloc_unlock>
  406642:	2400      	movs	r4, #0
  406644:	e740      	b.n	4064c8 <_malloc_r+0x18c>
  406646:	19a2      	adds	r2, r4, r6
  406648:	f043 0301 	orr.w	r3, r3, #1
  40664c:	f046 0601 	orr.w	r6, r6, #1
  406650:	6066      	str	r6, [r4, #4]
  406652:	4628      	mov	r0, r5
  406654:	60ba      	str	r2, [r7, #8]
  406656:	6053      	str	r3, [r2, #4]
  406658:	f000 fa3e 	bl	406ad8 <__malloc_unlock>
  40665c:	3408      	adds	r4, #8
  40665e:	4620      	mov	r0, r4
  406660:	b003      	add	sp, #12
  406662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406666:	2b14      	cmp	r3, #20
  406668:	d971      	bls.n	40674e <_malloc_r+0x412>
  40666a:	2b54      	cmp	r3, #84	; 0x54
  40666c:	f200 80a3 	bhi.w	4067b6 <_malloc_r+0x47a>
  406670:	0b33      	lsrs	r3, r6, #12
  406672:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  406676:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40667a:	00c3      	lsls	r3, r0, #3
  40667c:	e680      	b.n	406380 <_malloc_r+0x44>
  40667e:	bf00      	nop
  406680:	20000440 	.word	0x20000440
  406684:	20019148 	.word	0x20019148
  406688:	20019118 	.word	0x20019118
  40668c:	20019140 	.word	0x20019140
  406690:	20019144 	.word	0x20019144
  406694:	20000448 	.word	0x20000448
  406698:	20000848 	.word	0x20000848
  40669c:	0a5a      	lsrs	r2, r3, #9
  40669e:	2a04      	cmp	r2, #4
  4066a0:	d95b      	bls.n	40675a <_malloc_r+0x41e>
  4066a2:	2a14      	cmp	r2, #20
  4066a4:	f200 80ae 	bhi.w	406804 <_malloc_r+0x4c8>
  4066a8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4066ac:	00c9      	lsls	r1, r1, #3
  4066ae:	325b      	adds	r2, #91	; 0x5b
  4066b0:	eb07 0c01 	add.w	ip, r7, r1
  4066b4:	5879      	ldr	r1, [r7, r1]
  4066b6:	f1ac 0c08 	sub.w	ip, ip, #8
  4066ba:	458c      	cmp	ip, r1
  4066bc:	f000 8088 	beq.w	4067d0 <_malloc_r+0x494>
  4066c0:	684a      	ldr	r2, [r1, #4]
  4066c2:	f022 0203 	bic.w	r2, r2, #3
  4066c6:	4293      	cmp	r3, r2
  4066c8:	d273      	bcs.n	4067b2 <_malloc_r+0x476>
  4066ca:	6889      	ldr	r1, [r1, #8]
  4066cc:	458c      	cmp	ip, r1
  4066ce:	d1f7      	bne.n	4066c0 <_malloc_r+0x384>
  4066d0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4066d4:	687b      	ldr	r3, [r7, #4]
  4066d6:	60e2      	str	r2, [r4, #12]
  4066d8:	f8c4 c008 	str.w	ip, [r4, #8]
  4066dc:	6094      	str	r4, [r2, #8]
  4066de:	f8cc 400c 	str.w	r4, [ip, #12]
  4066e2:	e68f      	b.n	406404 <_malloc_r+0xc8>
  4066e4:	19a1      	adds	r1, r4, r6
  4066e6:	f046 0c01 	orr.w	ip, r6, #1
  4066ea:	f042 0601 	orr.w	r6, r2, #1
  4066ee:	f8c4 c004 	str.w	ip, [r4, #4]
  4066f2:	4628      	mov	r0, r5
  4066f4:	6179      	str	r1, [r7, #20]
  4066f6:	6139      	str	r1, [r7, #16]
  4066f8:	f8c1 e00c 	str.w	lr, [r1, #12]
  4066fc:	f8c1 e008 	str.w	lr, [r1, #8]
  406700:	604e      	str	r6, [r1, #4]
  406702:	50e2      	str	r2, [r4, r3]
  406704:	f000 f9e8 	bl	406ad8 <__malloc_unlock>
  406708:	3408      	adds	r4, #8
  40670a:	e6dd      	b.n	4064c8 <_malloc_r+0x18c>
  40670c:	687b      	ldr	r3, [r7, #4]
  40670e:	e679      	b.n	406404 <_malloc_r+0xc8>
  406710:	f108 0801 	add.w	r8, r8, #1
  406714:	f018 0f03 	tst.w	r8, #3
  406718:	f10c 0c08 	add.w	ip, ip, #8
  40671c:	f47f ae85 	bne.w	40642a <_malloc_r+0xee>
  406720:	e02d      	b.n	40677e <_malloc_r+0x442>
  406722:	68dc      	ldr	r4, [r3, #12]
  406724:	42a3      	cmp	r3, r4
  406726:	bf08      	it	eq
  406728:	3002      	addeq	r0, #2
  40672a:	f43f ae3e 	beq.w	4063aa <_malloc_r+0x6e>
  40672e:	e6bb      	b.n	4064a8 <_malloc_r+0x16c>
  406730:	4419      	add	r1, r3
  406732:	461c      	mov	r4, r3
  406734:	684a      	ldr	r2, [r1, #4]
  406736:	68db      	ldr	r3, [r3, #12]
  406738:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40673c:	f042 0201 	orr.w	r2, r2, #1
  406740:	604a      	str	r2, [r1, #4]
  406742:	4628      	mov	r0, r5
  406744:	60f3      	str	r3, [r6, #12]
  406746:	609e      	str	r6, [r3, #8]
  406748:	f000 f9c6 	bl	406ad8 <__malloc_unlock>
  40674c:	e6bc      	b.n	4064c8 <_malloc_r+0x18c>
  40674e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  406752:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  406756:	00c3      	lsls	r3, r0, #3
  406758:	e612      	b.n	406380 <_malloc_r+0x44>
  40675a:	099a      	lsrs	r2, r3, #6
  40675c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  406760:	00c9      	lsls	r1, r1, #3
  406762:	3238      	adds	r2, #56	; 0x38
  406764:	e7a4      	b.n	4066b0 <_malloc_r+0x374>
  406766:	42bc      	cmp	r4, r7
  406768:	d054      	beq.n	406814 <_malloc_r+0x4d8>
  40676a:	68bc      	ldr	r4, [r7, #8]
  40676c:	6862      	ldr	r2, [r4, #4]
  40676e:	f022 0203 	bic.w	r2, r2, #3
  406772:	e75d      	b.n	406630 <_malloc_r+0x2f4>
  406774:	f859 3908 	ldr.w	r3, [r9], #-8
  406778:	4599      	cmp	r9, r3
  40677a:	f040 8086 	bne.w	40688a <_malloc_r+0x54e>
  40677e:	f010 0f03 	tst.w	r0, #3
  406782:	f100 30ff 	add.w	r0, r0, #4294967295
  406786:	d1f5      	bne.n	406774 <_malloc_r+0x438>
  406788:	687b      	ldr	r3, [r7, #4]
  40678a:	ea23 0304 	bic.w	r3, r3, r4
  40678e:	607b      	str	r3, [r7, #4]
  406790:	0064      	lsls	r4, r4, #1
  406792:	429c      	cmp	r4, r3
  406794:	f63f aec7 	bhi.w	406526 <_malloc_r+0x1ea>
  406798:	2c00      	cmp	r4, #0
  40679a:	f43f aec4 	beq.w	406526 <_malloc_r+0x1ea>
  40679e:	421c      	tst	r4, r3
  4067a0:	4640      	mov	r0, r8
  4067a2:	f47f ae3e 	bne.w	406422 <_malloc_r+0xe6>
  4067a6:	0064      	lsls	r4, r4, #1
  4067a8:	421c      	tst	r4, r3
  4067aa:	f100 0004 	add.w	r0, r0, #4
  4067ae:	d0fa      	beq.n	4067a6 <_malloc_r+0x46a>
  4067b0:	e637      	b.n	406422 <_malloc_r+0xe6>
  4067b2:	468c      	mov	ip, r1
  4067b4:	e78c      	b.n	4066d0 <_malloc_r+0x394>
  4067b6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4067ba:	d815      	bhi.n	4067e8 <_malloc_r+0x4ac>
  4067bc:	0bf3      	lsrs	r3, r6, #15
  4067be:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4067c2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4067c6:	00c3      	lsls	r3, r0, #3
  4067c8:	e5da      	b.n	406380 <_malloc_r+0x44>
  4067ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4067ce:	e6ed      	b.n	4065ac <_malloc_r+0x270>
  4067d0:	687b      	ldr	r3, [r7, #4]
  4067d2:	1092      	asrs	r2, r2, #2
  4067d4:	2101      	movs	r1, #1
  4067d6:	fa01 f202 	lsl.w	r2, r1, r2
  4067da:	4313      	orrs	r3, r2
  4067dc:	607b      	str	r3, [r7, #4]
  4067de:	4662      	mov	r2, ip
  4067e0:	e779      	b.n	4066d6 <_malloc_r+0x39a>
  4067e2:	2301      	movs	r3, #1
  4067e4:	6053      	str	r3, [r2, #4]
  4067e6:	e729      	b.n	40663c <_malloc_r+0x300>
  4067e8:	f240 5254 	movw	r2, #1364	; 0x554
  4067ec:	4293      	cmp	r3, r2
  4067ee:	d822      	bhi.n	406836 <_malloc_r+0x4fa>
  4067f0:	0cb3      	lsrs	r3, r6, #18
  4067f2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4067f6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4067fa:	00c3      	lsls	r3, r0, #3
  4067fc:	e5c0      	b.n	406380 <_malloc_r+0x44>
  4067fe:	f103 0b10 	add.w	fp, r3, #16
  406802:	e6ae      	b.n	406562 <_malloc_r+0x226>
  406804:	2a54      	cmp	r2, #84	; 0x54
  406806:	d829      	bhi.n	40685c <_malloc_r+0x520>
  406808:	0b1a      	lsrs	r2, r3, #12
  40680a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40680e:	00c9      	lsls	r1, r1, #3
  406810:	326e      	adds	r2, #110	; 0x6e
  406812:	e74d      	b.n	4066b0 <_malloc_r+0x374>
  406814:	4b20      	ldr	r3, [pc, #128]	; (406898 <_malloc_r+0x55c>)
  406816:	6819      	ldr	r1, [r3, #0]
  406818:	4459      	add	r1, fp
  40681a:	6019      	str	r1, [r3, #0]
  40681c:	e6b2      	b.n	406584 <_malloc_r+0x248>
  40681e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  406822:	2800      	cmp	r0, #0
  406824:	f47f aeae 	bne.w	406584 <_malloc_r+0x248>
  406828:	eb08 030b 	add.w	r3, r8, fp
  40682c:	68ba      	ldr	r2, [r7, #8]
  40682e:	f043 0301 	orr.w	r3, r3, #1
  406832:	6053      	str	r3, [r2, #4]
  406834:	e6ee      	b.n	406614 <_malloc_r+0x2d8>
  406836:	207f      	movs	r0, #127	; 0x7f
  406838:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40683c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  406840:	e59e      	b.n	406380 <_malloc_r+0x44>
  406842:	f104 0108 	add.w	r1, r4, #8
  406846:	4628      	mov	r0, r5
  406848:	9300      	str	r3, [sp, #0]
  40684a:	f000 fe97 	bl	40757c <_free_r>
  40684e:	9b00      	ldr	r3, [sp, #0]
  406850:	6819      	ldr	r1, [r3, #0]
  406852:	e6df      	b.n	406614 <_malloc_r+0x2d8>
  406854:	2001      	movs	r0, #1
  406856:	f04f 0900 	mov.w	r9, #0
  40685a:	e6bc      	b.n	4065d6 <_malloc_r+0x29a>
  40685c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406860:	d805      	bhi.n	40686e <_malloc_r+0x532>
  406862:	0bda      	lsrs	r2, r3, #15
  406864:	f102 0178 	add.w	r1, r2, #120	; 0x78
  406868:	00c9      	lsls	r1, r1, #3
  40686a:	3277      	adds	r2, #119	; 0x77
  40686c:	e720      	b.n	4066b0 <_malloc_r+0x374>
  40686e:	f240 5154 	movw	r1, #1364	; 0x554
  406872:	428a      	cmp	r2, r1
  406874:	d805      	bhi.n	406882 <_malloc_r+0x546>
  406876:	0c9a      	lsrs	r2, r3, #18
  406878:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40687c:	00c9      	lsls	r1, r1, #3
  40687e:	327c      	adds	r2, #124	; 0x7c
  406880:	e716      	b.n	4066b0 <_malloc_r+0x374>
  406882:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  406886:	227e      	movs	r2, #126	; 0x7e
  406888:	e712      	b.n	4066b0 <_malloc_r+0x374>
  40688a:	687b      	ldr	r3, [r7, #4]
  40688c:	e780      	b.n	406790 <_malloc_r+0x454>
  40688e:	08f0      	lsrs	r0, r6, #3
  406890:	f106 0308 	add.w	r3, r6, #8
  406894:	e600      	b.n	406498 <_malloc_r+0x15c>
  406896:	bf00      	nop
  406898:	20019118 	.word	0x20019118
  40689c:	00000000 	.word	0x00000000

004068a0 <memchr>:
  4068a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4068a4:	2a10      	cmp	r2, #16
  4068a6:	db2b      	blt.n	406900 <memchr+0x60>
  4068a8:	f010 0f07 	tst.w	r0, #7
  4068ac:	d008      	beq.n	4068c0 <memchr+0x20>
  4068ae:	f810 3b01 	ldrb.w	r3, [r0], #1
  4068b2:	3a01      	subs	r2, #1
  4068b4:	428b      	cmp	r3, r1
  4068b6:	d02d      	beq.n	406914 <memchr+0x74>
  4068b8:	f010 0f07 	tst.w	r0, #7
  4068bc:	b342      	cbz	r2, 406910 <memchr+0x70>
  4068be:	d1f6      	bne.n	4068ae <memchr+0xe>
  4068c0:	b4f0      	push	{r4, r5, r6, r7}
  4068c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4068c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4068ca:	f022 0407 	bic.w	r4, r2, #7
  4068ce:	f07f 0700 	mvns.w	r7, #0
  4068d2:	2300      	movs	r3, #0
  4068d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4068d8:	3c08      	subs	r4, #8
  4068da:	ea85 0501 	eor.w	r5, r5, r1
  4068de:	ea86 0601 	eor.w	r6, r6, r1
  4068e2:	fa85 f547 	uadd8	r5, r5, r7
  4068e6:	faa3 f587 	sel	r5, r3, r7
  4068ea:	fa86 f647 	uadd8	r6, r6, r7
  4068ee:	faa5 f687 	sel	r6, r5, r7
  4068f2:	b98e      	cbnz	r6, 406918 <memchr+0x78>
  4068f4:	d1ee      	bne.n	4068d4 <memchr+0x34>
  4068f6:	bcf0      	pop	{r4, r5, r6, r7}
  4068f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4068fc:	f002 0207 	and.w	r2, r2, #7
  406900:	b132      	cbz	r2, 406910 <memchr+0x70>
  406902:	f810 3b01 	ldrb.w	r3, [r0], #1
  406906:	3a01      	subs	r2, #1
  406908:	ea83 0301 	eor.w	r3, r3, r1
  40690c:	b113      	cbz	r3, 406914 <memchr+0x74>
  40690e:	d1f8      	bne.n	406902 <memchr+0x62>
  406910:	2000      	movs	r0, #0
  406912:	4770      	bx	lr
  406914:	3801      	subs	r0, #1
  406916:	4770      	bx	lr
  406918:	2d00      	cmp	r5, #0
  40691a:	bf06      	itte	eq
  40691c:	4635      	moveq	r5, r6
  40691e:	3803      	subeq	r0, #3
  406920:	3807      	subne	r0, #7
  406922:	f015 0f01 	tst.w	r5, #1
  406926:	d107      	bne.n	406938 <memchr+0x98>
  406928:	3001      	adds	r0, #1
  40692a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40692e:	bf02      	ittt	eq
  406930:	3001      	addeq	r0, #1
  406932:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406936:	3001      	addeq	r0, #1
  406938:	bcf0      	pop	{r4, r5, r6, r7}
  40693a:	3801      	subs	r0, #1
  40693c:	4770      	bx	lr
  40693e:	bf00      	nop

00406940 <memcmp>:
  406940:	2a03      	cmp	r2, #3
  406942:	b470      	push	{r4, r5, r6}
  406944:	d922      	bls.n	40698c <memcmp+0x4c>
  406946:	ea40 0301 	orr.w	r3, r0, r1
  40694a:	079b      	lsls	r3, r3, #30
  40694c:	d011      	beq.n	406972 <memcmp+0x32>
  40694e:	7803      	ldrb	r3, [r0, #0]
  406950:	780c      	ldrb	r4, [r1, #0]
  406952:	42a3      	cmp	r3, r4
  406954:	d11d      	bne.n	406992 <memcmp+0x52>
  406956:	440a      	add	r2, r1
  406958:	3101      	adds	r1, #1
  40695a:	e005      	b.n	406968 <memcmp+0x28>
  40695c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  406960:	f811 4b01 	ldrb.w	r4, [r1], #1
  406964:	42a3      	cmp	r3, r4
  406966:	d114      	bne.n	406992 <memcmp+0x52>
  406968:	4291      	cmp	r1, r2
  40696a:	d1f7      	bne.n	40695c <memcmp+0x1c>
  40696c:	2000      	movs	r0, #0
  40696e:	bc70      	pop	{r4, r5, r6}
  406970:	4770      	bx	lr
  406972:	680d      	ldr	r5, [r1, #0]
  406974:	6806      	ldr	r6, [r0, #0]
  406976:	42ae      	cmp	r6, r5
  406978:	460c      	mov	r4, r1
  40697a:	4603      	mov	r3, r0
  40697c:	f101 0104 	add.w	r1, r1, #4
  406980:	f100 0004 	add.w	r0, r0, #4
  406984:	d108      	bne.n	406998 <memcmp+0x58>
  406986:	3a04      	subs	r2, #4
  406988:	2a03      	cmp	r2, #3
  40698a:	d8f2      	bhi.n	406972 <memcmp+0x32>
  40698c:	2a00      	cmp	r2, #0
  40698e:	d1de      	bne.n	40694e <memcmp+0xe>
  406990:	e7ec      	b.n	40696c <memcmp+0x2c>
  406992:	1b18      	subs	r0, r3, r4
  406994:	bc70      	pop	{r4, r5, r6}
  406996:	4770      	bx	lr
  406998:	4621      	mov	r1, r4
  40699a:	4618      	mov	r0, r3
  40699c:	e7d7      	b.n	40694e <memcmp+0xe>
  40699e:	bf00      	nop

004069a0 <memcpy>:
  4069a0:	4684      	mov	ip, r0
  4069a2:	ea41 0300 	orr.w	r3, r1, r0
  4069a6:	f013 0303 	ands.w	r3, r3, #3
  4069aa:	d16d      	bne.n	406a88 <memcpy+0xe8>
  4069ac:	3a40      	subs	r2, #64	; 0x40
  4069ae:	d341      	bcc.n	406a34 <memcpy+0x94>
  4069b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4069b4:	f840 3b04 	str.w	r3, [r0], #4
  4069b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4069bc:	f840 3b04 	str.w	r3, [r0], #4
  4069c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4069c4:	f840 3b04 	str.w	r3, [r0], #4
  4069c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4069cc:	f840 3b04 	str.w	r3, [r0], #4
  4069d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4069d4:	f840 3b04 	str.w	r3, [r0], #4
  4069d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4069dc:	f840 3b04 	str.w	r3, [r0], #4
  4069e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4069e4:	f840 3b04 	str.w	r3, [r0], #4
  4069e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4069ec:	f840 3b04 	str.w	r3, [r0], #4
  4069f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4069f4:	f840 3b04 	str.w	r3, [r0], #4
  4069f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4069fc:	f840 3b04 	str.w	r3, [r0], #4
  406a00:	f851 3b04 	ldr.w	r3, [r1], #4
  406a04:	f840 3b04 	str.w	r3, [r0], #4
  406a08:	f851 3b04 	ldr.w	r3, [r1], #4
  406a0c:	f840 3b04 	str.w	r3, [r0], #4
  406a10:	f851 3b04 	ldr.w	r3, [r1], #4
  406a14:	f840 3b04 	str.w	r3, [r0], #4
  406a18:	f851 3b04 	ldr.w	r3, [r1], #4
  406a1c:	f840 3b04 	str.w	r3, [r0], #4
  406a20:	f851 3b04 	ldr.w	r3, [r1], #4
  406a24:	f840 3b04 	str.w	r3, [r0], #4
  406a28:	f851 3b04 	ldr.w	r3, [r1], #4
  406a2c:	f840 3b04 	str.w	r3, [r0], #4
  406a30:	3a40      	subs	r2, #64	; 0x40
  406a32:	d2bd      	bcs.n	4069b0 <memcpy+0x10>
  406a34:	3230      	adds	r2, #48	; 0x30
  406a36:	d311      	bcc.n	406a5c <memcpy+0xbc>
  406a38:	f851 3b04 	ldr.w	r3, [r1], #4
  406a3c:	f840 3b04 	str.w	r3, [r0], #4
  406a40:	f851 3b04 	ldr.w	r3, [r1], #4
  406a44:	f840 3b04 	str.w	r3, [r0], #4
  406a48:	f851 3b04 	ldr.w	r3, [r1], #4
  406a4c:	f840 3b04 	str.w	r3, [r0], #4
  406a50:	f851 3b04 	ldr.w	r3, [r1], #4
  406a54:	f840 3b04 	str.w	r3, [r0], #4
  406a58:	3a10      	subs	r2, #16
  406a5a:	d2ed      	bcs.n	406a38 <memcpy+0x98>
  406a5c:	320c      	adds	r2, #12
  406a5e:	d305      	bcc.n	406a6c <memcpy+0xcc>
  406a60:	f851 3b04 	ldr.w	r3, [r1], #4
  406a64:	f840 3b04 	str.w	r3, [r0], #4
  406a68:	3a04      	subs	r2, #4
  406a6a:	d2f9      	bcs.n	406a60 <memcpy+0xc0>
  406a6c:	3204      	adds	r2, #4
  406a6e:	d008      	beq.n	406a82 <memcpy+0xe2>
  406a70:	07d2      	lsls	r2, r2, #31
  406a72:	bf1c      	itt	ne
  406a74:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406a78:	f800 3b01 	strbne.w	r3, [r0], #1
  406a7c:	d301      	bcc.n	406a82 <memcpy+0xe2>
  406a7e:	880b      	ldrh	r3, [r1, #0]
  406a80:	8003      	strh	r3, [r0, #0]
  406a82:	4660      	mov	r0, ip
  406a84:	4770      	bx	lr
  406a86:	bf00      	nop
  406a88:	2a08      	cmp	r2, #8
  406a8a:	d313      	bcc.n	406ab4 <memcpy+0x114>
  406a8c:	078b      	lsls	r3, r1, #30
  406a8e:	d08d      	beq.n	4069ac <memcpy+0xc>
  406a90:	f010 0303 	ands.w	r3, r0, #3
  406a94:	d08a      	beq.n	4069ac <memcpy+0xc>
  406a96:	f1c3 0304 	rsb	r3, r3, #4
  406a9a:	1ad2      	subs	r2, r2, r3
  406a9c:	07db      	lsls	r3, r3, #31
  406a9e:	bf1c      	itt	ne
  406aa0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406aa4:	f800 3b01 	strbne.w	r3, [r0], #1
  406aa8:	d380      	bcc.n	4069ac <memcpy+0xc>
  406aaa:	f831 3b02 	ldrh.w	r3, [r1], #2
  406aae:	f820 3b02 	strh.w	r3, [r0], #2
  406ab2:	e77b      	b.n	4069ac <memcpy+0xc>
  406ab4:	3a04      	subs	r2, #4
  406ab6:	d3d9      	bcc.n	406a6c <memcpy+0xcc>
  406ab8:	3a01      	subs	r2, #1
  406aba:	f811 3b01 	ldrb.w	r3, [r1], #1
  406abe:	f800 3b01 	strb.w	r3, [r0], #1
  406ac2:	d2f9      	bcs.n	406ab8 <memcpy+0x118>
  406ac4:	780b      	ldrb	r3, [r1, #0]
  406ac6:	7003      	strb	r3, [r0, #0]
  406ac8:	784b      	ldrb	r3, [r1, #1]
  406aca:	7043      	strb	r3, [r0, #1]
  406acc:	788b      	ldrb	r3, [r1, #2]
  406ace:	7083      	strb	r3, [r0, #2]
  406ad0:	4660      	mov	r0, ip
  406ad2:	4770      	bx	lr

00406ad4 <__malloc_lock>:
  406ad4:	4770      	bx	lr
  406ad6:	bf00      	nop

00406ad8 <__malloc_unlock>:
  406ad8:	4770      	bx	lr
  406ada:	bf00      	nop

00406adc <_Balloc>:
  406adc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406ade:	b570      	push	{r4, r5, r6, lr}
  406ae0:	4605      	mov	r5, r0
  406ae2:	460c      	mov	r4, r1
  406ae4:	b14b      	cbz	r3, 406afa <_Balloc+0x1e>
  406ae6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  406aea:	b180      	cbz	r0, 406b0e <_Balloc+0x32>
  406aec:	6802      	ldr	r2, [r0, #0]
  406aee:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  406af2:	2300      	movs	r3, #0
  406af4:	6103      	str	r3, [r0, #16]
  406af6:	60c3      	str	r3, [r0, #12]
  406af8:	bd70      	pop	{r4, r5, r6, pc}
  406afa:	2221      	movs	r2, #33	; 0x21
  406afc:	2104      	movs	r1, #4
  406afe:	f000 fcbd 	bl	40747c <_calloc_r>
  406b02:	64e8      	str	r0, [r5, #76]	; 0x4c
  406b04:	4603      	mov	r3, r0
  406b06:	2800      	cmp	r0, #0
  406b08:	d1ed      	bne.n	406ae6 <_Balloc+0xa>
  406b0a:	2000      	movs	r0, #0
  406b0c:	bd70      	pop	{r4, r5, r6, pc}
  406b0e:	2101      	movs	r1, #1
  406b10:	fa01 f604 	lsl.w	r6, r1, r4
  406b14:	1d72      	adds	r2, r6, #5
  406b16:	4628      	mov	r0, r5
  406b18:	0092      	lsls	r2, r2, #2
  406b1a:	f000 fcaf 	bl	40747c <_calloc_r>
  406b1e:	2800      	cmp	r0, #0
  406b20:	d0f3      	beq.n	406b0a <_Balloc+0x2e>
  406b22:	6044      	str	r4, [r0, #4]
  406b24:	6086      	str	r6, [r0, #8]
  406b26:	e7e4      	b.n	406af2 <_Balloc+0x16>

00406b28 <_Bfree>:
  406b28:	b131      	cbz	r1, 406b38 <_Bfree+0x10>
  406b2a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406b2c:	684a      	ldr	r2, [r1, #4]
  406b2e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  406b32:	6008      	str	r0, [r1, #0]
  406b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406b38:	4770      	bx	lr
  406b3a:	bf00      	nop

00406b3c <__multadd>:
  406b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  406b3e:	690c      	ldr	r4, [r1, #16]
  406b40:	b083      	sub	sp, #12
  406b42:	460d      	mov	r5, r1
  406b44:	4606      	mov	r6, r0
  406b46:	f101 0e14 	add.w	lr, r1, #20
  406b4a:	2700      	movs	r7, #0
  406b4c:	f8de 0000 	ldr.w	r0, [lr]
  406b50:	b281      	uxth	r1, r0
  406b52:	fb02 3301 	mla	r3, r2, r1, r3
  406b56:	0c01      	lsrs	r1, r0, #16
  406b58:	0c18      	lsrs	r0, r3, #16
  406b5a:	fb02 0101 	mla	r1, r2, r1, r0
  406b5e:	b29b      	uxth	r3, r3
  406b60:	3701      	adds	r7, #1
  406b62:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  406b66:	42bc      	cmp	r4, r7
  406b68:	f84e 3b04 	str.w	r3, [lr], #4
  406b6c:	ea4f 4311 	mov.w	r3, r1, lsr #16
  406b70:	dcec      	bgt.n	406b4c <__multadd+0x10>
  406b72:	b13b      	cbz	r3, 406b84 <__multadd+0x48>
  406b74:	68aa      	ldr	r2, [r5, #8]
  406b76:	4294      	cmp	r4, r2
  406b78:	da07      	bge.n	406b8a <__multadd+0x4e>
  406b7a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  406b7e:	3401      	adds	r4, #1
  406b80:	6153      	str	r3, [r2, #20]
  406b82:	612c      	str	r4, [r5, #16]
  406b84:	4628      	mov	r0, r5
  406b86:	b003      	add	sp, #12
  406b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406b8a:	6869      	ldr	r1, [r5, #4]
  406b8c:	9301      	str	r3, [sp, #4]
  406b8e:	3101      	adds	r1, #1
  406b90:	4630      	mov	r0, r6
  406b92:	f7ff ffa3 	bl	406adc <_Balloc>
  406b96:	692a      	ldr	r2, [r5, #16]
  406b98:	3202      	adds	r2, #2
  406b9a:	f105 010c 	add.w	r1, r5, #12
  406b9e:	4607      	mov	r7, r0
  406ba0:	0092      	lsls	r2, r2, #2
  406ba2:	300c      	adds	r0, #12
  406ba4:	f7ff fefc 	bl	4069a0 <memcpy>
  406ba8:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  406baa:	6869      	ldr	r1, [r5, #4]
  406bac:	9b01      	ldr	r3, [sp, #4]
  406bae:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  406bb2:	6028      	str	r0, [r5, #0]
  406bb4:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  406bb8:	463d      	mov	r5, r7
  406bba:	e7de      	b.n	406b7a <__multadd+0x3e>

00406bbc <__hi0bits>:
  406bbc:	0c02      	lsrs	r2, r0, #16
  406bbe:	0412      	lsls	r2, r2, #16
  406bc0:	4603      	mov	r3, r0
  406bc2:	b9b2      	cbnz	r2, 406bf2 <__hi0bits+0x36>
  406bc4:	0403      	lsls	r3, r0, #16
  406bc6:	2010      	movs	r0, #16
  406bc8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  406bcc:	bf04      	itt	eq
  406bce:	021b      	lsleq	r3, r3, #8
  406bd0:	3008      	addeq	r0, #8
  406bd2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  406bd6:	bf04      	itt	eq
  406bd8:	011b      	lsleq	r3, r3, #4
  406bda:	3004      	addeq	r0, #4
  406bdc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  406be0:	bf04      	itt	eq
  406be2:	009b      	lsleq	r3, r3, #2
  406be4:	3002      	addeq	r0, #2
  406be6:	2b00      	cmp	r3, #0
  406be8:	db02      	blt.n	406bf0 <__hi0bits+0x34>
  406bea:	005b      	lsls	r3, r3, #1
  406bec:	d403      	bmi.n	406bf6 <__hi0bits+0x3a>
  406bee:	2020      	movs	r0, #32
  406bf0:	4770      	bx	lr
  406bf2:	2000      	movs	r0, #0
  406bf4:	e7e8      	b.n	406bc8 <__hi0bits+0xc>
  406bf6:	3001      	adds	r0, #1
  406bf8:	4770      	bx	lr
  406bfa:	bf00      	nop

00406bfc <__lo0bits>:
  406bfc:	6803      	ldr	r3, [r0, #0]
  406bfe:	f013 0207 	ands.w	r2, r3, #7
  406c02:	4601      	mov	r1, r0
  406c04:	d007      	beq.n	406c16 <__lo0bits+0x1a>
  406c06:	07da      	lsls	r2, r3, #31
  406c08:	d421      	bmi.n	406c4e <__lo0bits+0x52>
  406c0a:	0798      	lsls	r0, r3, #30
  406c0c:	d421      	bmi.n	406c52 <__lo0bits+0x56>
  406c0e:	089b      	lsrs	r3, r3, #2
  406c10:	600b      	str	r3, [r1, #0]
  406c12:	2002      	movs	r0, #2
  406c14:	4770      	bx	lr
  406c16:	b298      	uxth	r0, r3
  406c18:	b198      	cbz	r0, 406c42 <__lo0bits+0x46>
  406c1a:	4610      	mov	r0, r2
  406c1c:	f013 0fff 	tst.w	r3, #255	; 0xff
  406c20:	bf04      	itt	eq
  406c22:	0a1b      	lsreq	r3, r3, #8
  406c24:	3008      	addeq	r0, #8
  406c26:	071a      	lsls	r2, r3, #28
  406c28:	bf04      	itt	eq
  406c2a:	091b      	lsreq	r3, r3, #4
  406c2c:	3004      	addeq	r0, #4
  406c2e:	079a      	lsls	r2, r3, #30
  406c30:	bf04      	itt	eq
  406c32:	089b      	lsreq	r3, r3, #2
  406c34:	3002      	addeq	r0, #2
  406c36:	07da      	lsls	r2, r3, #31
  406c38:	d407      	bmi.n	406c4a <__lo0bits+0x4e>
  406c3a:	085b      	lsrs	r3, r3, #1
  406c3c:	d104      	bne.n	406c48 <__lo0bits+0x4c>
  406c3e:	2020      	movs	r0, #32
  406c40:	4770      	bx	lr
  406c42:	0c1b      	lsrs	r3, r3, #16
  406c44:	2010      	movs	r0, #16
  406c46:	e7e9      	b.n	406c1c <__lo0bits+0x20>
  406c48:	3001      	adds	r0, #1
  406c4a:	600b      	str	r3, [r1, #0]
  406c4c:	4770      	bx	lr
  406c4e:	2000      	movs	r0, #0
  406c50:	4770      	bx	lr
  406c52:	085b      	lsrs	r3, r3, #1
  406c54:	600b      	str	r3, [r1, #0]
  406c56:	2001      	movs	r0, #1
  406c58:	4770      	bx	lr
  406c5a:	bf00      	nop

00406c5c <__i2b>:
  406c5c:	b510      	push	{r4, lr}
  406c5e:	460c      	mov	r4, r1
  406c60:	2101      	movs	r1, #1
  406c62:	f7ff ff3b 	bl	406adc <_Balloc>
  406c66:	2201      	movs	r2, #1
  406c68:	6144      	str	r4, [r0, #20]
  406c6a:	6102      	str	r2, [r0, #16]
  406c6c:	bd10      	pop	{r4, pc}
  406c6e:	bf00      	nop

00406c70 <__multiply>:
  406c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406c74:	690c      	ldr	r4, [r1, #16]
  406c76:	6915      	ldr	r5, [r2, #16]
  406c78:	42ac      	cmp	r4, r5
  406c7a:	b083      	sub	sp, #12
  406c7c:	468b      	mov	fp, r1
  406c7e:	4616      	mov	r6, r2
  406c80:	da04      	bge.n	406c8c <__multiply+0x1c>
  406c82:	4622      	mov	r2, r4
  406c84:	46b3      	mov	fp, r6
  406c86:	462c      	mov	r4, r5
  406c88:	460e      	mov	r6, r1
  406c8a:	4615      	mov	r5, r2
  406c8c:	f8db 3008 	ldr.w	r3, [fp, #8]
  406c90:	f8db 1004 	ldr.w	r1, [fp, #4]
  406c94:	eb04 0805 	add.w	r8, r4, r5
  406c98:	4598      	cmp	r8, r3
  406c9a:	bfc8      	it	gt
  406c9c:	3101      	addgt	r1, #1
  406c9e:	f7ff ff1d 	bl	406adc <_Balloc>
  406ca2:	f100 0914 	add.w	r9, r0, #20
  406ca6:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  406caa:	45d1      	cmp	r9, sl
  406cac:	9000      	str	r0, [sp, #0]
  406cae:	d205      	bcs.n	406cbc <__multiply+0x4c>
  406cb0:	464b      	mov	r3, r9
  406cb2:	2100      	movs	r1, #0
  406cb4:	f843 1b04 	str.w	r1, [r3], #4
  406cb8:	459a      	cmp	sl, r3
  406cba:	d8fb      	bhi.n	406cb4 <__multiply+0x44>
  406cbc:	f106 0c14 	add.w	ip, r6, #20
  406cc0:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  406cc4:	f10b 0b14 	add.w	fp, fp, #20
  406cc8:	459c      	cmp	ip, r3
  406cca:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  406cce:	d24c      	bcs.n	406d6a <__multiply+0xfa>
  406cd0:	f8cd a004 	str.w	sl, [sp, #4]
  406cd4:	469a      	mov	sl, r3
  406cd6:	f8dc 5000 	ldr.w	r5, [ip]
  406cda:	b2af      	uxth	r7, r5
  406cdc:	b1ef      	cbz	r7, 406d1a <__multiply+0xaa>
  406cde:	2100      	movs	r1, #0
  406ce0:	464d      	mov	r5, r9
  406ce2:	465e      	mov	r6, fp
  406ce4:	460c      	mov	r4, r1
  406ce6:	f856 2b04 	ldr.w	r2, [r6], #4
  406cea:	6828      	ldr	r0, [r5, #0]
  406cec:	b293      	uxth	r3, r2
  406cee:	b281      	uxth	r1, r0
  406cf0:	fb07 1303 	mla	r3, r7, r3, r1
  406cf4:	0c12      	lsrs	r2, r2, #16
  406cf6:	0c01      	lsrs	r1, r0, #16
  406cf8:	4423      	add	r3, r4
  406cfa:	fb07 1102 	mla	r1, r7, r2, r1
  406cfe:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  406d02:	b29b      	uxth	r3, r3
  406d04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  406d08:	45b6      	cmp	lr, r6
  406d0a:	f845 3b04 	str.w	r3, [r5], #4
  406d0e:	ea4f 4411 	mov.w	r4, r1, lsr #16
  406d12:	d8e8      	bhi.n	406ce6 <__multiply+0x76>
  406d14:	602c      	str	r4, [r5, #0]
  406d16:	f8dc 5000 	ldr.w	r5, [ip]
  406d1a:	0c2d      	lsrs	r5, r5, #16
  406d1c:	d01d      	beq.n	406d5a <__multiply+0xea>
  406d1e:	f8d9 3000 	ldr.w	r3, [r9]
  406d22:	4648      	mov	r0, r9
  406d24:	461c      	mov	r4, r3
  406d26:	4659      	mov	r1, fp
  406d28:	2200      	movs	r2, #0
  406d2a:	880e      	ldrh	r6, [r1, #0]
  406d2c:	0c24      	lsrs	r4, r4, #16
  406d2e:	fb05 4406 	mla	r4, r5, r6, r4
  406d32:	4422      	add	r2, r4
  406d34:	b29b      	uxth	r3, r3
  406d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  406d3a:	f840 3b04 	str.w	r3, [r0], #4
  406d3e:	f851 3b04 	ldr.w	r3, [r1], #4
  406d42:	6804      	ldr	r4, [r0, #0]
  406d44:	0c1b      	lsrs	r3, r3, #16
  406d46:	b2a6      	uxth	r6, r4
  406d48:	fb05 6303 	mla	r3, r5, r3, r6
  406d4c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  406d50:	458e      	cmp	lr, r1
  406d52:	ea4f 4213 	mov.w	r2, r3, lsr #16
  406d56:	d8e8      	bhi.n	406d2a <__multiply+0xba>
  406d58:	6003      	str	r3, [r0, #0]
  406d5a:	f10c 0c04 	add.w	ip, ip, #4
  406d5e:	45e2      	cmp	sl, ip
  406d60:	f109 0904 	add.w	r9, r9, #4
  406d64:	d8b7      	bhi.n	406cd6 <__multiply+0x66>
  406d66:	f8dd a004 	ldr.w	sl, [sp, #4]
  406d6a:	f1b8 0f00 	cmp.w	r8, #0
  406d6e:	dd0b      	ble.n	406d88 <__multiply+0x118>
  406d70:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  406d74:	f1aa 0a04 	sub.w	sl, sl, #4
  406d78:	b11b      	cbz	r3, 406d82 <__multiply+0x112>
  406d7a:	e005      	b.n	406d88 <__multiply+0x118>
  406d7c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  406d80:	b913      	cbnz	r3, 406d88 <__multiply+0x118>
  406d82:	f1b8 0801 	subs.w	r8, r8, #1
  406d86:	d1f9      	bne.n	406d7c <__multiply+0x10c>
  406d88:	9800      	ldr	r0, [sp, #0]
  406d8a:	f8c0 8010 	str.w	r8, [r0, #16]
  406d8e:	b003      	add	sp, #12
  406d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406d94 <__pow5mult>:
  406d94:	f012 0303 	ands.w	r3, r2, #3
  406d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406d9c:	4614      	mov	r4, r2
  406d9e:	4607      	mov	r7, r0
  406da0:	d12e      	bne.n	406e00 <__pow5mult+0x6c>
  406da2:	460d      	mov	r5, r1
  406da4:	10a4      	asrs	r4, r4, #2
  406da6:	d01c      	beq.n	406de2 <__pow5mult+0x4e>
  406da8:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  406daa:	b396      	cbz	r6, 406e12 <__pow5mult+0x7e>
  406dac:	07e3      	lsls	r3, r4, #31
  406dae:	f04f 0800 	mov.w	r8, #0
  406db2:	d406      	bmi.n	406dc2 <__pow5mult+0x2e>
  406db4:	1064      	asrs	r4, r4, #1
  406db6:	d014      	beq.n	406de2 <__pow5mult+0x4e>
  406db8:	6830      	ldr	r0, [r6, #0]
  406dba:	b1a8      	cbz	r0, 406de8 <__pow5mult+0x54>
  406dbc:	4606      	mov	r6, r0
  406dbe:	07e3      	lsls	r3, r4, #31
  406dc0:	d5f8      	bpl.n	406db4 <__pow5mult+0x20>
  406dc2:	4632      	mov	r2, r6
  406dc4:	4629      	mov	r1, r5
  406dc6:	4638      	mov	r0, r7
  406dc8:	f7ff ff52 	bl	406c70 <__multiply>
  406dcc:	b1b5      	cbz	r5, 406dfc <__pow5mult+0x68>
  406dce:	686a      	ldr	r2, [r5, #4]
  406dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406dd2:	1064      	asrs	r4, r4, #1
  406dd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406dd8:	6029      	str	r1, [r5, #0]
  406dda:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  406dde:	4605      	mov	r5, r0
  406de0:	d1ea      	bne.n	406db8 <__pow5mult+0x24>
  406de2:	4628      	mov	r0, r5
  406de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406de8:	4632      	mov	r2, r6
  406dea:	4631      	mov	r1, r6
  406dec:	4638      	mov	r0, r7
  406dee:	f7ff ff3f 	bl	406c70 <__multiply>
  406df2:	6030      	str	r0, [r6, #0]
  406df4:	f8c0 8000 	str.w	r8, [r0]
  406df8:	4606      	mov	r6, r0
  406dfa:	e7e0      	b.n	406dbe <__pow5mult+0x2a>
  406dfc:	4605      	mov	r5, r0
  406dfe:	e7d9      	b.n	406db4 <__pow5mult+0x20>
  406e00:	1e5a      	subs	r2, r3, #1
  406e02:	4d0b      	ldr	r5, [pc, #44]	; (406e30 <__pow5mult+0x9c>)
  406e04:	2300      	movs	r3, #0
  406e06:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  406e0a:	f7ff fe97 	bl	406b3c <__multadd>
  406e0e:	4605      	mov	r5, r0
  406e10:	e7c8      	b.n	406da4 <__pow5mult+0x10>
  406e12:	2101      	movs	r1, #1
  406e14:	4638      	mov	r0, r7
  406e16:	f7ff fe61 	bl	406adc <_Balloc>
  406e1a:	f240 2171 	movw	r1, #625	; 0x271
  406e1e:	2201      	movs	r2, #1
  406e20:	2300      	movs	r3, #0
  406e22:	6141      	str	r1, [r0, #20]
  406e24:	6102      	str	r2, [r0, #16]
  406e26:	4606      	mov	r6, r0
  406e28:	64b8      	str	r0, [r7, #72]	; 0x48
  406e2a:	6003      	str	r3, [r0, #0]
  406e2c:	e7be      	b.n	406dac <__pow5mult+0x18>
  406e2e:	bf00      	nop
  406e30:	004092c0 	.word	0x004092c0

00406e34 <__lshift>:
  406e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406e38:	4691      	mov	r9, r2
  406e3a:	690a      	ldr	r2, [r1, #16]
  406e3c:	688b      	ldr	r3, [r1, #8]
  406e3e:	ea4f 1469 	mov.w	r4, r9, asr #5
  406e42:	eb04 0802 	add.w	r8, r4, r2
  406e46:	f108 0501 	add.w	r5, r8, #1
  406e4a:	429d      	cmp	r5, r3
  406e4c:	460e      	mov	r6, r1
  406e4e:	4607      	mov	r7, r0
  406e50:	6849      	ldr	r1, [r1, #4]
  406e52:	dd04      	ble.n	406e5e <__lshift+0x2a>
  406e54:	005b      	lsls	r3, r3, #1
  406e56:	429d      	cmp	r5, r3
  406e58:	f101 0101 	add.w	r1, r1, #1
  406e5c:	dcfa      	bgt.n	406e54 <__lshift+0x20>
  406e5e:	4638      	mov	r0, r7
  406e60:	f7ff fe3c 	bl	406adc <_Balloc>
  406e64:	2c00      	cmp	r4, #0
  406e66:	f100 0314 	add.w	r3, r0, #20
  406e6a:	dd06      	ble.n	406e7a <__lshift+0x46>
  406e6c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  406e70:	2100      	movs	r1, #0
  406e72:	f843 1b04 	str.w	r1, [r3], #4
  406e76:	429a      	cmp	r2, r3
  406e78:	d1fb      	bne.n	406e72 <__lshift+0x3e>
  406e7a:	6934      	ldr	r4, [r6, #16]
  406e7c:	f106 0114 	add.w	r1, r6, #20
  406e80:	f019 091f 	ands.w	r9, r9, #31
  406e84:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  406e88:	d01d      	beq.n	406ec6 <__lshift+0x92>
  406e8a:	f1c9 0c20 	rsb	ip, r9, #32
  406e8e:	2200      	movs	r2, #0
  406e90:	680c      	ldr	r4, [r1, #0]
  406e92:	fa04 f409 	lsl.w	r4, r4, r9
  406e96:	4314      	orrs	r4, r2
  406e98:	f843 4b04 	str.w	r4, [r3], #4
  406e9c:	f851 2b04 	ldr.w	r2, [r1], #4
  406ea0:	458e      	cmp	lr, r1
  406ea2:	fa22 f20c 	lsr.w	r2, r2, ip
  406ea6:	d8f3      	bhi.n	406e90 <__lshift+0x5c>
  406ea8:	601a      	str	r2, [r3, #0]
  406eaa:	b10a      	cbz	r2, 406eb0 <__lshift+0x7c>
  406eac:	f108 0502 	add.w	r5, r8, #2
  406eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406eb2:	6872      	ldr	r2, [r6, #4]
  406eb4:	3d01      	subs	r5, #1
  406eb6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406eba:	6105      	str	r5, [r0, #16]
  406ebc:	6031      	str	r1, [r6, #0]
  406ebe:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  406ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406ec6:	3b04      	subs	r3, #4
  406ec8:	f851 2b04 	ldr.w	r2, [r1], #4
  406ecc:	f843 2f04 	str.w	r2, [r3, #4]!
  406ed0:	458e      	cmp	lr, r1
  406ed2:	d8f9      	bhi.n	406ec8 <__lshift+0x94>
  406ed4:	e7ec      	b.n	406eb0 <__lshift+0x7c>
  406ed6:	bf00      	nop

00406ed8 <__mcmp>:
  406ed8:	b430      	push	{r4, r5}
  406eda:	690b      	ldr	r3, [r1, #16]
  406edc:	4605      	mov	r5, r0
  406ede:	6900      	ldr	r0, [r0, #16]
  406ee0:	1ac0      	subs	r0, r0, r3
  406ee2:	d10f      	bne.n	406f04 <__mcmp+0x2c>
  406ee4:	009b      	lsls	r3, r3, #2
  406ee6:	3514      	adds	r5, #20
  406ee8:	3114      	adds	r1, #20
  406eea:	4419      	add	r1, r3
  406eec:	442b      	add	r3, r5
  406eee:	e001      	b.n	406ef4 <__mcmp+0x1c>
  406ef0:	429d      	cmp	r5, r3
  406ef2:	d207      	bcs.n	406f04 <__mcmp+0x2c>
  406ef4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  406ef8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  406efc:	4294      	cmp	r4, r2
  406efe:	d0f7      	beq.n	406ef0 <__mcmp+0x18>
  406f00:	d302      	bcc.n	406f08 <__mcmp+0x30>
  406f02:	2001      	movs	r0, #1
  406f04:	bc30      	pop	{r4, r5}
  406f06:	4770      	bx	lr
  406f08:	f04f 30ff 	mov.w	r0, #4294967295
  406f0c:	e7fa      	b.n	406f04 <__mcmp+0x2c>
  406f0e:	bf00      	nop

00406f10 <__mdiff>:
  406f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406f14:	690f      	ldr	r7, [r1, #16]
  406f16:	460e      	mov	r6, r1
  406f18:	6911      	ldr	r1, [r2, #16]
  406f1a:	1a7f      	subs	r7, r7, r1
  406f1c:	2f00      	cmp	r7, #0
  406f1e:	4690      	mov	r8, r2
  406f20:	d117      	bne.n	406f52 <__mdiff+0x42>
  406f22:	0089      	lsls	r1, r1, #2
  406f24:	f106 0514 	add.w	r5, r6, #20
  406f28:	f102 0e14 	add.w	lr, r2, #20
  406f2c:	186b      	adds	r3, r5, r1
  406f2e:	4471      	add	r1, lr
  406f30:	e001      	b.n	406f36 <__mdiff+0x26>
  406f32:	429d      	cmp	r5, r3
  406f34:	d25c      	bcs.n	406ff0 <__mdiff+0xe0>
  406f36:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  406f3a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  406f3e:	42a2      	cmp	r2, r4
  406f40:	d0f7      	beq.n	406f32 <__mdiff+0x22>
  406f42:	d25e      	bcs.n	407002 <__mdiff+0xf2>
  406f44:	4633      	mov	r3, r6
  406f46:	462c      	mov	r4, r5
  406f48:	4646      	mov	r6, r8
  406f4a:	4675      	mov	r5, lr
  406f4c:	4698      	mov	r8, r3
  406f4e:	2701      	movs	r7, #1
  406f50:	e005      	b.n	406f5e <__mdiff+0x4e>
  406f52:	db58      	blt.n	407006 <__mdiff+0xf6>
  406f54:	f106 0514 	add.w	r5, r6, #20
  406f58:	f108 0414 	add.w	r4, r8, #20
  406f5c:	2700      	movs	r7, #0
  406f5e:	6871      	ldr	r1, [r6, #4]
  406f60:	f7ff fdbc 	bl	406adc <_Balloc>
  406f64:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406f68:	6936      	ldr	r6, [r6, #16]
  406f6a:	60c7      	str	r7, [r0, #12]
  406f6c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  406f70:	46a6      	mov	lr, r4
  406f72:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  406f76:	f100 0414 	add.w	r4, r0, #20
  406f7a:	2300      	movs	r3, #0
  406f7c:	f85e 1b04 	ldr.w	r1, [lr], #4
  406f80:	f855 8b04 	ldr.w	r8, [r5], #4
  406f84:	b28a      	uxth	r2, r1
  406f86:	fa13 f388 	uxtah	r3, r3, r8
  406f8a:	0c09      	lsrs	r1, r1, #16
  406f8c:	1a9a      	subs	r2, r3, r2
  406f8e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  406f92:	eb03 4322 	add.w	r3, r3, r2, asr #16
  406f96:	b292      	uxth	r2, r2
  406f98:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406f9c:	45f4      	cmp	ip, lr
  406f9e:	f844 2b04 	str.w	r2, [r4], #4
  406fa2:	ea4f 4323 	mov.w	r3, r3, asr #16
  406fa6:	d8e9      	bhi.n	406f7c <__mdiff+0x6c>
  406fa8:	42af      	cmp	r7, r5
  406faa:	d917      	bls.n	406fdc <__mdiff+0xcc>
  406fac:	46a4      	mov	ip, r4
  406fae:	46ae      	mov	lr, r5
  406fb0:	f85e 2b04 	ldr.w	r2, [lr], #4
  406fb4:	fa13 f382 	uxtah	r3, r3, r2
  406fb8:	1419      	asrs	r1, r3, #16
  406fba:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  406fbe:	b29b      	uxth	r3, r3
  406fc0:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  406fc4:	4577      	cmp	r7, lr
  406fc6:	f84c 2b04 	str.w	r2, [ip], #4
  406fca:	ea4f 4321 	mov.w	r3, r1, asr #16
  406fce:	d8ef      	bhi.n	406fb0 <__mdiff+0xa0>
  406fd0:	43ed      	mvns	r5, r5
  406fd2:	442f      	add	r7, r5
  406fd4:	f027 0703 	bic.w	r7, r7, #3
  406fd8:	3704      	adds	r7, #4
  406fda:	443c      	add	r4, r7
  406fdc:	3c04      	subs	r4, #4
  406fde:	b922      	cbnz	r2, 406fea <__mdiff+0xda>
  406fe0:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  406fe4:	3e01      	subs	r6, #1
  406fe6:	2b00      	cmp	r3, #0
  406fe8:	d0fa      	beq.n	406fe0 <__mdiff+0xd0>
  406fea:	6106      	str	r6, [r0, #16]
  406fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406ff0:	2100      	movs	r1, #0
  406ff2:	f7ff fd73 	bl	406adc <_Balloc>
  406ff6:	2201      	movs	r2, #1
  406ff8:	2300      	movs	r3, #0
  406ffa:	6102      	str	r2, [r0, #16]
  406ffc:	6143      	str	r3, [r0, #20]
  406ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407002:	4674      	mov	r4, lr
  407004:	e7ab      	b.n	406f5e <__mdiff+0x4e>
  407006:	4633      	mov	r3, r6
  407008:	f106 0414 	add.w	r4, r6, #20
  40700c:	f102 0514 	add.w	r5, r2, #20
  407010:	4616      	mov	r6, r2
  407012:	2701      	movs	r7, #1
  407014:	4698      	mov	r8, r3
  407016:	e7a2      	b.n	406f5e <__mdiff+0x4e>

00407018 <__d2b>:
  407018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40701c:	b082      	sub	sp, #8
  40701e:	2101      	movs	r1, #1
  407020:	461c      	mov	r4, r3
  407022:	f3c3 570a 	ubfx	r7, r3, #20, #11
  407026:	4615      	mov	r5, r2
  407028:	9e08      	ldr	r6, [sp, #32]
  40702a:	f7ff fd57 	bl	406adc <_Balloc>
  40702e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  407032:	4680      	mov	r8, r0
  407034:	b10f      	cbz	r7, 40703a <__d2b+0x22>
  407036:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40703a:	9401      	str	r4, [sp, #4]
  40703c:	b31d      	cbz	r5, 407086 <__d2b+0x6e>
  40703e:	a802      	add	r0, sp, #8
  407040:	f840 5d08 	str.w	r5, [r0, #-8]!
  407044:	f7ff fdda 	bl	406bfc <__lo0bits>
  407048:	2800      	cmp	r0, #0
  40704a:	d134      	bne.n	4070b6 <__d2b+0x9e>
  40704c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407050:	f8c8 2014 	str.w	r2, [r8, #20]
  407054:	2b00      	cmp	r3, #0
  407056:	bf0c      	ite	eq
  407058:	2101      	moveq	r1, #1
  40705a:	2102      	movne	r1, #2
  40705c:	f8c8 3018 	str.w	r3, [r8, #24]
  407060:	f8c8 1010 	str.w	r1, [r8, #16]
  407064:	b9df      	cbnz	r7, 40709e <__d2b+0x86>
  407066:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40706a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40706e:	6030      	str	r0, [r6, #0]
  407070:	6918      	ldr	r0, [r3, #16]
  407072:	f7ff fda3 	bl	406bbc <__hi0bits>
  407076:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407078:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40707c:	6018      	str	r0, [r3, #0]
  40707e:	4640      	mov	r0, r8
  407080:	b002      	add	sp, #8
  407082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407086:	a801      	add	r0, sp, #4
  407088:	f7ff fdb8 	bl	406bfc <__lo0bits>
  40708c:	9b01      	ldr	r3, [sp, #4]
  40708e:	f8c8 3014 	str.w	r3, [r8, #20]
  407092:	2101      	movs	r1, #1
  407094:	3020      	adds	r0, #32
  407096:	f8c8 1010 	str.w	r1, [r8, #16]
  40709a:	2f00      	cmp	r7, #0
  40709c:	d0e3      	beq.n	407066 <__d2b+0x4e>
  40709e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4070a0:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  4070a4:	4407      	add	r7, r0
  4070a6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4070aa:	6037      	str	r7, [r6, #0]
  4070ac:	6018      	str	r0, [r3, #0]
  4070ae:	4640      	mov	r0, r8
  4070b0:	b002      	add	sp, #8
  4070b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4070b6:	e89d 000a 	ldmia.w	sp, {r1, r3}
  4070ba:	f1c0 0220 	rsb	r2, r0, #32
  4070be:	fa03 f202 	lsl.w	r2, r3, r2
  4070c2:	430a      	orrs	r2, r1
  4070c4:	40c3      	lsrs	r3, r0
  4070c6:	9301      	str	r3, [sp, #4]
  4070c8:	f8c8 2014 	str.w	r2, [r8, #20]
  4070cc:	e7c2      	b.n	407054 <__d2b+0x3c>
  4070ce:	bf00      	nop

004070d0 <_sbrk_r>:
  4070d0:	b538      	push	{r3, r4, r5, lr}
  4070d2:	4c07      	ldr	r4, [pc, #28]	; (4070f0 <_sbrk_r+0x20>)
  4070d4:	2300      	movs	r3, #0
  4070d6:	4605      	mov	r5, r0
  4070d8:	4608      	mov	r0, r1
  4070da:	6023      	str	r3, [r4, #0]
  4070dc:	f7fb ff28 	bl	402f30 <_sbrk>
  4070e0:	1c43      	adds	r3, r0, #1
  4070e2:	d000      	beq.n	4070e6 <_sbrk_r+0x16>
  4070e4:	bd38      	pop	{r3, r4, r5, pc}
  4070e6:	6823      	ldr	r3, [r4, #0]
  4070e8:	2b00      	cmp	r3, #0
  4070ea:	d0fb      	beq.n	4070e4 <_sbrk_r+0x14>
  4070ec:	602b      	str	r3, [r5, #0]
  4070ee:	bd38      	pop	{r3, r4, r5, pc}
  4070f0:	2001953c 	.word	0x2001953c

004070f4 <strchr>:
  4070f4:	b2c9      	uxtb	r1, r1
  4070f6:	2900      	cmp	r1, #0
  4070f8:	d041      	beq.n	40717e <strchr+0x8a>
  4070fa:	0782      	lsls	r2, r0, #30
  4070fc:	b4f0      	push	{r4, r5, r6, r7}
  4070fe:	d067      	beq.n	4071d0 <strchr+0xdc>
  407100:	7803      	ldrb	r3, [r0, #0]
  407102:	2b00      	cmp	r3, #0
  407104:	d068      	beq.n	4071d8 <strchr+0xe4>
  407106:	4299      	cmp	r1, r3
  407108:	d037      	beq.n	40717a <strchr+0x86>
  40710a:	1c43      	adds	r3, r0, #1
  40710c:	e004      	b.n	407118 <strchr+0x24>
  40710e:	f813 0b01 	ldrb.w	r0, [r3], #1
  407112:	b390      	cbz	r0, 40717a <strchr+0x86>
  407114:	4281      	cmp	r1, r0
  407116:	d02f      	beq.n	407178 <strchr+0x84>
  407118:	079a      	lsls	r2, r3, #30
  40711a:	461c      	mov	r4, r3
  40711c:	d1f7      	bne.n	40710e <strchr+0x1a>
  40711e:	6825      	ldr	r5, [r4, #0]
  407120:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  407124:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  407128:	ea83 0605 	eor.w	r6, r3, r5
  40712c:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  407130:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  407134:	ea20 0006 	bic.w	r0, r0, r6
  407138:	ea22 0205 	bic.w	r2, r2, r5
  40713c:	4302      	orrs	r2, r0
  40713e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  407142:	d111      	bne.n	407168 <strchr+0x74>
  407144:	4620      	mov	r0, r4
  407146:	f850 6f04 	ldr.w	r6, [r0, #4]!
  40714a:	ea83 0706 	eor.w	r7, r3, r6
  40714e:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  407152:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  407156:	ea25 0507 	bic.w	r5, r5, r7
  40715a:	ea22 0206 	bic.w	r2, r2, r6
  40715e:	432a      	orrs	r2, r5
  407160:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  407164:	d0ef      	beq.n	407146 <strchr+0x52>
  407166:	4604      	mov	r4, r0
  407168:	7820      	ldrb	r0, [r4, #0]
  40716a:	b918      	cbnz	r0, 407174 <strchr+0x80>
  40716c:	e005      	b.n	40717a <strchr+0x86>
  40716e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  407172:	b110      	cbz	r0, 40717a <strchr+0x86>
  407174:	4281      	cmp	r1, r0
  407176:	d1fa      	bne.n	40716e <strchr+0x7a>
  407178:	4620      	mov	r0, r4
  40717a:	bcf0      	pop	{r4, r5, r6, r7}
  40717c:	4770      	bx	lr
  40717e:	0783      	lsls	r3, r0, #30
  407180:	d024      	beq.n	4071cc <strchr+0xd8>
  407182:	7803      	ldrb	r3, [r0, #0]
  407184:	2b00      	cmp	r3, #0
  407186:	d0f9      	beq.n	40717c <strchr+0x88>
  407188:	1c43      	adds	r3, r0, #1
  40718a:	e003      	b.n	407194 <strchr+0xa0>
  40718c:	7802      	ldrb	r2, [r0, #0]
  40718e:	3301      	adds	r3, #1
  407190:	2a00      	cmp	r2, #0
  407192:	d0f3      	beq.n	40717c <strchr+0x88>
  407194:	0799      	lsls	r1, r3, #30
  407196:	4618      	mov	r0, r3
  407198:	d1f8      	bne.n	40718c <strchr+0x98>
  40719a:	6819      	ldr	r1, [r3, #0]
  40719c:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  4071a0:	ea22 0201 	bic.w	r2, r2, r1
  4071a4:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4071a8:	d108      	bne.n	4071bc <strchr+0xc8>
  4071aa:	f853 1f04 	ldr.w	r1, [r3, #4]!
  4071ae:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  4071b2:	ea22 0201 	bic.w	r2, r2, r1
  4071b6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4071ba:	d0f6      	beq.n	4071aa <strchr+0xb6>
  4071bc:	781a      	ldrb	r2, [r3, #0]
  4071be:	4618      	mov	r0, r3
  4071c0:	b142      	cbz	r2, 4071d4 <strchr+0xe0>
  4071c2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4071c6:	2b00      	cmp	r3, #0
  4071c8:	d1fb      	bne.n	4071c2 <strchr+0xce>
  4071ca:	4770      	bx	lr
  4071cc:	4603      	mov	r3, r0
  4071ce:	e7e4      	b.n	40719a <strchr+0xa6>
  4071d0:	4604      	mov	r4, r0
  4071d2:	e7a4      	b.n	40711e <strchr+0x2a>
  4071d4:	4618      	mov	r0, r3
  4071d6:	4770      	bx	lr
  4071d8:	4618      	mov	r0, r3
  4071da:	e7ce      	b.n	40717a <strchr+0x86>
	...

00407200 <strlen>:
  407200:	f890 f000 	pld	[r0]
  407204:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  407208:	f020 0107 	bic.w	r1, r0, #7
  40720c:	f06f 0c00 	mvn.w	ip, #0
  407210:	f010 0407 	ands.w	r4, r0, #7
  407214:	f891 f020 	pld	[r1, #32]
  407218:	f040 8049 	bne.w	4072ae <strlen+0xae>
  40721c:	f04f 0400 	mov.w	r4, #0
  407220:	f06f 0007 	mvn.w	r0, #7
  407224:	e9d1 2300 	ldrd	r2, r3, [r1]
  407228:	f891 f040 	pld	[r1, #64]	; 0x40
  40722c:	f100 0008 	add.w	r0, r0, #8
  407230:	fa82 f24c 	uadd8	r2, r2, ip
  407234:	faa4 f28c 	sel	r2, r4, ip
  407238:	fa83 f34c 	uadd8	r3, r3, ip
  40723c:	faa2 f38c 	sel	r3, r2, ip
  407240:	bb4b      	cbnz	r3, 407296 <strlen+0x96>
  407242:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  407246:	fa82 f24c 	uadd8	r2, r2, ip
  40724a:	f100 0008 	add.w	r0, r0, #8
  40724e:	faa4 f28c 	sel	r2, r4, ip
  407252:	fa83 f34c 	uadd8	r3, r3, ip
  407256:	faa2 f38c 	sel	r3, r2, ip
  40725a:	b9e3      	cbnz	r3, 407296 <strlen+0x96>
  40725c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  407260:	fa82 f24c 	uadd8	r2, r2, ip
  407264:	f100 0008 	add.w	r0, r0, #8
  407268:	faa4 f28c 	sel	r2, r4, ip
  40726c:	fa83 f34c 	uadd8	r3, r3, ip
  407270:	faa2 f38c 	sel	r3, r2, ip
  407274:	b97b      	cbnz	r3, 407296 <strlen+0x96>
  407276:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40727a:	f101 0120 	add.w	r1, r1, #32
  40727e:	fa82 f24c 	uadd8	r2, r2, ip
  407282:	f100 0008 	add.w	r0, r0, #8
  407286:	faa4 f28c 	sel	r2, r4, ip
  40728a:	fa83 f34c 	uadd8	r3, r3, ip
  40728e:	faa2 f38c 	sel	r3, r2, ip
  407292:	2b00      	cmp	r3, #0
  407294:	d0c6      	beq.n	407224 <strlen+0x24>
  407296:	2a00      	cmp	r2, #0
  407298:	bf04      	itt	eq
  40729a:	3004      	addeq	r0, #4
  40729c:	461a      	moveq	r2, r3
  40729e:	ba12      	rev	r2, r2
  4072a0:	fab2 f282 	clz	r2, r2
  4072a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4072a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4072ac:	4770      	bx	lr
  4072ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4072b2:	f004 0503 	and.w	r5, r4, #3
  4072b6:	f1c4 0000 	rsb	r0, r4, #0
  4072ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4072be:	f014 0f04 	tst.w	r4, #4
  4072c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4072c6:	fa0c f505 	lsl.w	r5, ip, r5
  4072ca:	ea62 0205 	orn	r2, r2, r5
  4072ce:	bf1c      	itt	ne
  4072d0:	ea63 0305 	ornne	r3, r3, r5
  4072d4:	4662      	movne	r2, ip
  4072d6:	f04f 0400 	mov.w	r4, #0
  4072da:	e7a9      	b.n	407230 <strlen+0x30>

004072dc <__ssprint_r>:
  4072dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4072e0:	6893      	ldr	r3, [r2, #8]
  4072e2:	b083      	sub	sp, #12
  4072e4:	4690      	mov	r8, r2
  4072e6:	2b00      	cmp	r3, #0
  4072e8:	d070      	beq.n	4073cc <__ssprint_r+0xf0>
  4072ea:	4682      	mov	sl, r0
  4072ec:	460c      	mov	r4, r1
  4072ee:	6817      	ldr	r7, [r2, #0]
  4072f0:	688d      	ldr	r5, [r1, #8]
  4072f2:	6808      	ldr	r0, [r1, #0]
  4072f4:	e042      	b.n	40737c <__ssprint_r+0xa0>
  4072f6:	89a3      	ldrh	r3, [r4, #12]
  4072f8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4072fc:	d02e      	beq.n	40735c <__ssprint_r+0x80>
  4072fe:	6965      	ldr	r5, [r4, #20]
  407300:	6921      	ldr	r1, [r4, #16]
  407302:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  407306:	eba0 0b01 	sub.w	fp, r0, r1
  40730a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40730e:	f10b 0001 	add.w	r0, fp, #1
  407312:	106d      	asrs	r5, r5, #1
  407314:	4430      	add	r0, r6
  407316:	42a8      	cmp	r0, r5
  407318:	462a      	mov	r2, r5
  40731a:	bf84      	itt	hi
  40731c:	4605      	movhi	r5, r0
  40731e:	462a      	movhi	r2, r5
  407320:	055b      	lsls	r3, r3, #21
  407322:	d538      	bpl.n	407396 <__ssprint_r+0xba>
  407324:	4611      	mov	r1, r2
  407326:	4650      	mov	r0, sl
  407328:	f7ff f808 	bl	40633c <_malloc_r>
  40732c:	2800      	cmp	r0, #0
  40732e:	d03c      	beq.n	4073aa <__ssprint_r+0xce>
  407330:	465a      	mov	r2, fp
  407332:	6921      	ldr	r1, [r4, #16]
  407334:	9001      	str	r0, [sp, #4]
  407336:	f7ff fb33 	bl	4069a0 <memcpy>
  40733a:	89a2      	ldrh	r2, [r4, #12]
  40733c:	9b01      	ldr	r3, [sp, #4]
  40733e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  407342:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  407346:	81a2      	strh	r2, [r4, #12]
  407348:	eba5 020b 	sub.w	r2, r5, fp
  40734c:	eb03 000b 	add.w	r0, r3, fp
  407350:	6165      	str	r5, [r4, #20]
  407352:	6123      	str	r3, [r4, #16]
  407354:	6020      	str	r0, [r4, #0]
  407356:	60a2      	str	r2, [r4, #8]
  407358:	4635      	mov	r5, r6
  40735a:	46b3      	mov	fp, r6
  40735c:	465a      	mov	r2, fp
  40735e:	4649      	mov	r1, r9
  407360:	f000 fa08 	bl	407774 <memmove>
  407364:	f8d8 3008 	ldr.w	r3, [r8, #8]
  407368:	68a2      	ldr	r2, [r4, #8]
  40736a:	6820      	ldr	r0, [r4, #0]
  40736c:	1b55      	subs	r5, r2, r5
  40736e:	4458      	add	r0, fp
  407370:	1b9e      	subs	r6, r3, r6
  407372:	60a5      	str	r5, [r4, #8]
  407374:	6020      	str	r0, [r4, #0]
  407376:	f8c8 6008 	str.w	r6, [r8, #8]
  40737a:	b33e      	cbz	r6, 4073cc <__ssprint_r+0xf0>
  40737c:	687e      	ldr	r6, [r7, #4]
  40737e:	463b      	mov	r3, r7
  407380:	3708      	adds	r7, #8
  407382:	2e00      	cmp	r6, #0
  407384:	d0fa      	beq.n	40737c <__ssprint_r+0xa0>
  407386:	42ae      	cmp	r6, r5
  407388:	f8d3 9000 	ldr.w	r9, [r3]
  40738c:	46ab      	mov	fp, r5
  40738e:	d2b2      	bcs.n	4072f6 <__ssprint_r+0x1a>
  407390:	4635      	mov	r5, r6
  407392:	46b3      	mov	fp, r6
  407394:	e7e2      	b.n	40735c <__ssprint_r+0x80>
  407396:	4650      	mov	r0, sl
  407398:	f000 fa50 	bl	40783c <_realloc_r>
  40739c:	4603      	mov	r3, r0
  40739e:	2800      	cmp	r0, #0
  4073a0:	d1d2      	bne.n	407348 <__ssprint_r+0x6c>
  4073a2:	6921      	ldr	r1, [r4, #16]
  4073a4:	4650      	mov	r0, sl
  4073a6:	f000 f8e9 	bl	40757c <_free_r>
  4073aa:	230c      	movs	r3, #12
  4073ac:	f8ca 3000 	str.w	r3, [sl]
  4073b0:	89a3      	ldrh	r3, [r4, #12]
  4073b2:	2200      	movs	r2, #0
  4073b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4073b8:	f04f 30ff 	mov.w	r0, #4294967295
  4073bc:	81a3      	strh	r3, [r4, #12]
  4073be:	f8c8 2008 	str.w	r2, [r8, #8]
  4073c2:	f8c8 2004 	str.w	r2, [r8, #4]
  4073c6:	b003      	add	sp, #12
  4073c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4073cc:	2000      	movs	r0, #0
  4073ce:	f8c8 0004 	str.w	r0, [r8, #4]
  4073d2:	b003      	add	sp, #12
  4073d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004073d8 <__register_exitproc>:
  4073d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4073dc:	4c25      	ldr	r4, [pc, #148]	; (407474 <__register_exitproc+0x9c>)
  4073de:	6825      	ldr	r5, [r4, #0]
  4073e0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4073e4:	4606      	mov	r6, r0
  4073e6:	4688      	mov	r8, r1
  4073e8:	4692      	mov	sl, r2
  4073ea:	4699      	mov	r9, r3
  4073ec:	b3c4      	cbz	r4, 407460 <__register_exitproc+0x88>
  4073ee:	6860      	ldr	r0, [r4, #4]
  4073f0:	281f      	cmp	r0, #31
  4073f2:	dc17      	bgt.n	407424 <__register_exitproc+0x4c>
  4073f4:	1c43      	adds	r3, r0, #1
  4073f6:	b176      	cbz	r6, 407416 <__register_exitproc+0x3e>
  4073f8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4073fc:	2201      	movs	r2, #1
  4073fe:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  407402:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  407406:	4082      	lsls	r2, r0
  407408:	4311      	orrs	r1, r2
  40740a:	2e02      	cmp	r6, #2
  40740c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  407410:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  407414:	d01e      	beq.n	407454 <__register_exitproc+0x7c>
  407416:	3002      	adds	r0, #2
  407418:	6063      	str	r3, [r4, #4]
  40741a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40741e:	2000      	movs	r0, #0
  407420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407424:	4b14      	ldr	r3, [pc, #80]	; (407478 <__register_exitproc+0xa0>)
  407426:	b303      	cbz	r3, 40746a <__register_exitproc+0x92>
  407428:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40742c:	f3af 8000 	nop.w
  407430:	4604      	mov	r4, r0
  407432:	b1d0      	cbz	r0, 40746a <__register_exitproc+0x92>
  407434:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  407438:	2700      	movs	r7, #0
  40743a:	e880 0088 	stmia.w	r0, {r3, r7}
  40743e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  407442:	4638      	mov	r0, r7
  407444:	2301      	movs	r3, #1
  407446:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40744a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40744e:	2e00      	cmp	r6, #0
  407450:	d0e1      	beq.n	407416 <__register_exitproc+0x3e>
  407452:	e7d1      	b.n	4073f8 <__register_exitproc+0x20>
  407454:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  407458:	430a      	orrs	r2, r1
  40745a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40745e:	e7da      	b.n	407416 <__register_exitproc+0x3e>
  407460:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  407464:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  407468:	e7c1      	b.n	4073ee <__register_exitproc+0x16>
  40746a:	f04f 30ff 	mov.w	r0, #4294967295
  40746e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407472:	bf00      	nop
  407474:	00409154 	.word	0x00409154
  407478:	00000000 	.word	0x00000000

0040747c <_calloc_r>:
  40747c:	b510      	push	{r4, lr}
  40747e:	fb02 f101 	mul.w	r1, r2, r1
  407482:	f7fe ff5b 	bl	40633c <_malloc_r>
  407486:	4604      	mov	r4, r0
  407488:	b1d8      	cbz	r0, 4074c2 <_calloc_r+0x46>
  40748a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40748e:	f022 0203 	bic.w	r2, r2, #3
  407492:	3a04      	subs	r2, #4
  407494:	2a24      	cmp	r2, #36	; 0x24
  407496:	d818      	bhi.n	4074ca <_calloc_r+0x4e>
  407498:	2a13      	cmp	r2, #19
  40749a:	d914      	bls.n	4074c6 <_calloc_r+0x4a>
  40749c:	2300      	movs	r3, #0
  40749e:	2a1b      	cmp	r2, #27
  4074a0:	6003      	str	r3, [r0, #0]
  4074a2:	6043      	str	r3, [r0, #4]
  4074a4:	d916      	bls.n	4074d4 <_calloc_r+0x58>
  4074a6:	2a24      	cmp	r2, #36	; 0x24
  4074a8:	6083      	str	r3, [r0, #8]
  4074aa:	60c3      	str	r3, [r0, #12]
  4074ac:	bf11      	iteee	ne
  4074ae:	f100 0210 	addne.w	r2, r0, #16
  4074b2:	6103      	streq	r3, [r0, #16]
  4074b4:	6143      	streq	r3, [r0, #20]
  4074b6:	f100 0218 	addeq.w	r2, r0, #24
  4074ba:	2300      	movs	r3, #0
  4074bc:	6013      	str	r3, [r2, #0]
  4074be:	6053      	str	r3, [r2, #4]
  4074c0:	6093      	str	r3, [r2, #8]
  4074c2:	4620      	mov	r0, r4
  4074c4:	bd10      	pop	{r4, pc}
  4074c6:	4602      	mov	r2, r0
  4074c8:	e7f7      	b.n	4074ba <_calloc_r+0x3e>
  4074ca:	2100      	movs	r1, #0
  4074cc:	f7fc fa42 	bl	403954 <memset>
  4074d0:	4620      	mov	r0, r4
  4074d2:	bd10      	pop	{r4, pc}
  4074d4:	f100 0208 	add.w	r2, r0, #8
  4074d8:	e7ef      	b.n	4074ba <_calloc_r+0x3e>
  4074da:	bf00      	nop

004074dc <_malloc_trim_r>:
  4074dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4074de:	4f24      	ldr	r7, [pc, #144]	; (407570 <_malloc_trim_r+0x94>)
  4074e0:	460c      	mov	r4, r1
  4074e2:	4606      	mov	r6, r0
  4074e4:	f7ff faf6 	bl	406ad4 <__malloc_lock>
  4074e8:	68bb      	ldr	r3, [r7, #8]
  4074ea:	685d      	ldr	r5, [r3, #4]
  4074ec:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4074f0:	310f      	adds	r1, #15
  4074f2:	f025 0503 	bic.w	r5, r5, #3
  4074f6:	4429      	add	r1, r5
  4074f8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4074fc:	f021 010f 	bic.w	r1, r1, #15
  407500:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407504:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  407508:	db07      	blt.n	40751a <_malloc_trim_r+0x3e>
  40750a:	2100      	movs	r1, #0
  40750c:	4630      	mov	r0, r6
  40750e:	f7ff fddf 	bl	4070d0 <_sbrk_r>
  407512:	68bb      	ldr	r3, [r7, #8]
  407514:	442b      	add	r3, r5
  407516:	4298      	cmp	r0, r3
  407518:	d004      	beq.n	407524 <_malloc_trim_r+0x48>
  40751a:	4630      	mov	r0, r6
  40751c:	f7ff fadc 	bl	406ad8 <__malloc_unlock>
  407520:	2000      	movs	r0, #0
  407522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407524:	4261      	negs	r1, r4
  407526:	4630      	mov	r0, r6
  407528:	f7ff fdd2 	bl	4070d0 <_sbrk_r>
  40752c:	3001      	adds	r0, #1
  40752e:	d00d      	beq.n	40754c <_malloc_trim_r+0x70>
  407530:	4b10      	ldr	r3, [pc, #64]	; (407574 <_malloc_trim_r+0x98>)
  407532:	68ba      	ldr	r2, [r7, #8]
  407534:	6819      	ldr	r1, [r3, #0]
  407536:	1b2d      	subs	r5, r5, r4
  407538:	f045 0501 	orr.w	r5, r5, #1
  40753c:	4630      	mov	r0, r6
  40753e:	1b09      	subs	r1, r1, r4
  407540:	6055      	str	r5, [r2, #4]
  407542:	6019      	str	r1, [r3, #0]
  407544:	f7ff fac8 	bl	406ad8 <__malloc_unlock>
  407548:	2001      	movs	r0, #1
  40754a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40754c:	2100      	movs	r1, #0
  40754e:	4630      	mov	r0, r6
  407550:	f7ff fdbe 	bl	4070d0 <_sbrk_r>
  407554:	68ba      	ldr	r2, [r7, #8]
  407556:	1a83      	subs	r3, r0, r2
  407558:	2b0f      	cmp	r3, #15
  40755a:	ddde      	ble.n	40751a <_malloc_trim_r+0x3e>
  40755c:	4c06      	ldr	r4, [pc, #24]	; (407578 <_malloc_trim_r+0x9c>)
  40755e:	4905      	ldr	r1, [pc, #20]	; (407574 <_malloc_trim_r+0x98>)
  407560:	6824      	ldr	r4, [r4, #0]
  407562:	f043 0301 	orr.w	r3, r3, #1
  407566:	1b00      	subs	r0, r0, r4
  407568:	6053      	str	r3, [r2, #4]
  40756a:	6008      	str	r0, [r1, #0]
  40756c:	e7d5      	b.n	40751a <_malloc_trim_r+0x3e>
  40756e:	bf00      	nop
  407570:	20000440 	.word	0x20000440
  407574:	20019118 	.word	0x20019118
  407578:	20000848 	.word	0x20000848

0040757c <_free_r>:
  40757c:	2900      	cmp	r1, #0
  40757e:	d044      	beq.n	40760a <_free_r+0x8e>
  407580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407584:	460d      	mov	r5, r1
  407586:	4680      	mov	r8, r0
  407588:	f7ff faa4 	bl	406ad4 <__malloc_lock>
  40758c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407590:	4969      	ldr	r1, [pc, #420]	; (407738 <_free_r+0x1bc>)
  407592:	f027 0301 	bic.w	r3, r7, #1
  407596:	f1a5 0408 	sub.w	r4, r5, #8
  40759a:	18e2      	adds	r2, r4, r3
  40759c:	688e      	ldr	r6, [r1, #8]
  40759e:	6850      	ldr	r0, [r2, #4]
  4075a0:	42b2      	cmp	r2, r6
  4075a2:	f020 0003 	bic.w	r0, r0, #3
  4075a6:	d05e      	beq.n	407666 <_free_r+0xea>
  4075a8:	07fe      	lsls	r6, r7, #31
  4075aa:	6050      	str	r0, [r2, #4]
  4075ac:	d40b      	bmi.n	4075c6 <_free_r+0x4a>
  4075ae:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4075b2:	1be4      	subs	r4, r4, r7
  4075b4:	f101 0e08 	add.w	lr, r1, #8
  4075b8:	68a5      	ldr	r5, [r4, #8]
  4075ba:	4575      	cmp	r5, lr
  4075bc:	443b      	add	r3, r7
  4075be:	d06d      	beq.n	40769c <_free_r+0x120>
  4075c0:	68e7      	ldr	r7, [r4, #12]
  4075c2:	60ef      	str	r7, [r5, #12]
  4075c4:	60bd      	str	r5, [r7, #8]
  4075c6:	1815      	adds	r5, r2, r0
  4075c8:	686d      	ldr	r5, [r5, #4]
  4075ca:	07ed      	lsls	r5, r5, #31
  4075cc:	d53e      	bpl.n	40764c <_free_r+0xd0>
  4075ce:	f043 0201 	orr.w	r2, r3, #1
  4075d2:	6062      	str	r2, [r4, #4]
  4075d4:	50e3      	str	r3, [r4, r3]
  4075d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4075da:	d217      	bcs.n	40760c <_free_r+0x90>
  4075dc:	08db      	lsrs	r3, r3, #3
  4075de:	1c58      	adds	r0, r3, #1
  4075e0:	109a      	asrs	r2, r3, #2
  4075e2:	684d      	ldr	r5, [r1, #4]
  4075e4:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4075e8:	60a7      	str	r7, [r4, #8]
  4075ea:	2301      	movs	r3, #1
  4075ec:	4093      	lsls	r3, r2
  4075ee:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4075f2:	432b      	orrs	r3, r5
  4075f4:	3a08      	subs	r2, #8
  4075f6:	60e2      	str	r2, [r4, #12]
  4075f8:	604b      	str	r3, [r1, #4]
  4075fa:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4075fe:	60fc      	str	r4, [r7, #12]
  407600:	4640      	mov	r0, r8
  407602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407606:	f7ff ba67 	b.w	406ad8 <__malloc_unlock>
  40760a:	4770      	bx	lr
  40760c:	0a5a      	lsrs	r2, r3, #9
  40760e:	2a04      	cmp	r2, #4
  407610:	d852      	bhi.n	4076b8 <_free_r+0x13c>
  407612:	099a      	lsrs	r2, r3, #6
  407614:	f102 0739 	add.w	r7, r2, #57	; 0x39
  407618:	00ff      	lsls	r7, r7, #3
  40761a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40761e:	19c8      	adds	r0, r1, r7
  407620:	59ca      	ldr	r2, [r1, r7]
  407622:	3808      	subs	r0, #8
  407624:	4290      	cmp	r0, r2
  407626:	d04f      	beq.n	4076c8 <_free_r+0x14c>
  407628:	6851      	ldr	r1, [r2, #4]
  40762a:	f021 0103 	bic.w	r1, r1, #3
  40762e:	428b      	cmp	r3, r1
  407630:	d232      	bcs.n	407698 <_free_r+0x11c>
  407632:	6892      	ldr	r2, [r2, #8]
  407634:	4290      	cmp	r0, r2
  407636:	d1f7      	bne.n	407628 <_free_r+0xac>
  407638:	68c3      	ldr	r3, [r0, #12]
  40763a:	60a0      	str	r0, [r4, #8]
  40763c:	60e3      	str	r3, [r4, #12]
  40763e:	609c      	str	r4, [r3, #8]
  407640:	60c4      	str	r4, [r0, #12]
  407642:	4640      	mov	r0, r8
  407644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407648:	f7ff ba46 	b.w	406ad8 <__malloc_unlock>
  40764c:	6895      	ldr	r5, [r2, #8]
  40764e:	4f3b      	ldr	r7, [pc, #236]	; (40773c <_free_r+0x1c0>)
  407650:	42bd      	cmp	r5, r7
  407652:	4403      	add	r3, r0
  407654:	d040      	beq.n	4076d8 <_free_r+0x15c>
  407656:	68d0      	ldr	r0, [r2, #12]
  407658:	60e8      	str	r0, [r5, #12]
  40765a:	f043 0201 	orr.w	r2, r3, #1
  40765e:	6085      	str	r5, [r0, #8]
  407660:	6062      	str	r2, [r4, #4]
  407662:	50e3      	str	r3, [r4, r3]
  407664:	e7b7      	b.n	4075d6 <_free_r+0x5a>
  407666:	07ff      	lsls	r7, r7, #31
  407668:	4403      	add	r3, r0
  40766a:	d407      	bmi.n	40767c <_free_r+0x100>
  40766c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407670:	1aa4      	subs	r4, r4, r2
  407672:	4413      	add	r3, r2
  407674:	68a0      	ldr	r0, [r4, #8]
  407676:	68e2      	ldr	r2, [r4, #12]
  407678:	60c2      	str	r2, [r0, #12]
  40767a:	6090      	str	r0, [r2, #8]
  40767c:	4a30      	ldr	r2, [pc, #192]	; (407740 <_free_r+0x1c4>)
  40767e:	6812      	ldr	r2, [r2, #0]
  407680:	f043 0001 	orr.w	r0, r3, #1
  407684:	4293      	cmp	r3, r2
  407686:	6060      	str	r0, [r4, #4]
  407688:	608c      	str	r4, [r1, #8]
  40768a:	d3b9      	bcc.n	407600 <_free_r+0x84>
  40768c:	4b2d      	ldr	r3, [pc, #180]	; (407744 <_free_r+0x1c8>)
  40768e:	4640      	mov	r0, r8
  407690:	6819      	ldr	r1, [r3, #0]
  407692:	f7ff ff23 	bl	4074dc <_malloc_trim_r>
  407696:	e7b3      	b.n	407600 <_free_r+0x84>
  407698:	4610      	mov	r0, r2
  40769a:	e7cd      	b.n	407638 <_free_r+0xbc>
  40769c:	1811      	adds	r1, r2, r0
  40769e:	6849      	ldr	r1, [r1, #4]
  4076a0:	07c9      	lsls	r1, r1, #31
  4076a2:	d444      	bmi.n	40772e <_free_r+0x1b2>
  4076a4:	6891      	ldr	r1, [r2, #8]
  4076a6:	68d2      	ldr	r2, [r2, #12]
  4076a8:	60ca      	str	r2, [r1, #12]
  4076aa:	4403      	add	r3, r0
  4076ac:	f043 0001 	orr.w	r0, r3, #1
  4076b0:	6091      	str	r1, [r2, #8]
  4076b2:	6060      	str	r0, [r4, #4]
  4076b4:	50e3      	str	r3, [r4, r3]
  4076b6:	e7a3      	b.n	407600 <_free_r+0x84>
  4076b8:	2a14      	cmp	r2, #20
  4076ba:	d816      	bhi.n	4076ea <_free_r+0x16e>
  4076bc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4076c0:	00ff      	lsls	r7, r7, #3
  4076c2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4076c6:	e7aa      	b.n	40761e <_free_r+0xa2>
  4076c8:	10aa      	asrs	r2, r5, #2
  4076ca:	2301      	movs	r3, #1
  4076cc:	684d      	ldr	r5, [r1, #4]
  4076ce:	4093      	lsls	r3, r2
  4076d0:	432b      	orrs	r3, r5
  4076d2:	604b      	str	r3, [r1, #4]
  4076d4:	4603      	mov	r3, r0
  4076d6:	e7b0      	b.n	40763a <_free_r+0xbe>
  4076d8:	f043 0201 	orr.w	r2, r3, #1
  4076dc:	614c      	str	r4, [r1, #20]
  4076de:	610c      	str	r4, [r1, #16]
  4076e0:	60e5      	str	r5, [r4, #12]
  4076e2:	60a5      	str	r5, [r4, #8]
  4076e4:	6062      	str	r2, [r4, #4]
  4076e6:	50e3      	str	r3, [r4, r3]
  4076e8:	e78a      	b.n	407600 <_free_r+0x84>
  4076ea:	2a54      	cmp	r2, #84	; 0x54
  4076ec:	d806      	bhi.n	4076fc <_free_r+0x180>
  4076ee:	0b1a      	lsrs	r2, r3, #12
  4076f0:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4076f4:	00ff      	lsls	r7, r7, #3
  4076f6:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4076fa:	e790      	b.n	40761e <_free_r+0xa2>
  4076fc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407700:	d806      	bhi.n	407710 <_free_r+0x194>
  407702:	0bda      	lsrs	r2, r3, #15
  407704:	f102 0778 	add.w	r7, r2, #120	; 0x78
  407708:	00ff      	lsls	r7, r7, #3
  40770a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40770e:	e786      	b.n	40761e <_free_r+0xa2>
  407710:	f240 5054 	movw	r0, #1364	; 0x554
  407714:	4282      	cmp	r2, r0
  407716:	d806      	bhi.n	407726 <_free_r+0x1aa>
  407718:	0c9a      	lsrs	r2, r3, #18
  40771a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40771e:	00ff      	lsls	r7, r7, #3
  407720:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  407724:	e77b      	b.n	40761e <_free_r+0xa2>
  407726:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40772a:	257e      	movs	r5, #126	; 0x7e
  40772c:	e777      	b.n	40761e <_free_r+0xa2>
  40772e:	f043 0101 	orr.w	r1, r3, #1
  407732:	6061      	str	r1, [r4, #4]
  407734:	6013      	str	r3, [r2, #0]
  407736:	e763      	b.n	407600 <_free_r+0x84>
  407738:	20000440 	.word	0x20000440
  40773c:	20000448 	.word	0x20000448
  407740:	2000084c 	.word	0x2000084c
  407744:	20019148 	.word	0x20019148

00407748 <__ascii_mbtowc>:
  407748:	b082      	sub	sp, #8
  40774a:	b149      	cbz	r1, 407760 <__ascii_mbtowc+0x18>
  40774c:	b15a      	cbz	r2, 407766 <__ascii_mbtowc+0x1e>
  40774e:	b16b      	cbz	r3, 40776c <__ascii_mbtowc+0x24>
  407750:	7813      	ldrb	r3, [r2, #0]
  407752:	600b      	str	r3, [r1, #0]
  407754:	7812      	ldrb	r2, [r2, #0]
  407756:	1c10      	adds	r0, r2, #0
  407758:	bf18      	it	ne
  40775a:	2001      	movne	r0, #1
  40775c:	b002      	add	sp, #8
  40775e:	4770      	bx	lr
  407760:	a901      	add	r1, sp, #4
  407762:	2a00      	cmp	r2, #0
  407764:	d1f3      	bne.n	40774e <__ascii_mbtowc+0x6>
  407766:	4610      	mov	r0, r2
  407768:	b002      	add	sp, #8
  40776a:	4770      	bx	lr
  40776c:	f06f 0001 	mvn.w	r0, #1
  407770:	e7f4      	b.n	40775c <__ascii_mbtowc+0x14>
  407772:	bf00      	nop

00407774 <memmove>:
  407774:	4288      	cmp	r0, r1
  407776:	b5f0      	push	{r4, r5, r6, r7, lr}
  407778:	d90d      	bls.n	407796 <memmove+0x22>
  40777a:	188b      	adds	r3, r1, r2
  40777c:	4298      	cmp	r0, r3
  40777e:	d20a      	bcs.n	407796 <memmove+0x22>
  407780:	1884      	adds	r4, r0, r2
  407782:	2a00      	cmp	r2, #0
  407784:	d051      	beq.n	40782a <memmove+0xb6>
  407786:	4622      	mov	r2, r4
  407788:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40778c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  407790:	4299      	cmp	r1, r3
  407792:	d1f9      	bne.n	407788 <memmove+0x14>
  407794:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407796:	2a0f      	cmp	r2, #15
  407798:	d948      	bls.n	40782c <memmove+0xb8>
  40779a:	ea41 0300 	orr.w	r3, r1, r0
  40779e:	079b      	lsls	r3, r3, #30
  4077a0:	d146      	bne.n	407830 <memmove+0xbc>
  4077a2:	f100 0410 	add.w	r4, r0, #16
  4077a6:	f101 0310 	add.w	r3, r1, #16
  4077aa:	4615      	mov	r5, r2
  4077ac:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4077b0:	f844 6c10 	str.w	r6, [r4, #-16]
  4077b4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4077b8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4077bc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4077c0:	f844 6c08 	str.w	r6, [r4, #-8]
  4077c4:	3d10      	subs	r5, #16
  4077c6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4077ca:	f844 6c04 	str.w	r6, [r4, #-4]
  4077ce:	2d0f      	cmp	r5, #15
  4077d0:	f103 0310 	add.w	r3, r3, #16
  4077d4:	f104 0410 	add.w	r4, r4, #16
  4077d8:	d8e8      	bhi.n	4077ac <memmove+0x38>
  4077da:	f1a2 0310 	sub.w	r3, r2, #16
  4077de:	f023 030f 	bic.w	r3, r3, #15
  4077e2:	f002 0e0f 	and.w	lr, r2, #15
  4077e6:	3310      	adds	r3, #16
  4077e8:	f1be 0f03 	cmp.w	lr, #3
  4077ec:	4419      	add	r1, r3
  4077ee:	4403      	add	r3, r0
  4077f0:	d921      	bls.n	407836 <memmove+0xc2>
  4077f2:	1f1e      	subs	r6, r3, #4
  4077f4:	460d      	mov	r5, r1
  4077f6:	4674      	mov	r4, lr
  4077f8:	3c04      	subs	r4, #4
  4077fa:	f855 7b04 	ldr.w	r7, [r5], #4
  4077fe:	f846 7f04 	str.w	r7, [r6, #4]!
  407802:	2c03      	cmp	r4, #3
  407804:	d8f8      	bhi.n	4077f8 <memmove+0x84>
  407806:	f1ae 0404 	sub.w	r4, lr, #4
  40780a:	f024 0403 	bic.w	r4, r4, #3
  40780e:	3404      	adds	r4, #4
  407810:	4421      	add	r1, r4
  407812:	4423      	add	r3, r4
  407814:	f002 0203 	and.w	r2, r2, #3
  407818:	b162      	cbz	r2, 407834 <memmove+0xc0>
  40781a:	3b01      	subs	r3, #1
  40781c:	440a      	add	r2, r1
  40781e:	f811 4b01 	ldrb.w	r4, [r1], #1
  407822:	f803 4f01 	strb.w	r4, [r3, #1]!
  407826:	428a      	cmp	r2, r1
  407828:	d1f9      	bne.n	40781e <memmove+0xaa>
  40782a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40782c:	4603      	mov	r3, r0
  40782e:	e7f3      	b.n	407818 <memmove+0xa4>
  407830:	4603      	mov	r3, r0
  407832:	e7f2      	b.n	40781a <memmove+0xa6>
  407834:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407836:	4672      	mov	r2, lr
  407838:	e7ee      	b.n	407818 <memmove+0xa4>
  40783a:	bf00      	nop

0040783c <_realloc_r>:
  40783c:	2900      	cmp	r1, #0
  40783e:	f000 8095 	beq.w	40796c <_realloc_r+0x130>
  407842:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407846:	460d      	mov	r5, r1
  407848:	4616      	mov	r6, r2
  40784a:	b083      	sub	sp, #12
  40784c:	4680      	mov	r8, r0
  40784e:	f106 070b 	add.w	r7, r6, #11
  407852:	f7ff f93f 	bl	406ad4 <__malloc_lock>
  407856:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40785a:	2f16      	cmp	r7, #22
  40785c:	f02e 0403 	bic.w	r4, lr, #3
  407860:	f1a5 0908 	sub.w	r9, r5, #8
  407864:	d83c      	bhi.n	4078e0 <_realloc_r+0xa4>
  407866:	2210      	movs	r2, #16
  407868:	4617      	mov	r7, r2
  40786a:	42be      	cmp	r6, r7
  40786c:	d83d      	bhi.n	4078ea <_realloc_r+0xae>
  40786e:	4294      	cmp	r4, r2
  407870:	da43      	bge.n	4078fa <_realloc_r+0xbe>
  407872:	4bc4      	ldr	r3, [pc, #784]	; (407b84 <_realloc_r+0x348>)
  407874:	6899      	ldr	r1, [r3, #8]
  407876:	eb09 0004 	add.w	r0, r9, r4
  40787a:	4288      	cmp	r0, r1
  40787c:	f000 80b4 	beq.w	4079e8 <_realloc_r+0x1ac>
  407880:	6843      	ldr	r3, [r0, #4]
  407882:	f023 0101 	bic.w	r1, r3, #1
  407886:	4401      	add	r1, r0
  407888:	6849      	ldr	r1, [r1, #4]
  40788a:	07c9      	lsls	r1, r1, #31
  40788c:	d54c      	bpl.n	407928 <_realloc_r+0xec>
  40788e:	f01e 0f01 	tst.w	lr, #1
  407892:	f000 809b 	beq.w	4079cc <_realloc_r+0x190>
  407896:	4631      	mov	r1, r6
  407898:	4640      	mov	r0, r8
  40789a:	f7fe fd4f 	bl	40633c <_malloc_r>
  40789e:	4606      	mov	r6, r0
  4078a0:	2800      	cmp	r0, #0
  4078a2:	d03a      	beq.n	40791a <_realloc_r+0xde>
  4078a4:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4078a8:	f023 0301 	bic.w	r3, r3, #1
  4078ac:	444b      	add	r3, r9
  4078ae:	f1a0 0208 	sub.w	r2, r0, #8
  4078b2:	429a      	cmp	r2, r3
  4078b4:	f000 8121 	beq.w	407afa <_realloc_r+0x2be>
  4078b8:	1f22      	subs	r2, r4, #4
  4078ba:	2a24      	cmp	r2, #36	; 0x24
  4078bc:	f200 8107 	bhi.w	407ace <_realloc_r+0x292>
  4078c0:	2a13      	cmp	r2, #19
  4078c2:	f200 80db 	bhi.w	407a7c <_realloc_r+0x240>
  4078c6:	4603      	mov	r3, r0
  4078c8:	462a      	mov	r2, r5
  4078ca:	6811      	ldr	r1, [r2, #0]
  4078cc:	6019      	str	r1, [r3, #0]
  4078ce:	6851      	ldr	r1, [r2, #4]
  4078d0:	6059      	str	r1, [r3, #4]
  4078d2:	6892      	ldr	r2, [r2, #8]
  4078d4:	609a      	str	r2, [r3, #8]
  4078d6:	4629      	mov	r1, r5
  4078d8:	4640      	mov	r0, r8
  4078da:	f7ff fe4f 	bl	40757c <_free_r>
  4078de:	e01c      	b.n	40791a <_realloc_r+0xde>
  4078e0:	f027 0707 	bic.w	r7, r7, #7
  4078e4:	2f00      	cmp	r7, #0
  4078e6:	463a      	mov	r2, r7
  4078e8:	dabf      	bge.n	40786a <_realloc_r+0x2e>
  4078ea:	2600      	movs	r6, #0
  4078ec:	230c      	movs	r3, #12
  4078ee:	4630      	mov	r0, r6
  4078f0:	f8c8 3000 	str.w	r3, [r8]
  4078f4:	b003      	add	sp, #12
  4078f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4078fa:	462e      	mov	r6, r5
  4078fc:	1be3      	subs	r3, r4, r7
  4078fe:	2b0f      	cmp	r3, #15
  407900:	d81e      	bhi.n	407940 <_realloc_r+0x104>
  407902:	f8d9 3004 	ldr.w	r3, [r9, #4]
  407906:	f003 0301 	and.w	r3, r3, #1
  40790a:	4323      	orrs	r3, r4
  40790c:	444c      	add	r4, r9
  40790e:	f8c9 3004 	str.w	r3, [r9, #4]
  407912:	6863      	ldr	r3, [r4, #4]
  407914:	f043 0301 	orr.w	r3, r3, #1
  407918:	6063      	str	r3, [r4, #4]
  40791a:	4640      	mov	r0, r8
  40791c:	f7ff f8dc 	bl	406ad8 <__malloc_unlock>
  407920:	4630      	mov	r0, r6
  407922:	b003      	add	sp, #12
  407924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407928:	f023 0303 	bic.w	r3, r3, #3
  40792c:	18e1      	adds	r1, r4, r3
  40792e:	4291      	cmp	r1, r2
  407930:	db1f      	blt.n	407972 <_realloc_r+0x136>
  407932:	68c3      	ldr	r3, [r0, #12]
  407934:	6882      	ldr	r2, [r0, #8]
  407936:	462e      	mov	r6, r5
  407938:	60d3      	str	r3, [r2, #12]
  40793a:	460c      	mov	r4, r1
  40793c:	609a      	str	r2, [r3, #8]
  40793e:	e7dd      	b.n	4078fc <_realloc_r+0xc0>
  407940:	f8d9 2004 	ldr.w	r2, [r9, #4]
  407944:	eb09 0107 	add.w	r1, r9, r7
  407948:	f002 0201 	and.w	r2, r2, #1
  40794c:	444c      	add	r4, r9
  40794e:	f043 0301 	orr.w	r3, r3, #1
  407952:	4317      	orrs	r7, r2
  407954:	f8c9 7004 	str.w	r7, [r9, #4]
  407958:	604b      	str	r3, [r1, #4]
  40795a:	6863      	ldr	r3, [r4, #4]
  40795c:	f043 0301 	orr.w	r3, r3, #1
  407960:	3108      	adds	r1, #8
  407962:	6063      	str	r3, [r4, #4]
  407964:	4640      	mov	r0, r8
  407966:	f7ff fe09 	bl	40757c <_free_r>
  40796a:	e7d6      	b.n	40791a <_realloc_r+0xde>
  40796c:	4611      	mov	r1, r2
  40796e:	f7fe bce5 	b.w	40633c <_malloc_r>
  407972:	f01e 0f01 	tst.w	lr, #1
  407976:	d18e      	bne.n	407896 <_realloc_r+0x5a>
  407978:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40797c:	eba9 0a01 	sub.w	sl, r9, r1
  407980:	f8da 1004 	ldr.w	r1, [sl, #4]
  407984:	f021 0103 	bic.w	r1, r1, #3
  407988:	440b      	add	r3, r1
  40798a:	4423      	add	r3, r4
  40798c:	4293      	cmp	r3, r2
  40798e:	db25      	blt.n	4079dc <_realloc_r+0x1a0>
  407990:	68c2      	ldr	r2, [r0, #12]
  407992:	6881      	ldr	r1, [r0, #8]
  407994:	4656      	mov	r6, sl
  407996:	60ca      	str	r2, [r1, #12]
  407998:	6091      	str	r1, [r2, #8]
  40799a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40799e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4079a2:	1f22      	subs	r2, r4, #4
  4079a4:	2a24      	cmp	r2, #36	; 0x24
  4079a6:	60c1      	str	r1, [r0, #12]
  4079a8:	6088      	str	r0, [r1, #8]
  4079aa:	f200 8094 	bhi.w	407ad6 <_realloc_r+0x29a>
  4079ae:	2a13      	cmp	r2, #19
  4079b0:	d96f      	bls.n	407a92 <_realloc_r+0x256>
  4079b2:	6829      	ldr	r1, [r5, #0]
  4079b4:	f8ca 1008 	str.w	r1, [sl, #8]
  4079b8:	6869      	ldr	r1, [r5, #4]
  4079ba:	f8ca 100c 	str.w	r1, [sl, #12]
  4079be:	2a1b      	cmp	r2, #27
  4079c0:	f200 80a2 	bhi.w	407b08 <_realloc_r+0x2cc>
  4079c4:	3508      	adds	r5, #8
  4079c6:	f10a 0210 	add.w	r2, sl, #16
  4079ca:	e063      	b.n	407a94 <_realloc_r+0x258>
  4079cc:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4079d0:	eba9 0a03 	sub.w	sl, r9, r3
  4079d4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4079d8:	f021 0103 	bic.w	r1, r1, #3
  4079dc:	1863      	adds	r3, r4, r1
  4079de:	4293      	cmp	r3, r2
  4079e0:	f6ff af59 	blt.w	407896 <_realloc_r+0x5a>
  4079e4:	4656      	mov	r6, sl
  4079e6:	e7d8      	b.n	40799a <_realloc_r+0x15e>
  4079e8:	6841      	ldr	r1, [r0, #4]
  4079ea:	f021 0b03 	bic.w	fp, r1, #3
  4079ee:	44a3      	add	fp, r4
  4079f0:	f107 0010 	add.w	r0, r7, #16
  4079f4:	4583      	cmp	fp, r0
  4079f6:	da56      	bge.n	407aa6 <_realloc_r+0x26a>
  4079f8:	f01e 0f01 	tst.w	lr, #1
  4079fc:	f47f af4b 	bne.w	407896 <_realloc_r+0x5a>
  407a00:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407a04:	eba9 0a01 	sub.w	sl, r9, r1
  407a08:	f8da 1004 	ldr.w	r1, [sl, #4]
  407a0c:	f021 0103 	bic.w	r1, r1, #3
  407a10:	448b      	add	fp, r1
  407a12:	4558      	cmp	r0, fp
  407a14:	dce2      	bgt.n	4079dc <_realloc_r+0x1a0>
  407a16:	4656      	mov	r6, sl
  407a18:	f8da 100c 	ldr.w	r1, [sl, #12]
  407a1c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407a20:	1f22      	subs	r2, r4, #4
  407a22:	2a24      	cmp	r2, #36	; 0x24
  407a24:	60c1      	str	r1, [r0, #12]
  407a26:	6088      	str	r0, [r1, #8]
  407a28:	f200 808f 	bhi.w	407b4a <_realloc_r+0x30e>
  407a2c:	2a13      	cmp	r2, #19
  407a2e:	f240 808a 	bls.w	407b46 <_realloc_r+0x30a>
  407a32:	6829      	ldr	r1, [r5, #0]
  407a34:	f8ca 1008 	str.w	r1, [sl, #8]
  407a38:	6869      	ldr	r1, [r5, #4]
  407a3a:	f8ca 100c 	str.w	r1, [sl, #12]
  407a3e:	2a1b      	cmp	r2, #27
  407a40:	f200 808a 	bhi.w	407b58 <_realloc_r+0x31c>
  407a44:	3508      	adds	r5, #8
  407a46:	f10a 0210 	add.w	r2, sl, #16
  407a4a:	6829      	ldr	r1, [r5, #0]
  407a4c:	6011      	str	r1, [r2, #0]
  407a4e:	6869      	ldr	r1, [r5, #4]
  407a50:	6051      	str	r1, [r2, #4]
  407a52:	68a9      	ldr	r1, [r5, #8]
  407a54:	6091      	str	r1, [r2, #8]
  407a56:	eb0a 0107 	add.w	r1, sl, r7
  407a5a:	ebab 0207 	sub.w	r2, fp, r7
  407a5e:	f042 0201 	orr.w	r2, r2, #1
  407a62:	6099      	str	r1, [r3, #8]
  407a64:	604a      	str	r2, [r1, #4]
  407a66:	f8da 3004 	ldr.w	r3, [sl, #4]
  407a6a:	f003 0301 	and.w	r3, r3, #1
  407a6e:	431f      	orrs	r7, r3
  407a70:	4640      	mov	r0, r8
  407a72:	f8ca 7004 	str.w	r7, [sl, #4]
  407a76:	f7ff f82f 	bl	406ad8 <__malloc_unlock>
  407a7a:	e751      	b.n	407920 <_realloc_r+0xe4>
  407a7c:	682b      	ldr	r3, [r5, #0]
  407a7e:	6003      	str	r3, [r0, #0]
  407a80:	686b      	ldr	r3, [r5, #4]
  407a82:	6043      	str	r3, [r0, #4]
  407a84:	2a1b      	cmp	r2, #27
  407a86:	d82d      	bhi.n	407ae4 <_realloc_r+0x2a8>
  407a88:	f100 0308 	add.w	r3, r0, #8
  407a8c:	f105 0208 	add.w	r2, r5, #8
  407a90:	e71b      	b.n	4078ca <_realloc_r+0x8e>
  407a92:	4632      	mov	r2, r6
  407a94:	6829      	ldr	r1, [r5, #0]
  407a96:	6011      	str	r1, [r2, #0]
  407a98:	6869      	ldr	r1, [r5, #4]
  407a9a:	6051      	str	r1, [r2, #4]
  407a9c:	68a9      	ldr	r1, [r5, #8]
  407a9e:	6091      	str	r1, [r2, #8]
  407aa0:	461c      	mov	r4, r3
  407aa2:	46d1      	mov	r9, sl
  407aa4:	e72a      	b.n	4078fc <_realloc_r+0xc0>
  407aa6:	eb09 0107 	add.w	r1, r9, r7
  407aaa:	ebab 0b07 	sub.w	fp, fp, r7
  407aae:	f04b 0201 	orr.w	r2, fp, #1
  407ab2:	6099      	str	r1, [r3, #8]
  407ab4:	604a      	str	r2, [r1, #4]
  407ab6:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407aba:	f003 0301 	and.w	r3, r3, #1
  407abe:	431f      	orrs	r7, r3
  407ac0:	4640      	mov	r0, r8
  407ac2:	f845 7c04 	str.w	r7, [r5, #-4]
  407ac6:	f7ff f807 	bl	406ad8 <__malloc_unlock>
  407aca:	462e      	mov	r6, r5
  407acc:	e728      	b.n	407920 <_realloc_r+0xe4>
  407ace:	4629      	mov	r1, r5
  407ad0:	f7ff fe50 	bl	407774 <memmove>
  407ad4:	e6ff      	b.n	4078d6 <_realloc_r+0x9a>
  407ad6:	4629      	mov	r1, r5
  407ad8:	4630      	mov	r0, r6
  407ada:	461c      	mov	r4, r3
  407adc:	46d1      	mov	r9, sl
  407ade:	f7ff fe49 	bl	407774 <memmove>
  407ae2:	e70b      	b.n	4078fc <_realloc_r+0xc0>
  407ae4:	68ab      	ldr	r3, [r5, #8]
  407ae6:	6083      	str	r3, [r0, #8]
  407ae8:	68eb      	ldr	r3, [r5, #12]
  407aea:	60c3      	str	r3, [r0, #12]
  407aec:	2a24      	cmp	r2, #36	; 0x24
  407aee:	d017      	beq.n	407b20 <_realloc_r+0x2e4>
  407af0:	f100 0310 	add.w	r3, r0, #16
  407af4:	f105 0210 	add.w	r2, r5, #16
  407af8:	e6e7      	b.n	4078ca <_realloc_r+0x8e>
  407afa:	f850 3c04 	ldr.w	r3, [r0, #-4]
  407afe:	f023 0303 	bic.w	r3, r3, #3
  407b02:	441c      	add	r4, r3
  407b04:	462e      	mov	r6, r5
  407b06:	e6f9      	b.n	4078fc <_realloc_r+0xc0>
  407b08:	68a9      	ldr	r1, [r5, #8]
  407b0a:	f8ca 1010 	str.w	r1, [sl, #16]
  407b0e:	68e9      	ldr	r1, [r5, #12]
  407b10:	f8ca 1014 	str.w	r1, [sl, #20]
  407b14:	2a24      	cmp	r2, #36	; 0x24
  407b16:	d00c      	beq.n	407b32 <_realloc_r+0x2f6>
  407b18:	3510      	adds	r5, #16
  407b1a:	f10a 0218 	add.w	r2, sl, #24
  407b1e:	e7b9      	b.n	407a94 <_realloc_r+0x258>
  407b20:	692b      	ldr	r3, [r5, #16]
  407b22:	6103      	str	r3, [r0, #16]
  407b24:	696b      	ldr	r3, [r5, #20]
  407b26:	6143      	str	r3, [r0, #20]
  407b28:	f105 0218 	add.w	r2, r5, #24
  407b2c:	f100 0318 	add.w	r3, r0, #24
  407b30:	e6cb      	b.n	4078ca <_realloc_r+0x8e>
  407b32:	692a      	ldr	r2, [r5, #16]
  407b34:	f8ca 2018 	str.w	r2, [sl, #24]
  407b38:	696a      	ldr	r2, [r5, #20]
  407b3a:	f8ca 201c 	str.w	r2, [sl, #28]
  407b3e:	3518      	adds	r5, #24
  407b40:	f10a 0220 	add.w	r2, sl, #32
  407b44:	e7a6      	b.n	407a94 <_realloc_r+0x258>
  407b46:	4632      	mov	r2, r6
  407b48:	e77f      	b.n	407a4a <_realloc_r+0x20e>
  407b4a:	4629      	mov	r1, r5
  407b4c:	4630      	mov	r0, r6
  407b4e:	9301      	str	r3, [sp, #4]
  407b50:	f7ff fe10 	bl	407774 <memmove>
  407b54:	9b01      	ldr	r3, [sp, #4]
  407b56:	e77e      	b.n	407a56 <_realloc_r+0x21a>
  407b58:	68a9      	ldr	r1, [r5, #8]
  407b5a:	f8ca 1010 	str.w	r1, [sl, #16]
  407b5e:	68e9      	ldr	r1, [r5, #12]
  407b60:	f8ca 1014 	str.w	r1, [sl, #20]
  407b64:	2a24      	cmp	r2, #36	; 0x24
  407b66:	d003      	beq.n	407b70 <_realloc_r+0x334>
  407b68:	3510      	adds	r5, #16
  407b6a:	f10a 0218 	add.w	r2, sl, #24
  407b6e:	e76c      	b.n	407a4a <_realloc_r+0x20e>
  407b70:	692a      	ldr	r2, [r5, #16]
  407b72:	f8ca 2018 	str.w	r2, [sl, #24]
  407b76:	696a      	ldr	r2, [r5, #20]
  407b78:	f8ca 201c 	str.w	r2, [sl, #28]
  407b7c:	3518      	adds	r5, #24
  407b7e:	f10a 0220 	add.w	r2, sl, #32
  407b82:	e762      	b.n	407a4a <_realloc_r+0x20e>
  407b84:	20000440 	.word	0x20000440

00407b88 <__ascii_wctomb>:
  407b88:	b121      	cbz	r1, 407b94 <__ascii_wctomb+0xc>
  407b8a:	2aff      	cmp	r2, #255	; 0xff
  407b8c:	d804      	bhi.n	407b98 <__ascii_wctomb+0x10>
  407b8e:	700a      	strb	r2, [r1, #0]
  407b90:	2001      	movs	r0, #1
  407b92:	4770      	bx	lr
  407b94:	4608      	mov	r0, r1
  407b96:	4770      	bx	lr
  407b98:	238a      	movs	r3, #138	; 0x8a
  407b9a:	6003      	str	r3, [r0, #0]
  407b9c:	f04f 30ff 	mov.w	r0, #4294967295
  407ba0:	4770      	bx	lr
  407ba2:	bf00      	nop

00407ba4 <__aeabi_drsub>:
  407ba4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407ba8:	e002      	b.n	407bb0 <__adddf3>
  407baa:	bf00      	nop

00407bac <__aeabi_dsub>:
  407bac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407bb0 <__adddf3>:
  407bb0:	b530      	push	{r4, r5, lr}
  407bb2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  407bb6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  407bba:	ea94 0f05 	teq	r4, r5
  407bbe:	bf08      	it	eq
  407bc0:	ea90 0f02 	teqeq	r0, r2
  407bc4:	bf1f      	itttt	ne
  407bc6:	ea54 0c00 	orrsne.w	ip, r4, r0
  407bca:	ea55 0c02 	orrsne.w	ip, r5, r2
  407bce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  407bd2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407bd6:	f000 80e2 	beq.w	407d9e <__adddf3+0x1ee>
  407bda:	ea4f 5454 	mov.w	r4, r4, lsr #21
  407bde:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  407be2:	bfb8      	it	lt
  407be4:	426d      	neglt	r5, r5
  407be6:	dd0c      	ble.n	407c02 <__adddf3+0x52>
  407be8:	442c      	add	r4, r5
  407bea:	ea80 0202 	eor.w	r2, r0, r2
  407bee:	ea81 0303 	eor.w	r3, r1, r3
  407bf2:	ea82 0000 	eor.w	r0, r2, r0
  407bf6:	ea83 0101 	eor.w	r1, r3, r1
  407bfa:	ea80 0202 	eor.w	r2, r0, r2
  407bfe:	ea81 0303 	eor.w	r3, r1, r3
  407c02:	2d36      	cmp	r5, #54	; 0x36
  407c04:	bf88      	it	hi
  407c06:	bd30      	pophi	{r4, r5, pc}
  407c08:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407c0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407c10:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  407c14:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  407c18:	d002      	beq.n	407c20 <__adddf3+0x70>
  407c1a:	4240      	negs	r0, r0
  407c1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407c20:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  407c24:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407c28:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  407c2c:	d002      	beq.n	407c34 <__adddf3+0x84>
  407c2e:	4252      	negs	r2, r2
  407c30:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  407c34:	ea94 0f05 	teq	r4, r5
  407c38:	f000 80a7 	beq.w	407d8a <__adddf3+0x1da>
  407c3c:	f1a4 0401 	sub.w	r4, r4, #1
  407c40:	f1d5 0e20 	rsbs	lr, r5, #32
  407c44:	db0d      	blt.n	407c62 <__adddf3+0xb2>
  407c46:	fa02 fc0e 	lsl.w	ip, r2, lr
  407c4a:	fa22 f205 	lsr.w	r2, r2, r5
  407c4e:	1880      	adds	r0, r0, r2
  407c50:	f141 0100 	adc.w	r1, r1, #0
  407c54:	fa03 f20e 	lsl.w	r2, r3, lr
  407c58:	1880      	adds	r0, r0, r2
  407c5a:	fa43 f305 	asr.w	r3, r3, r5
  407c5e:	4159      	adcs	r1, r3
  407c60:	e00e      	b.n	407c80 <__adddf3+0xd0>
  407c62:	f1a5 0520 	sub.w	r5, r5, #32
  407c66:	f10e 0e20 	add.w	lr, lr, #32
  407c6a:	2a01      	cmp	r2, #1
  407c6c:	fa03 fc0e 	lsl.w	ip, r3, lr
  407c70:	bf28      	it	cs
  407c72:	f04c 0c02 	orrcs.w	ip, ip, #2
  407c76:	fa43 f305 	asr.w	r3, r3, r5
  407c7a:	18c0      	adds	r0, r0, r3
  407c7c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  407c80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407c84:	d507      	bpl.n	407c96 <__adddf3+0xe6>
  407c86:	f04f 0e00 	mov.w	lr, #0
  407c8a:	f1dc 0c00 	rsbs	ip, ip, #0
  407c8e:	eb7e 0000 	sbcs.w	r0, lr, r0
  407c92:	eb6e 0101 	sbc.w	r1, lr, r1
  407c96:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  407c9a:	d31b      	bcc.n	407cd4 <__adddf3+0x124>
  407c9c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407ca0:	d30c      	bcc.n	407cbc <__adddf3+0x10c>
  407ca2:	0849      	lsrs	r1, r1, #1
  407ca4:	ea5f 0030 	movs.w	r0, r0, rrx
  407ca8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  407cac:	f104 0401 	add.w	r4, r4, #1
  407cb0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  407cb4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407cb8:	f080 809a 	bcs.w	407df0 <__adddf3+0x240>
  407cbc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  407cc0:	bf08      	it	eq
  407cc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407cc6:	f150 0000 	adcs.w	r0, r0, #0
  407cca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407cce:	ea41 0105 	orr.w	r1, r1, r5
  407cd2:	bd30      	pop	{r4, r5, pc}
  407cd4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  407cd8:	4140      	adcs	r0, r0
  407cda:	eb41 0101 	adc.w	r1, r1, r1
  407cde:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407ce2:	f1a4 0401 	sub.w	r4, r4, #1
  407ce6:	d1e9      	bne.n	407cbc <__adddf3+0x10c>
  407ce8:	f091 0f00 	teq	r1, #0
  407cec:	bf04      	itt	eq
  407cee:	4601      	moveq	r1, r0
  407cf0:	2000      	moveq	r0, #0
  407cf2:	fab1 f381 	clz	r3, r1
  407cf6:	bf08      	it	eq
  407cf8:	3320      	addeq	r3, #32
  407cfa:	f1a3 030b 	sub.w	r3, r3, #11
  407cfe:	f1b3 0220 	subs.w	r2, r3, #32
  407d02:	da0c      	bge.n	407d1e <__adddf3+0x16e>
  407d04:	320c      	adds	r2, #12
  407d06:	dd08      	ble.n	407d1a <__adddf3+0x16a>
  407d08:	f102 0c14 	add.w	ip, r2, #20
  407d0c:	f1c2 020c 	rsb	r2, r2, #12
  407d10:	fa01 f00c 	lsl.w	r0, r1, ip
  407d14:	fa21 f102 	lsr.w	r1, r1, r2
  407d18:	e00c      	b.n	407d34 <__adddf3+0x184>
  407d1a:	f102 0214 	add.w	r2, r2, #20
  407d1e:	bfd8      	it	le
  407d20:	f1c2 0c20 	rsble	ip, r2, #32
  407d24:	fa01 f102 	lsl.w	r1, r1, r2
  407d28:	fa20 fc0c 	lsr.w	ip, r0, ip
  407d2c:	bfdc      	itt	le
  407d2e:	ea41 010c 	orrle.w	r1, r1, ip
  407d32:	4090      	lslle	r0, r2
  407d34:	1ae4      	subs	r4, r4, r3
  407d36:	bfa2      	ittt	ge
  407d38:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  407d3c:	4329      	orrge	r1, r5
  407d3e:	bd30      	popge	{r4, r5, pc}
  407d40:	ea6f 0404 	mvn.w	r4, r4
  407d44:	3c1f      	subs	r4, #31
  407d46:	da1c      	bge.n	407d82 <__adddf3+0x1d2>
  407d48:	340c      	adds	r4, #12
  407d4a:	dc0e      	bgt.n	407d6a <__adddf3+0x1ba>
  407d4c:	f104 0414 	add.w	r4, r4, #20
  407d50:	f1c4 0220 	rsb	r2, r4, #32
  407d54:	fa20 f004 	lsr.w	r0, r0, r4
  407d58:	fa01 f302 	lsl.w	r3, r1, r2
  407d5c:	ea40 0003 	orr.w	r0, r0, r3
  407d60:	fa21 f304 	lsr.w	r3, r1, r4
  407d64:	ea45 0103 	orr.w	r1, r5, r3
  407d68:	bd30      	pop	{r4, r5, pc}
  407d6a:	f1c4 040c 	rsb	r4, r4, #12
  407d6e:	f1c4 0220 	rsb	r2, r4, #32
  407d72:	fa20 f002 	lsr.w	r0, r0, r2
  407d76:	fa01 f304 	lsl.w	r3, r1, r4
  407d7a:	ea40 0003 	orr.w	r0, r0, r3
  407d7e:	4629      	mov	r1, r5
  407d80:	bd30      	pop	{r4, r5, pc}
  407d82:	fa21 f004 	lsr.w	r0, r1, r4
  407d86:	4629      	mov	r1, r5
  407d88:	bd30      	pop	{r4, r5, pc}
  407d8a:	f094 0f00 	teq	r4, #0
  407d8e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  407d92:	bf06      	itte	eq
  407d94:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407d98:	3401      	addeq	r4, #1
  407d9a:	3d01      	subne	r5, #1
  407d9c:	e74e      	b.n	407c3c <__adddf3+0x8c>
  407d9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407da2:	bf18      	it	ne
  407da4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407da8:	d029      	beq.n	407dfe <__adddf3+0x24e>
  407daa:	ea94 0f05 	teq	r4, r5
  407dae:	bf08      	it	eq
  407db0:	ea90 0f02 	teqeq	r0, r2
  407db4:	d005      	beq.n	407dc2 <__adddf3+0x212>
  407db6:	ea54 0c00 	orrs.w	ip, r4, r0
  407dba:	bf04      	itt	eq
  407dbc:	4619      	moveq	r1, r3
  407dbe:	4610      	moveq	r0, r2
  407dc0:	bd30      	pop	{r4, r5, pc}
  407dc2:	ea91 0f03 	teq	r1, r3
  407dc6:	bf1e      	ittt	ne
  407dc8:	2100      	movne	r1, #0
  407dca:	2000      	movne	r0, #0
  407dcc:	bd30      	popne	{r4, r5, pc}
  407dce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  407dd2:	d105      	bne.n	407de0 <__adddf3+0x230>
  407dd4:	0040      	lsls	r0, r0, #1
  407dd6:	4149      	adcs	r1, r1
  407dd8:	bf28      	it	cs
  407dda:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  407dde:	bd30      	pop	{r4, r5, pc}
  407de0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  407de4:	bf3c      	itt	cc
  407de6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  407dea:	bd30      	popcc	{r4, r5, pc}
  407dec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407df0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  407df4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407df8:	f04f 0000 	mov.w	r0, #0
  407dfc:	bd30      	pop	{r4, r5, pc}
  407dfe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407e02:	bf1a      	itte	ne
  407e04:	4619      	movne	r1, r3
  407e06:	4610      	movne	r0, r2
  407e08:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  407e0c:	bf1c      	itt	ne
  407e0e:	460b      	movne	r3, r1
  407e10:	4602      	movne	r2, r0
  407e12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407e16:	bf06      	itte	eq
  407e18:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  407e1c:	ea91 0f03 	teqeq	r1, r3
  407e20:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  407e24:	bd30      	pop	{r4, r5, pc}
  407e26:	bf00      	nop

00407e28 <__aeabi_ui2d>:
  407e28:	f090 0f00 	teq	r0, #0
  407e2c:	bf04      	itt	eq
  407e2e:	2100      	moveq	r1, #0
  407e30:	4770      	bxeq	lr
  407e32:	b530      	push	{r4, r5, lr}
  407e34:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407e38:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407e3c:	f04f 0500 	mov.w	r5, #0
  407e40:	f04f 0100 	mov.w	r1, #0
  407e44:	e750      	b.n	407ce8 <__adddf3+0x138>
  407e46:	bf00      	nop

00407e48 <__aeabi_i2d>:
  407e48:	f090 0f00 	teq	r0, #0
  407e4c:	bf04      	itt	eq
  407e4e:	2100      	moveq	r1, #0
  407e50:	4770      	bxeq	lr
  407e52:	b530      	push	{r4, r5, lr}
  407e54:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407e58:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407e5c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  407e60:	bf48      	it	mi
  407e62:	4240      	negmi	r0, r0
  407e64:	f04f 0100 	mov.w	r1, #0
  407e68:	e73e      	b.n	407ce8 <__adddf3+0x138>
  407e6a:	bf00      	nop

00407e6c <__aeabi_f2d>:
  407e6c:	0042      	lsls	r2, r0, #1
  407e6e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  407e72:	ea4f 0131 	mov.w	r1, r1, rrx
  407e76:	ea4f 7002 	mov.w	r0, r2, lsl #28
  407e7a:	bf1f      	itttt	ne
  407e7c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  407e80:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407e84:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407e88:	4770      	bxne	lr
  407e8a:	f092 0f00 	teq	r2, #0
  407e8e:	bf14      	ite	ne
  407e90:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407e94:	4770      	bxeq	lr
  407e96:	b530      	push	{r4, r5, lr}
  407e98:	f44f 7460 	mov.w	r4, #896	; 0x380
  407e9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407ea0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407ea4:	e720      	b.n	407ce8 <__adddf3+0x138>
  407ea6:	bf00      	nop

00407ea8 <__aeabi_ul2d>:
  407ea8:	ea50 0201 	orrs.w	r2, r0, r1
  407eac:	bf08      	it	eq
  407eae:	4770      	bxeq	lr
  407eb0:	b530      	push	{r4, r5, lr}
  407eb2:	f04f 0500 	mov.w	r5, #0
  407eb6:	e00a      	b.n	407ece <__aeabi_l2d+0x16>

00407eb8 <__aeabi_l2d>:
  407eb8:	ea50 0201 	orrs.w	r2, r0, r1
  407ebc:	bf08      	it	eq
  407ebe:	4770      	bxeq	lr
  407ec0:	b530      	push	{r4, r5, lr}
  407ec2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  407ec6:	d502      	bpl.n	407ece <__aeabi_l2d+0x16>
  407ec8:	4240      	negs	r0, r0
  407eca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407ece:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407ed2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407ed6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  407eda:	f43f aedc 	beq.w	407c96 <__adddf3+0xe6>
  407ede:	f04f 0203 	mov.w	r2, #3
  407ee2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407ee6:	bf18      	it	ne
  407ee8:	3203      	addne	r2, #3
  407eea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407eee:	bf18      	it	ne
  407ef0:	3203      	addne	r2, #3
  407ef2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  407ef6:	f1c2 0320 	rsb	r3, r2, #32
  407efa:	fa00 fc03 	lsl.w	ip, r0, r3
  407efe:	fa20 f002 	lsr.w	r0, r0, r2
  407f02:	fa01 fe03 	lsl.w	lr, r1, r3
  407f06:	ea40 000e 	orr.w	r0, r0, lr
  407f0a:	fa21 f102 	lsr.w	r1, r1, r2
  407f0e:	4414      	add	r4, r2
  407f10:	e6c1      	b.n	407c96 <__adddf3+0xe6>
  407f12:	bf00      	nop

00407f14 <__aeabi_dmul>:
  407f14:	b570      	push	{r4, r5, r6, lr}
  407f16:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407f1a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407f1e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407f22:	bf1d      	ittte	ne
  407f24:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407f28:	ea94 0f0c 	teqne	r4, ip
  407f2c:	ea95 0f0c 	teqne	r5, ip
  407f30:	f000 f8de 	bleq	4080f0 <__aeabi_dmul+0x1dc>
  407f34:	442c      	add	r4, r5
  407f36:	ea81 0603 	eor.w	r6, r1, r3
  407f3a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  407f3e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  407f42:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  407f46:	bf18      	it	ne
  407f48:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407f4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407f50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407f54:	d038      	beq.n	407fc8 <__aeabi_dmul+0xb4>
  407f56:	fba0 ce02 	umull	ip, lr, r0, r2
  407f5a:	f04f 0500 	mov.w	r5, #0
  407f5e:	fbe1 e502 	umlal	lr, r5, r1, r2
  407f62:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407f66:	fbe0 e503 	umlal	lr, r5, r0, r3
  407f6a:	f04f 0600 	mov.w	r6, #0
  407f6e:	fbe1 5603 	umlal	r5, r6, r1, r3
  407f72:	f09c 0f00 	teq	ip, #0
  407f76:	bf18      	it	ne
  407f78:	f04e 0e01 	orrne.w	lr, lr, #1
  407f7c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407f80:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407f84:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407f88:	d204      	bcs.n	407f94 <__aeabi_dmul+0x80>
  407f8a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  407f8e:	416d      	adcs	r5, r5
  407f90:	eb46 0606 	adc.w	r6, r6, r6
  407f94:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407f98:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407f9c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407fa0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407fa4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407fa8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407fac:	bf88      	it	hi
  407fae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407fb2:	d81e      	bhi.n	407ff2 <__aeabi_dmul+0xde>
  407fb4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407fb8:	bf08      	it	eq
  407fba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  407fbe:	f150 0000 	adcs.w	r0, r0, #0
  407fc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407fc6:	bd70      	pop	{r4, r5, r6, pc}
  407fc8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407fcc:	ea46 0101 	orr.w	r1, r6, r1
  407fd0:	ea40 0002 	orr.w	r0, r0, r2
  407fd4:	ea81 0103 	eor.w	r1, r1, r3
  407fd8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407fdc:	bfc2      	ittt	gt
  407fde:	ebd4 050c 	rsbsgt	r5, r4, ip
  407fe2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407fe6:	bd70      	popgt	{r4, r5, r6, pc}
  407fe8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407fec:	f04f 0e00 	mov.w	lr, #0
  407ff0:	3c01      	subs	r4, #1
  407ff2:	f300 80ab 	bgt.w	40814c <__aeabi_dmul+0x238>
  407ff6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  407ffa:	bfde      	ittt	le
  407ffc:	2000      	movle	r0, #0
  407ffe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  408002:	bd70      	pople	{r4, r5, r6, pc}
  408004:	f1c4 0400 	rsb	r4, r4, #0
  408008:	3c20      	subs	r4, #32
  40800a:	da35      	bge.n	408078 <__aeabi_dmul+0x164>
  40800c:	340c      	adds	r4, #12
  40800e:	dc1b      	bgt.n	408048 <__aeabi_dmul+0x134>
  408010:	f104 0414 	add.w	r4, r4, #20
  408014:	f1c4 0520 	rsb	r5, r4, #32
  408018:	fa00 f305 	lsl.w	r3, r0, r5
  40801c:	fa20 f004 	lsr.w	r0, r0, r4
  408020:	fa01 f205 	lsl.w	r2, r1, r5
  408024:	ea40 0002 	orr.w	r0, r0, r2
  408028:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40802c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408030:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408034:	fa21 f604 	lsr.w	r6, r1, r4
  408038:	eb42 0106 	adc.w	r1, r2, r6
  40803c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408040:	bf08      	it	eq
  408042:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408046:	bd70      	pop	{r4, r5, r6, pc}
  408048:	f1c4 040c 	rsb	r4, r4, #12
  40804c:	f1c4 0520 	rsb	r5, r4, #32
  408050:	fa00 f304 	lsl.w	r3, r0, r4
  408054:	fa20 f005 	lsr.w	r0, r0, r5
  408058:	fa01 f204 	lsl.w	r2, r1, r4
  40805c:	ea40 0002 	orr.w	r0, r0, r2
  408060:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408064:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408068:	f141 0100 	adc.w	r1, r1, #0
  40806c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408070:	bf08      	it	eq
  408072:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408076:	bd70      	pop	{r4, r5, r6, pc}
  408078:	f1c4 0520 	rsb	r5, r4, #32
  40807c:	fa00 f205 	lsl.w	r2, r0, r5
  408080:	ea4e 0e02 	orr.w	lr, lr, r2
  408084:	fa20 f304 	lsr.w	r3, r0, r4
  408088:	fa01 f205 	lsl.w	r2, r1, r5
  40808c:	ea43 0302 	orr.w	r3, r3, r2
  408090:	fa21 f004 	lsr.w	r0, r1, r4
  408094:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408098:	fa21 f204 	lsr.w	r2, r1, r4
  40809c:	ea20 0002 	bic.w	r0, r0, r2
  4080a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4080a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4080a8:	bf08      	it	eq
  4080aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4080ae:	bd70      	pop	{r4, r5, r6, pc}
  4080b0:	f094 0f00 	teq	r4, #0
  4080b4:	d10f      	bne.n	4080d6 <__aeabi_dmul+0x1c2>
  4080b6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4080ba:	0040      	lsls	r0, r0, #1
  4080bc:	eb41 0101 	adc.w	r1, r1, r1
  4080c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4080c4:	bf08      	it	eq
  4080c6:	3c01      	subeq	r4, #1
  4080c8:	d0f7      	beq.n	4080ba <__aeabi_dmul+0x1a6>
  4080ca:	ea41 0106 	orr.w	r1, r1, r6
  4080ce:	f095 0f00 	teq	r5, #0
  4080d2:	bf18      	it	ne
  4080d4:	4770      	bxne	lr
  4080d6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4080da:	0052      	lsls	r2, r2, #1
  4080dc:	eb43 0303 	adc.w	r3, r3, r3
  4080e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4080e4:	bf08      	it	eq
  4080e6:	3d01      	subeq	r5, #1
  4080e8:	d0f7      	beq.n	4080da <__aeabi_dmul+0x1c6>
  4080ea:	ea43 0306 	orr.w	r3, r3, r6
  4080ee:	4770      	bx	lr
  4080f0:	ea94 0f0c 	teq	r4, ip
  4080f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4080f8:	bf18      	it	ne
  4080fa:	ea95 0f0c 	teqne	r5, ip
  4080fe:	d00c      	beq.n	40811a <__aeabi_dmul+0x206>
  408100:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408104:	bf18      	it	ne
  408106:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40810a:	d1d1      	bne.n	4080b0 <__aeabi_dmul+0x19c>
  40810c:	ea81 0103 	eor.w	r1, r1, r3
  408110:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408114:	f04f 0000 	mov.w	r0, #0
  408118:	bd70      	pop	{r4, r5, r6, pc}
  40811a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40811e:	bf06      	itte	eq
  408120:	4610      	moveq	r0, r2
  408122:	4619      	moveq	r1, r3
  408124:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408128:	d019      	beq.n	40815e <__aeabi_dmul+0x24a>
  40812a:	ea94 0f0c 	teq	r4, ip
  40812e:	d102      	bne.n	408136 <__aeabi_dmul+0x222>
  408130:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  408134:	d113      	bne.n	40815e <__aeabi_dmul+0x24a>
  408136:	ea95 0f0c 	teq	r5, ip
  40813a:	d105      	bne.n	408148 <__aeabi_dmul+0x234>
  40813c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  408140:	bf1c      	itt	ne
  408142:	4610      	movne	r0, r2
  408144:	4619      	movne	r1, r3
  408146:	d10a      	bne.n	40815e <__aeabi_dmul+0x24a>
  408148:	ea81 0103 	eor.w	r1, r1, r3
  40814c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408150:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408154:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408158:	f04f 0000 	mov.w	r0, #0
  40815c:	bd70      	pop	{r4, r5, r6, pc}
  40815e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408162:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  408166:	bd70      	pop	{r4, r5, r6, pc}

00408168 <__aeabi_ddiv>:
  408168:	b570      	push	{r4, r5, r6, lr}
  40816a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40816e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408172:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  408176:	bf1d      	ittte	ne
  408178:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40817c:	ea94 0f0c 	teqne	r4, ip
  408180:	ea95 0f0c 	teqne	r5, ip
  408184:	f000 f8a7 	bleq	4082d6 <__aeabi_ddiv+0x16e>
  408188:	eba4 0405 	sub.w	r4, r4, r5
  40818c:	ea81 0e03 	eor.w	lr, r1, r3
  408190:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408194:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408198:	f000 8088 	beq.w	4082ac <__aeabi_ddiv+0x144>
  40819c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4081a0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4081a4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4081a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4081ac:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4081b0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4081b4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4081b8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4081bc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4081c0:	429d      	cmp	r5, r3
  4081c2:	bf08      	it	eq
  4081c4:	4296      	cmpeq	r6, r2
  4081c6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4081ca:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4081ce:	d202      	bcs.n	4081d6 <__aeabi_ddiv+0x6e>
  4081d0:	085b      	lsrs	r3, r3, #1
  4081d2:	ea4f 0232 	mov.w	r2, r2, rrx
  4081d6:	1ab6      	subs	r6, r6, r2
  4081d8:	eb65 0503 	sbc.w	r5, r5, r3
  4081dc:	085b      	lsrs	r3, r3, #1
  4081de:	ea4f 0232 	mov.w	r2, r2, rrx
  4081e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4081e6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4081ea:	ebb6 0e02 	subs.w	lr, r6, r2
  4081ee:	eb75 0e03 	sbcs.w	lr, r5, r3
  4081f2:	bf22      	ittt	cs
  4081f4:	1ab6      	subcs	r6, r6, r2
  4081f6:	4675      	movcs	r5, lr
  4081f8:	ea40 000c 	orrcs.w	r0, r0, ip
  4081fc:	085b      	lsrs	r3, r3, #1
  4081fe:	ea4f 0232 	mov.w	r2, r2, rrx
  408202:	ebb6 0e02 	subs.w	lr, r6, r2
  408206:	eb75 0e03 	sbcs.w	lr, r5, r3
  40820a:	bf22      	ittt	cs
  40820c:	1ab6      	subcs	r6, r6, r2
  40820e:	4675      	movcs	r5, lr
  408210:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  408214:	085b      	lsrs	r3, r3, #1
  408216:	ea4f 0232 	mov.w	r2, r2, rrx
  40821a:	ebb6 0e02 	subs.w	lr, r6, r2
  40821e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408222:	bf22      	ittt	cs
  408224:	1ab6      	subcs	r6, r6, r2
  408226:	4675      	movcs	r5, lr
  408228:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40822c:	085b      	lsrs	r3, r3, #1
  40822e:	ea4f 0232 	mov.w	r2, r2, rrx
  408232:	ebb6 0e02 	subs.w	lr, r6, r2
  408236:	eb75 0e03 	sbcs.w	lr, r5, r3
  40823a:	bf22      	ittt	cs
  40823c:	1ab6      	subcs	r6, r6, r2
  40823e:	4675      	movcs	r5, lr
  408240:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  408244:	ea55 0e06 	orrs.w	lr, r5, r6
  408248:	d018      	beq.n	40827c <__aeabi_ddiv+0x114>
  40824a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40824e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  408252:	ea4f 1606 	mov.w	r6, r6, lsl #4
  408256:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40825a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40825e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  408262:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  408266:	d1c0      	bne.n	4081ea <__aeabi_ddiv+0x82>
  408268:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40826c:	d10b      	bne.n	408286 <__aeabi_ddiv+0x11e>
  40826e:	ea41 0100 	orr.w	r1, r1, r0
  408272:	f04f 0000 	mov.w	r0, #0
  408276:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40827a:	e7b6      	b.n	4081ea <__aeabi_ddiv+0x82>
  40827c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408280:	bf04      	itt	eq
  408282:	4301      	orreq	r1, r0
  408284:	2000      	moveq	r0, #0
  408286:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40828a:	bf88      	it	hi
  40828c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408290:	f63f aeaf 	bhi.w	407ff2 <__aeabi_dmul+0xde>
  408294:	ebb5 0c03 	subs.w	ip, r5, r3
  408298:	bf04      	itt	eq
  40829a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40829e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4082a2:	f150 0000 	adcs.w	r0, r0, #0
  4082a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4082aa:	bd70      	pop	{r4, r5, r6, pc}
  4082ac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4082b0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4082b4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4082b8:	bfc2      	ittt	gt
  4082ba:	ebd4 050c 	rsbsgt	r5, r4, ip
  4082be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4082c2:	bd70      	popgt	{r4, r5, r6, pc}
  4082c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4082c8:	f04f 0e00 	mov.w	lr, #0
  4082cc:	3c01      	subs	r4, #1
  4082ce:	e690      	b.n	407ff2 <__aeabi_dmul+0xde>
  4082d0:	ea45 0e06 	orr.w	lr, r5, r6
  4082d4:	e68d      	b.n	407ff2 <__aeabi_dmul+0xde>
  4082d6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4082da:	ea94 0f0c 	teq	r4, ip
  4082de:	bf08      	it	eq
  4082e0:	ea95 0f0c 	teqeq	r5, ip
  4082e4:	f43f af3b 	beq.w	40815e <__aeabi_dmul+0x24a>
  4082e8:	ea94 0f0c 	teq	r4, ip
  4082ec:	d10a      	bne.n	408304 <__aeabi_ddiv+0x19c>
  4082ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4082f2:	f47f af34 	bne.w	40815e <__aeabi_dmul+0x24a>
  4082f6:	ea95 0f0c 	teq	r5, ip
  4082fa:	f47f af25 	bne.w	408148 <__aeabi_dmul+0x234>
  4082fe:	4610      	mov	r0, r2
  408300:	4619      	mov	r1, r3
  408302:	e72c      	b.n	40815e <__aeabi_dmul+0x24a>
  408304:	ea95 0f0c 	teq	r5, ip
  408308:	d106      	bne.n	408318 <__aeabi_ddiv+0x1b0>
  40830a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40830e:	f43f aefd 	beq.w	40810c <__aeabi_dmul+0x1f8>
  408312:	4610      	mov	r0, r2
  408314:	4619      	mov	r1, r3
  408316:	e722      	b.n	40815e <__aeabi_dmul+0x24a>
  408318:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40831c:	bf18      	it	ne
  40831e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408322:	f47f aec5 	bne.w	4080b0 <__aeabi_dmul+0x19c>
  408326:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40832a:	f47f af0d 	bne.w	408148 <__aeabi_dmul+0x234>
  40832e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  408332:	f47f aeeb 	bne.w	40810c <__aeabi_dmul+0x1f8>
  408336:	e712      	b.n	40815e <__aeabi_dmul+0x24a>

00408338 <__gedf2>:
  408338:	f04f 3cff 	mov.w	ip, #4294967295
  40833c:	e006      	b.n	40834c <__cmpdf2+0x4>
  40833e:	bf00      	nop

00408340 <__ledf2>:
  408340:	f04f 0c01 	mov.w	ip, #1
  408344:	e002      	b.n	40834c <__cmpdf2+0x4>
  408346:	bf00      	nop

00408348 <__cmpdf2>:
  408348:	f04f 0c01 	mov.w	ip, #1
  40834c:	f84d cd04 	str.w	ip, [sp, #-4]!
  408350:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408354:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408358:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40835c:	bf18      	it	ne
  40835e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  408362:	d01b      	beq.n	40839c <__cmpdf2+0x54>
  408364:	b001      	add	sp, #4
  408366:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40836a:	bf0c      	ite	eq
  40836c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408370:	ea91 0f03 	teqne	r1, r3
  408374:	bf02      	ittt	eq
  408376:	ea90 0f02 	teqeq	r0, r2
  40837a:	2000      	moveq	r0, #0
  40837c:	4770      	bxeq	lr
  40837e:	f110 0f00 	cmn.w	r0, #0
  408382:	ea91 0f03 	teq	r1, r3
  408386:	bf58      	it	pl
  408388:	4299      	cmppl	r1, r3
  40838a:	bf08      	it	eq
  40838c:	4290      	cmpeq	r0, r2
  40838e:	bf2c      	ite	cs
  408390:	17d8      	asrcs	r0, r3, #31
  408392:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  408396:	f040 0001 	orr.w	r0, r0, #1
  40839a:	4770      	bx	lr
  40839c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4083a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4083a4:	d102      	bne.n	4083ac <__cmpdf2+0x64>
  4083a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4083aa:	d107      	bne.n	4083bc <__cmpdf2+0x74>
  4083ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4083b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4083b4:	d1d6      	bne.n	408364 <__cmpdf2+0x1c>
  4083b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4083ba:	d0d3      	beq.n	408364 <__cmpdf2+0x1c>
  4083bc:	f85d 0b04 	ldr.w	r0, [sp], #4
  4083c0:	4770      	bx	lr
  4083c2:	bf00      	nop

004083c4 <__aeabi_cdrcmple>:
  4083c4:	4684      	mov	ip, r0
  4083c6:	4610      	mov	r0, r2
  4083c8:	4662      	mov	r2, ip
  4083ca:	468c      	mov	ip, r1
  4083cc:	4619      	mov	r1, r3
  4083ce:	4663      	mov	r3, ip
  4083d0:	e000      	b.n	4083d4 <__aeabi_cdcmpeq>
  4083d2:	bf00      	nop

004083d4 <__aeabi_cdcmpeq>:
  4083d4:	b501      	push	{r0, lr}
  4083d6:	f7ff ffb7 	bl	408348 <__cmpdf2>
  4083da:	2800      	cmp	r0, #0
  4083dc:	bf48      	it	mi
  4083de:	f110 0f00 	cmnmi.w	r0, #0
  4083e2:	bd01      	pop	{r0, pc}

004083e4 <__aeabi_dcmpeq>:
  4083e4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4083e8:	f7ff fff4 	bl	4083d4 <__aeabi_cdcmpeq>
  4083ec:	bf0c      	ite	eq
  4083ee:	2001      	moveq	r0, #1
  4083f0:	2000      	movne	r0, #0
  4083f2:	f85d fb08 	ldr.w	pc, [sp], #8
  4083f6:	bf00      	nop

004083f8 <__aeabi_dcmplt>:
  4083f8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4083fc:	f7ff ffea 	bl	4083d4 <__aeabi_cdcmpeq>
  408400:	bf34      	ite	cc
  408402:	2001      	movcc	r0, #1
  408404:	2000      	movcs	r0, #0
  408406:	f85d fb08 	ldr.w	pc, [sp], #8
  40840a:	bf00      	nop

0040840c <__aeabi_dcmple>:
  40840c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408410:	f7ff ffe0 	bl	4083d4 <__aeabi_cdcmpeq>
  408414:	bf94      	ite	ls
  408416:	2001      	movls	r0, #1
  408418:	2000      	movhi	r0, #0
  40841a:	f85d fb08 	ldr.w	pc, [sp], #8
  40841e:	bf00      	nop

00408420 <__aeabi_dcmpge>:
  408420:	f84d ed08 	str.w	lr, [sp, #-8]!
  408424:	f7ff ffce 	bl	4083c4 <__aeabi_cdrcmple>
  408428:	bf94      	ite	ls
  40842a:	2001      	movls	r0, #1
  40842c:	2000      	movhi	r0, #0
  40842e:	f85d fb08 	ldr.w	pc, [sp], #8
  408432:	bf00      	nop

00408434 <__aeabi_dcmpgt>:
  408434:	f84d ed08 	str.w	lr, [sp, #-8]!
  408438:	f7ff ffc4 	bl	4083c4 <__aeabi_cdrcmple>
  40843c:	bf34      	ite	cc
  40843e:	2001      	movcc	r0, #1
  408440:	2000      	movcs	r0, #0
  408442:	f85d fb08 	ldr.w	pc, [sp], #8
  408446:	bf00      	nop

00408448 <__aeabi_dcmpun>:
  408448:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40844c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408450:	d102      	bne.n	408458 <__aeabi_dcmpun+0x10>
  408452:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408456:	d10a      	bne.n	40846e <__aeabi_dcmpun+0x26>
  408458:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40845c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408460:	d102      	bne.n	408468 <__aeabi_dcmpun+0x20>
  408462:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408466:	d102      	bne.n	40846e <__aeabi_dcmpun+0x26>
  408468:	f04f 0000 	mov.w	r0, #0
  40846c:	4770      	bx	lr
  40846e:	f04f 0001 	mov.w	r0, #1
  408472:	4770      	bx	lr

00408474 <__aeabi_d2iz>:
  408474:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408478:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40847c:	d215      	bcs.n	4084aa <__aeabi_d2iz+0x36>
  40847e:	d511      	bpl.n	4084a4 <__aeabi_d2iz+0x30>
  408480:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408484:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408488:	d912      	bls.n	4084b0 <__aeabi_d2iz+0x3c>
  40848a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40848e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408492:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408496:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40849a:	fa23 f002 	lsr.w	r0, r3, r2
  40849e:	bf18      	it	ne
  4084a0:	4240      	negne	r0, r0
  4084a2:	4770      	bx	lr
  4084a4:	f04f 0000 	mov.w	r0, #0
  4084a8:	4770      	bx	lr
  4084aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4084ae:	d105      	bne.n	4084bc <__aeabi_d2iz+0x48>
  4084b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4084b4:	bf08      	it	eq
  4084b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4084ba:	4770      	bx	lr
  4084bc:	f04f 0000 	mov.w	r0, #0
  4084c0:	4770      	bx	lr
  4084c2:	bf00      	nop

004084c4 <OV2640_JPEG_INIT>:
  4084c4:	00ff ff2c df2e 01ff 323c 0111 0209 2804     ..,.....<2.....(
  4084d4:	e513 4814 0c2c 7833 333a fb3b 003e 1143     ...H,.3x:3;.>.C.
  4084e4:	1016 9239 da35 1a22 c337 0023 c034 1a36     ..9.5.".7.#.4.6.
  4084f4:	8806 c007 870d 410e 004c 0048 005b 0342     .......AL.H.[.B.
  408504:	814a 9921 4024 3825 8226 005c 0063 7061     J.!.$@%8&.\.c.ap
  408514:	8062 057c 8020 3028 006c 806d 006e 0270     b.|. .(0l.m.n.p.
  408524:	9471 c173 4012 1117 4318 0019 4b1a 0932     q.s..@...C...K2.
  408534:	c037 604f a850 006d 383d 3f46 604f 3c0c     7.O`P.m.=8F?O`.<
  408544:	00ff 7fe5 c0f9 2441 14e0 ff76 a033 2042     ......A$..v.3.B 
  408554:	1843 004c d587 3f88 03d7 10d9 82d3 08c8     C.L....?........
  408564:	80c9 007c 007d 037c 487d 487d 087c 207d     ..|.}.|.}H}H|.} 
  408574:	107d 0e7d 0090 0e91 1a91 3191 5a91 6991     }.}........1.Z.i
  408584:	7591 7e91 8891 8f91 9691 a391 af91 c491     .u.~............
  408594:	d791 e891 2091 0092 0693 e393 0593 0593     ..... ..........
  4085a4:	0093 0493 0093 0093 0093 0093 0093 0093     ................
  4085b4:	0093 0096 0897 1997 0297 0c97 2497 3097     .............$.0
  4085c4:	2897 2697 0297 9897 8097 0097 0097 edc3     .(.&............
  4085d4:	00a4 00a8 11c5 51c6 80bf 10c7 66b6 a5b8     .......Q.....f..
  4085e4:	64b7 7cb9 afb3 97b4 ffb5 c5b0 94b1 0fb2     .d.|............
  4085f4:	5cc4 64c0 4bc1 008c 3d86 0050 c851 9652     .\.d.K...=P.Q.R.
  408604:	0053 0054 0055 c85a 965b 005c 00d3 edc3     S.T.U.Z.[.\.....
  408614:	007f 00da 1fe5 67e1 00e0 7fdd 0005 4012     .......g.......@
  408624:	04d3 16c0 12c1 008c 3d86 0050 2c51 2452     .........=P.Q,R$
  408634:	0053 0054 0055 2c5a 245b 005c ffff 0000     S.T.U.Z,[$\.....

00408644 <OV2640_YUV422>:
  408644:	00ff 0005 10da 03d7 00df 8033 403c 77e1     ..........3.<@.w
  408654:	0000 ffff                                   ....

00408658 <OV2640_JPEG>:
  408658:	14e0 77e1 1fe5 03d7 10da 00e0 01ff 0804     ...w............
  408668:	ffff 0000                                   ....

0040866c <OV2640_JPEG_320x240>:
  40866c:	01ff 4012 1117 4318 0019 4b1a 0932 ca4f     ...@...C...K2.O.
  40867c:	a850 235a 006d 1239 da35 1a22 c337 0023     P.Z#m.9.5.".7.#.
  40868c:	c034 1a36 8806 c007 870d 410e 004c 00ff     4.6........AL...
  40869c:	04e0 64c0 4bc1 3586 8950 c851 9652 0053     ...d.K.5P.Q.R.S.
  4086ac:	0054 0055 0057 505a 3c5b 005c 00e0 ffff     T.U.W.ZP[<\.....

004086bc <OV2640_JPEG_640x480>:
  4086bc:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  4086cc:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  4086dc:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  4086ec:	04e0 c8c0 96c1 3d86 8950 9051 2c52 0053     .......=P.Q.R,S.
  4086fc:	0054 8855 0057 a05a 785b 005c 04d3 00e0     T.U.W.Z.[x\.....
  40870c:	ffff 0000                                   ....

00408710 <OV2640_JPEG_800x600>:
  408710:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408720:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408730:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408740:	04e0 c8c0 96c1 3586 8950 9051 2c52 0053     .......5P.Q.R,S.
  408750:	0054 8855 0057 c85a 965b 005c 02d3 00e0     T.U.W.Z.[.\.....
  408760:	ffff 0000                                   ....

00408764 <OV2640_JPEG_1024x768>:
  408764:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408774:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408784:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408794:	c8c0 96c1 008c 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  4087a4:	0054 8855 005a c05b 015c 02d3 ffff 0000     T.U.Z.[.\.......

004087b4 <OV2640_JPEG_1280x1024>:
  4087b4:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  4087c4:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  4087d4:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  4087e4:	04e0 c8c0 96c1 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  4087f4:	0054 8855 0057 405a f05b 015c 02d3 00e0     T.U.W.Z@[.\.....
  408804:	ffff 0000                                   ....

00408808 <OV2640_JPEG_1600x1200>:
  408808:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408818:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408828:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408838:	04e0 c8c0 96c1 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  408848:	0054 8855 0057 905a 2c5b 055c 02d3 00e0     T.U.W.Z.[,\.....
  408858:	ffff 0000                                   ....

0040885c <OV2640_QVGA_YUV422_10FPS>:
  40885c:	000e 8012 05fe 0013 0511 0012 10d5 d40c     ................
  40886c:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40887c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40888c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40889c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  4088ac:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  4088bc:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  4088cc:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  4088dc:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  4088ec:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  4088fc:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  40890c:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  40891c:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  40892c:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  40893c:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

0040894c <OV2640_QVGA_YUV422_15FPS>:
  40894c:	000e 8012 05fe 0013 0311 0012 10d5 d40c     ................
  40895c:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40896c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40897c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40898c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40899c:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  4089ac:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  4089bc:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  4089cc:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  4089dc:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  4089ec:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  4089fc:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  408a0c:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  408a1c:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  408a2c:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

00408a3c <OV2640_QVGA_YUV422_20FPS>:
  408a3c:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  408a4c:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  408a5c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  408a6c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  408a7c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  408a8c:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  408a9c:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  408aac:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  408abc:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  408acc:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  408adc:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  408aec:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  408afc:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  408b0c:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  408b1c:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

00408b2c <OV2640_QVGA_YUV422_30FPS>:
  408b2c:	000e 8012 05fe 0013 0111 0012 10d5 d40c     ................
  408b3c:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  408b4c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  408b5c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  408b6c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  408b7c:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  408b8c:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  408b9c:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  408bac:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  408bbc:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  408bcc:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  408bdc:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  408bec:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  408bfc:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  408c0c:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

00408c1c <OV2640_QVGA_RGB888>:
  408c1c:	000e 8012 0013 0111 0012 10d5 120c 340d     ...............4
  408c2c:	2517 a018 0319 f01a 891b 0322 1829 f82b     .%........".).+.
  408c3c:	012c a031 f032 c433 b43a 3f36 6004 8027     ,.1.2.3.:.6?.`'.
  408c4c:	0f3d 803e 403f 7f40 6a41 2942 e544 4145     =.>.?@@.AjB)D.EA
  408c5c:	0247 6449 a14a 704b 1a4c 504d 134e 0064     G.IdJ.KpL.MPN.d.
  408c6c:	8867 1a68 3814 3c24 3025 7226 9750 7e51     g.h..8$<%0&rP.Q~
  408c7c:	0052 0053 0020 2321 1438 00e9 5556 ff57     R.S. .!#8...VUW.
  408c8c:	ff58 ff59 045f 00ec ff13 7f80 3f81 3282     X.Y._........?.2
  408c9c:	0183 1138 7084 0085 0386 0187 0588 3089     ..8..p.........0
  408cac:	308d 858f 3093 8595 3099 859b 089c 129d     .0...0...0......
  408cbc:	239e 459f 55a0 64a1 72a2 7fa3 8ba4 95a5     .#.E.U.d.r......
  408ccc:	a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce 6ecf     .............x.n
  408cdc:	0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b 885c     ..........Z$[.\.
  408cec:	605d 6eac ffbe 00bf 5031 7832 3f82 0112     ]`.n....1P2x.?..
  408cfc:	2f36 0483 0053 f433 8a1b 0322 0084 0084     6/..S.3...".....
  408d0c:	0228 ffff                                   (...

00408d10 <OV2640_QQVGA_YUV422>:
  408d10:	000e 8012 0013 0111 0012 10d5 540c 340d     .............T.4
  408d20:	0116 2517 a018 0319 f01a 891b 0322 1829     ...%........".).
  408d30:	f82b 012c a031 f032 c433 b43a 3f36 6004     +.,.1.2.3.:.6?.`
  408d40:	8027 0f3d 803e 403f 7f40 6a41 2942 e544     '.=.>.?@@.AjB)D.
  408d50:	4145 0247 6449 a14a 704b 1a4c 504d 134e     EAG.IdJ.KpL.MPN.
  408d60:	0064 8867 1a68 3814 3c24 3025 7226 9750     d.g.h..8$<%0&rP.
  408d70:	7e51 0052 0053 0020 2321 1438 00e9 5556     Q~R.S. .!#8...VU
  408d80:	ff57 ff58 ff59 045f 00ec ff13 7f80 3f81     W.X.Y._........?
  408d90:	3282 0183 1138 7084 0085 0386 0187 0588     .2..8..p........
  408da0:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  408db0:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  408dc0:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  408dd0:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  408de0:	885c 605d 6eac ffbe 00bf 2831 3c32 0034     \.]`.n....1(2<4.
  408df0:	3f82 0012 3f36 0053 0033 891b 0322 0228     .?..6?S.3...".(.
  408e00:	00d9 ffff                                   ....

00408e04 <OV2640_QQVGA_RGB888>:
  408e04:	000e 8012 0013 0111 0012 10d5 120c 340d     ...............4
  408e14:	2517 a018 0319 f01a 891b 0322 1829 f82b     .%........".).+.
  408e24:	012c a031 f032 c433 b43a 3f36 6004 8027     ,.1.2.3.:.6?.`'.
  408e34:	0f3d 803e 403f 7f40 6a41 2942 e544 4145     =.>.?@@.AjB)D.EA
  408e44:	0247 6449 a14a 704b 1a4c 504d 134e 0064     G.IdJ.KpL.MPN.d.
  408e54:	8867 1a68 3814 3c24 3025 7226 9750 7e51     g.h..8$<%0&rP.Q~
  408e64:	0052 0053 0020 2321 1438 00e9 5556 ff57     R.S. .!#8...VUW.
  408e74:	ff58 ff59 045f 00ec ff13 7f80 3f81 3282     X.Y._........?.2
  408e84:	0183 1138 7084 0085 0386 0187 0588 3089     ..8..p.........0
  408e94:	308d 858f 3093 8595 3099 859b 089c 129d     .0...0...0......
  408ea4:	239e 459f 55a0 64a1 72a2 7fa3 8ba4 95a5     .#.E.U.d.r......
  408eb4:	a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce 6ecf     .............x.n
  408ec4:	0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b 885c     ..........Z$[.\.
  408ed4:	605d 6eac ffbe 00bf 2831 3c32 3f82 0112     ]`.n....1(2<.?..
  408ee4:	2f36 0483 0053 f433 8a1b 0322 0084 0084     6/..S.3...".....
  408ef4:	0228 ffff                                   (...

00408ef8 <OV2640_TEST_PATTERN>:
  408ef8:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  408f08:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  408f18:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  408f28:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  408f38:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  408f48:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  408f58:	9750 7e51 0052 0053 0020 2321 0738 0284     P.Q~R.S. .!#8...
  408f68:	1438 00e9 5556 ff57 ff58 ff59 045f 00ec     8...VUW.X.Y._...
  408f78:	ff13 7f80 3f81 3282 0183 1138 0085 0386     .....?.2..8.....
  408f88:	0187 0588 3089 308d 858f 3093 8595 3099     .....0.0...0...0
  408f98:	859b 089c 129d 239e 459f 55a0 64a1 72a2     .......#.E.U.d.r
  408fa8:	7fa3 8ba4 95a5 a7a6 b5a7 cba8 dda9 ecaa     ................
  408fb8:	1aab 78ce 6ecf 0ad0 0cd1 84d2 90d3 1ed4     ...x.n..........
  408fc8:	245a 1f5b 885c 605d 6eac ffbe 00bf 5031     Z$[.\.]`.n....1P
  408fd8:	7832 3f82 0012 3f36 0053 c433 891b 0322     2x.?..6?S.3...".
  408fe8:	0228 ffff                                   (...

00408fec <OV2640_VGA_YUV422_20FPS>:
  408fec:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  408ffc:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40900c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40901c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40902c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40903c:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  40904c:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  40905c:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  40906c:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  40907c:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  40908c:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  40909c:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  4090ac:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  4090bc:	885c 605d 6eac ffbe 00bf a031 f032 3f82     \.]`.n....1.2..?
  4090cc:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...
  4090dc:	2c30 0030 6f4e 656e 0000 0000 6557 7362     0,0.None....Webs
  4090ec:	636f 656b 2074 6964 6373 6e6f 656e 7463     ocket disconnect
  4090fc:	6465 0000 7453 7261 2074 7274 6e61 6673     ed..Start transf
  40910c:	7265 0000 6f43 706d 656c 6574 0000 0000     er..Complete....
  40911c:	6d69 6761 5f65 7274 6e61 6673 7265 2520     image_transfer %
  40912c:	0d64 000a 6572 6f62 746f 0a0d 0000 0000     d...reboot......
  40913c:	6573 7574 2070 6577 0d62 000a 6f70 6c6c     setup web...poll
  40914c:	6120 6c6c 0a0d 0000                          all....

00409154 <_global_impure_ptr>:
  409154:	0018 2000 4e49 0046 6e69 0066 414e 004e     ... INF.inf.NAN.
  409164:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  409174:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  409184:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  409194:	296c 0000 0030 0000                         l)..0...

0040919c <blanks.7208>:
  40919c:	2020 2020 2020 2020 2020 2020 2020 2020                     

004091ac <zeroes.7209>:
  4091ac:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  4091bc:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  4091cc:	0000 0000                                   ....

004091d0 <__mprec_bigtens>:
  4091d0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  4091e0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  4091f0:	bf3c 7f73 4fdd 7515                         <.s..O.u

004091f8 <__mprec_tens>:
  4091f8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  409208:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  409218:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  409228:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  409238:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  409248:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  409258:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  409268:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  409278:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  409288:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  409298:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  4092a8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  4092b8:	9db4 79d9 7843 44ea                         ...yCx.D

004092c0 <p05.6040>:
  4092c0:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  4092d0:	4f50 4953 0058 0000 002e 0000               POSIX.......

004092dc <_ctype_>:
  4092dc:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  4092ec:	2020 2020 2020 2020 2020 2020 2020 2020                     
  4092fc:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40930c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40931c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40932c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40933c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40934c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40935c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

004093e0 <_init>:
  4093e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4093e2:	bf00      	nop
  4093e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4093e6:	bc08      	pop	{r3}
  4093e8:	469e      	mov	lr, r3
  4093ea:	4770      	bx	lr

004093ec <__init_array_start>:
  4093ec:	00405351 	.word	0x00405351

004093f0 <__frame_dummy_init_array_entry>:
  4093f0:	004000f1                                ..@.

004093f4 <_fini>:
  4093f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4093f6:	bf00      	nop
  4093f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4093fa:	bc08      	pop	{r3}
  4093fc:	469e      	mov	lr, r3
  4093fe:	4770      	bx	lr

00409400 <__fini_array_start>:
  409400:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <_impure_ptr>:
20000010:	0018 2000 0000 0000                         ... ....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <__malloc_av_>:
	...
20000448:	0440 2000 0440 2000 0448 2000 0448 2000     @.. @.. H.. H.. 
20000458:	0450 2000 0450 2000 0458 2000 0458 2000     P.. P.. X.. X.. 
20000468:	0460 2000 0460 2000 0468 2000 0468 2000     `.. `.. h.. h.. 
20000478:	0470 2000 0470 2000 0478 2000 0478 2000     p.. p.. x.. x.. 
20000488:	0480 2000 0480 2000 0488 2000 0488 2000     ... ... ... ... 
20000498:	0490 2000 0490 2000 0498 2000 0498 2000     ... ... ... ... 
200004a8:	04a0 2000 04a0 2000 04a8 2000 04a8 2000     ... ... ... ... 
200004b8:	04b0 2000 04b0 2000 04b8 2000 04b8 2000     ... ... ... ... 
200004c8:	04c0 2000 04c0 2000 04c8 2000 04c8 2000     ... ... ... ... 
200004d8:	04d0 2000 04d0 2000 04d8 2000 04d8 2000     ... ... ... ... 
200004e8:	04e0 2000 04e0 2000 04e8 2000 04e8 2000     ... ... ... ... 
200004f8:	04f0 2000 04f0 2000 04f8 2000 04f8 2000     ... ... ... ... 
20000508:	0500 2000 0500 2000 0508 2000 0508 2000     ... ... ... ... 
20000518:	0510 2000 0510 2000 0518 2000 0518 2000     ... ... ... ... 
20000528:	0520 2000 0520 2000 0528 2000 0528 2000      ..  .. (.. (.. 
20000538:	0530 2000 0530 2000 0538 2000 0538 2000     0.. 0.. 8.. 8.. 
20000548:	0540 2000 0540 2000 0548 2000 0548 2000     @.. @.. H.. H.. 
20000558:	0550 2000 0550 2000 0558 2000 0558 2000     P.. P.. X.. X.. 
20000568:	0560 2000 0560 2000 0568 2000 0568 2000     `.. `.. h.. h.. 
20000578:	0570 2000 0570 2000 0578 2000 0578 2000     p.. p.. x.. x.. 
20000588:	0580 2000 0580 2000 0588 2000 0588 2000     ... ... ... ... 
20000598:	0590 2000 0590 2000 0598 2000 0598 2000     ... ... ... ... 
200005a8:	05a0 2000 05a0 2000 05a8 2000 05a8 2000     ... ... ... ... 
200005b8:	05b0 2000 05b0 2000 05b8 2000 05b8 2000     ... ... ... ... 
200005c8:	05c0 2000 05c0 2000 05c8 2000 05c8 2000     ... ... ... ... 
200005d8:	05d0 2000 05d0 2000 05d8 2000 05d8 2000     ... ... ... ... 
200005e8:	05e0 2000 05e0 2000 05e8 2000 05e8 2000     ... ... ... ... 
200005f8:	05f0 2000 05f0 2000 05f8 2000 05f8 2000     ... ... ... ... 
20000608:	0600 2000 0600 2000 0608 2000 0608 2000     ... ... ... ... 
20000618:	0610 2000 0610 2000 0618 2000 0618 2000     ... ... ... ... 
20000628:	0620 2000 0620 2000 0628 2000 0628 2000      ..  .. (.. (.. 
20000638:	0630 2000 0630 2000 0638 2000 0638 2000     0.. 0.. 8.. 8.. 
20000648:	0640 2000 0640 2000 0648 2000 0648 2000     @.. @.. H.. H.. 
20000658:	0650 2000 0650 2000 0658 2000 0658 2000     P.. P.. X.. X.. 
20000668:	0660 2000 0660 2000 0668 2000 0668 2000     `.. `.. h.. h.. 
20000678:	0670 2000 0670 2000 0678 2000 0678 2000     p.. p.. x.. x.. 
20000688:	0680 2000 0680 2000 0688 2000 0688 2000     ... ... ... ... 
20000698:	0690 2000 0690 2000 0698 2000 0698 2000     ... ... ... ... 
200006a8:	06a0 2000 06a0 2000 06a8 2000 06a8 2000     ... ... ... ... 
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 

20000848 <__malloc_sbrk_base>:
20000848:	ffff ffff                                   ....

2000084c <__malloc_trim_threshold>:
2000084c:	0000 0002                                   ....

20000850 <__global_locale>:
20000850:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000870:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000890:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008b0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008d0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008f0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000910:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000930:	7b89 0040 7749 0040 0000 0000 92dc 0040     .{@.Iw@.......@.
20000940:	92d8 0040 9178 0040 9178 0040 9178 0040     ..@.x.@.x.@.x.@.
20000950:	9178 0040 9178 0040 9178 0040 9178 0040     x.@.x.@.x.@.x.@.
20000960:	9178 0040 9178 0040 ffff ffff ffff ffff     x.@.x.@.........
20000970:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20000998:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
